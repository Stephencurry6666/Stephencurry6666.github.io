<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>愿你出走半生，归来仍是少年</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://stephencurry6666.github.io/"/>
  <updated>2020-05-16T09:02:43.518Z</updated>
  <id>https://stephencurry6666.github.io/</id>
  
  <author>
    <name>Stephencurry6666</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>再次温习线段树的一些思路</title>
    <link href="https://stephencurry6666.github.io/2020/05/16/%E5%86%8D%E6%AC%A1%E6%B8%A9%E4%B9%A0%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%B7%AF/"/>
    <id>https://stephencurry6666.github.io/2020/05/16/%E5%86%8D%E6%AC%A1%E6%B8%A9%E4%B9%A0%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%B7%AF/</id>
    <published>2020-05-16T08:15:29.591Z</published>
    <updated>2020-05-16T09:02:43.518Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>因为之前4月份打了将近一个月的个人赛，有些以前学习过的算法已经忘了，所以重新再温习一遍。</p><a id="more"></a><h2 id="关于线段树"><a href="#关于线段树" class="headerlink" title="关于线段树"></a>关于线段树</h2><p><strong>这里提一下完全二叉树。完全二叉树是叶节点只能出现在最下层和次下层，并且最下面一层的结点都集中在该层最左边的若干位置的二叉树。若设二叉树的深度为h，除第h层外，其它各层(1～h-1)的结点数都达到最大个数，第h层所有的结点都连续集中在最左边。那么线段树就是完全二叉树，一定条件下成为满二叉树。线段树的主要思想是二分，也就是通过二分的方法来查找节点。假设有编号从1到n的n个点，每个点都存了一些信息，用[L,R]表示下标从L到R的这些点。线段树的用处就是，对编号连续的一些点进行修改或者统计操作，修改和统计的复杂度都是O(log2(n))。</strong></p><p><strong>线段树的原理，就是，将[1,n]分解成若干特定的子区间(数量不超过4*n),然后，将每个区间[L,R]都分解为少量特定的子区间，通过对这些少量子区间的修改或者统计，来实现快速对[L,R]的修改或者统计。由此看出，用线段树统计的东西，必须符合区间加法，否则，不可能通过分成的子区间来得到[L,R]的统计结果。</strong></p><p><strong>符合区间加法的例子：</strong></p><ul><li><p>数字之和——总数字之和 = 左区间数字之和 + 右区间数字之和</p></li><li><p>最大公因数(GCD)——总GCD = gcd(左区间GCD,右区间GCD)</p></li><li><p>最大值——总最大值=max(左区间最大值，右区间最大值)</p></li></ul><p><strong>不符合区间加法的例子：</strong></p><ul><li><p>众数——只知道左右区间的众数，没法求总区间的众数</p></li><li><p>01序列的最长连续零——只知道左右区间的最长连续零，没法知道总的最长连续零</p></li></ul><p><strong>一个问题，只要能化成对一些连续点的修改和统计问题，基本就可以用线段树来解决。</strong></p><h2 id="线段树的原理"><a href="#线段树的原理" class="headerlink" title="线段树的原理"></a>线段树的原理</h2><p><strong>（注：由于线段树的每个节点代表一个区间，以下叙述中不区分节点和区间，只是根据语境需要，选择合适的词）</strong></p><p>线段树本质上是维护下标为1,2,..,n的n个按顺序排列的数的信息，所以，其实是“点树”，是维护n的点的信息，至于每个点的数据的含义可以有很多，<br>在对线段操作的线段树中，每个点代表一条线段，在用线段树维护数列信息的时候，每个点代表一个数，但本质上都是每个点代表一个数。以下，在讨论线段树的时候，区间[L,R]指的是下标从L到R的这(R-L+1)个数，而不是指一条连续的线段。只是有时候这些数代表实际上一条线段的统计结果而已。</p><p>线段树是将每个区间[L,R]分解成[L,M]和[M+1,R] (其中M=(L+R)/2 这里的除法是整数除法，即对结果下取整)直到 L==R 为止。</p><p>开始时是区间[1,n] ,通过递归来逐步分解，假设根的高度为1的话，树的最大高度为<img src="https://img-blog.csdn.net/20150908232141714" alt="tupian1">（n&gt;1）。</p><p>线段树对于每个n的分解是唯一的，所以n相同的线段树结构相同，这也是实现可持久化线段树的基础。</p><p>下图展示了区间[1,13]的分解过程：</p><p><img src="https://img-blog.csdn.net/20150908231214395?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="tupian2"></p><p>上图中，每个区间都是一个节点，每个节点存自己对应的区间的统计信息。</p><h3 id="线段树的点修改"><a href="#线段树的点修改" class="headerlink" title="线段树的点修改"></a>线段树的点修改</h3><p>假设要修改[5]的值，可以发现，每层只有一个节点包含[5],所以修改了[5]之后，只需要每层更新一个节点就可以线段树每个节点的信息都是正确的，所以修改次数的最大值为层数<img src="https://img-blog.csdn.net/20150908232141714" alt="tupian3">。</p><p>复杂度O(log2(n))</p><h3 id="线段树的区间修改"><a href="#线段树的区间修改" class="headerlink" title="线段树的区间修改"></a>线段树的区间修改</h3><p>在写线段树的区间修改的时候，我们需要先掌握一个知识点，就是懒惰标记。</p><p><strong>什么是懒惰标记？</strong></p><p>试想，我们在操作的时候有可能有这样的操作。首先进行区间修改，修改了800次，然后再进行一次查询。这样，如果我们每次都将整个线段树的数据进行更新，实际上是非常慢的，如果我们能用一段空间，来记录修改数据，只有在使用的时候，一次性更新，就非常的方便。</p><p>所以这也是懒惰标记的作用。可以先对修改的数据进行储存，只有在使用的时候才更新线段树。那么，理论上我们应该建一个跟线段树同样大小的数组，称为懒惰数组，表示了每个节点的懒惰标记。有这样的操作：</p><ul><li><p>1.修改数据的时候，每次递归到某节点，修改数据以后将数据的变化添加到数组中。</p></li><li><p>2.当使用到这个节点的时候，发现对应的懒惰标记存在，那么就应该更新该节点，以及以下的所有节点的数据，方便使用。</p></li></ul><p>总之，就是不使用的时候就一直在积累，在使用的时候再统一更新。</p><p>那么懒惰数组的更新非常简单，对线段树更新的时候就可以添加到懒惰标记，但是在使用的时候，我们需要用一个函数来完成懒惰标记的下推操作，也就是更新积累的值。代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">void Pushdown(int rt, int l, int r) &#x2F;&#x2F;下推标记的函数。l,r为左子树，右子树的数字数量</span><br><span class="line">&#123;</span><br><span class="line">    if (lz[rt])</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;下推标记</span><br><span class="line">        lz[rt &lt;&lt; 1] +&#x3D; lz[rt];</span><br><span class="line">        lz[rt &lt;&lt; 1 | 1] +&#x3D; lz[rt];</span><br><span class="line">        &#x2F;&#x2F;修改子节点的Sum使之与对应的lz相对应</span><br><span class="line">        &#x2F;&#x2F;int mid&#x3D;(l+r)&gt;&gt;1;与下面Update_tree_interval函数中Pushdown(rt,l,r)对应</span><br><span class="line">        Sum[rt &lt;&lt; 1] +&#x3D; lz[rt] * l;     &#x2F;&#x2F;Sum[rt&lt;&lt;1]+&#x3D;(mid-l+1)*lz[rt];与下面Update_tree_interval函数中Pushdown(rt,l,r)对应</span><br><span class="line">        Sum[rt &lt;&lt; 1 | 1] +&#x3D; lz[rt] * r; &#x2F;&#x2F;Sum[rt&lt;&lt;1|1]+&#x3D;(r-mid)*lz[rt];与下面Update_tree_interval函数中Pushdown(rt,l,r)对应</span><br><span class="line">        &#x2F;&#x2F;清除本节点标记</span><br><span class="line">        lz[rt] &#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>lz数组，即lazy，就是懒惰标记数组。可以看出，当lz[rt]存在值的时候，就说明现在我在使用这个节点，而这个节点以及其下的节点需要更新了，所以就利用二叉树的性质向下传递更新数据，同时更新线段树中的数据。最终，要将该节点的懒惰标记清零。</p><p>注意，下推的时候不是一直更新到叶子节点，而是只更新当前节点以及2个子树，因为实际操作的时候，只要碰到对某节点的操作就要调用Pushdown()函数，所以每次只用下推一层即可。</p><p>Pushdown()函数的使用需要在下面的区间操作中添加。</p><p><strong>区间修改：</strong></p><p>单点更新类似二分查找，更新的时候对经过的路径进行操作就可以了。但是区间更新需要考虑整个区间。线段树除了叶子节点，都表示了一段区间的值，那么就要配合懒惰标记在整个区间上进行操作。</p><h3 id="线段树的区间查询"><a href="#线段树的区间查询" class="headerlink" title="线段树的区间查询"></a>线段树的区间查询</h3><p>区间查询的原理跟区间更新基本一样，也是看结点表示的数据范围有不同的操作。同样，在到某个结点的时候一定要调用Pushdown()。不同点在于跟数据操作无关，但是需要一个sum来储存收集到的区间数据，同时最后return。这样在递归完成以后最后返回的就是区间和了。理解区间修改后，区间查询就容易的多了。</p><h3 id="线段树的储存结构"><a href="#线段树的储存结构" class="headerlink" title="线段树的储存结构"></a>线段树的储存结构</h3><p>线段树是用数组来模拟树形结构，对于每一个节点R ,左子节点为 2 <em> R (一般写作R&lt;&lt;1)右子节点为 2 </em> R+1（一般写作R&lt;&lt;1|1）</p><p>然后以1为根节点，所以，整体的统计信息是存在节点1中的。</p><p>这么表示的原因看下图就很明白了，左子树的节点标号都是根节点的两倍，右子树的节点标号都是左子树+1：</p><p><img src="https://img-blog.csdn.net/20150909010827440?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="tupian4"></p><p>线段树需要的数组元素个数是：<img src="https://img-blog.csdn.net/20150909010459072" alt="tupian5">,一般都开4倍空间，比如： int Sum[maxx&lt;&lt;2];</p><h3 id="脱离lazy数组"><a href="#脱离lazy数组" class="headerlink" title="脱离lazy数组"></a>脱离lazy数组</h3><p>lazy数组的使用在很大程度将降低了解决问题所耗费的时间，但是也增加了对模板的修改难度。诚然，lazy很实用，但是在一些问题的构造上并不容易修改。我们平常的区间修改，整个区间的数值变化是统一的，所以我们能够在数学上提前好多个结点先算出来更改情况。但是有很多问题并不是这样的。</p><p>例如：hdu4027。11年上海网络赛，要求区间内对每个节点的数值取其二次根。那么再考虑lazy数组就是徒生烦恼。如果我们抛弃lazy数组，直接每次都更新到叶子结点，同时考虑剪枝，速度也并不慢（500ms）。所以，在区间操作不平衡，同时可以剪枝的情况下，完全可以抛弃lazy数组，从而修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">boolean cleck(int rt,int l,int r)&#123;</span><br><span class="line">    &#x2F;&#x2F; 剪枝条件</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void Update_tree_interval(int rt, int l, int r, int L, int R) &#123;</span><br><span class="line">    if (L &#x3D;&#x3D; R) &#123;</span><br><span class="line">        Sum[rt] &#x3D; 1; &#x2F;&#x2F; 更新方式</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    int mid &#x3D; (L + R) &#x2F; 2;</span><br><span class="line">    if (mid &gt;&#x3D; l &amp;&amp; cleck(rt &lt;&lt; 1,L,mid))</span><br><span class="line">    Update_tree_interval(rt &lt;&lt; 1, l, r, L, mid);</span><br><span class="line">    if (mid &lt; r &amp;&amp; cleck(rt &lt;&lt; 1 | 1,mid+1,R))</span><br><span class="line">    Update_tree_interval(rt &lt;&lt; 1 | 1, l, r, mid + 1, R);</span><br><span class="line">    Pushup(rt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线段树实现代码"><a href="#线段树实现代码" class="headerlink" title="线段树实现代码"></a>线段树实现代码</h2><h3 id="首先：定义"><a href="#首先：定义" class="headerlink" title="首先：定义"></a>首先：定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 10010;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">using namespace std;</span><br><span class="line">int A[maxx];        &#x2F;&#x2F;存原数组数据下标[1,n]</span><br><span class="line">int Sum[maxx &lt;&lt; 2]; &#x2F;&#x2F;Sum求和</span><br><span class="line">int lz[maxx &lt;&lt; 2];  &#x2F;&#x2F;lz为懒惰标记</span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void init()&#x2F;&#x2F;初始化</span><br><span class="line">&#123;</span><br><span class="line">    memset(Sum,0,sizeof(Sum));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="建树"><a href="#建树" class="headerlink" title="建树"></a>建树</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void Pushup(int rt) &#x2F;&#x2F;Pushup函数更新节点</span><br><span class="line">&#123;</span><br><span class="line">    Sum[rt] &#x3D; Sum[rt &lt;&lt; 1] + Sum[rt &lt;&lt; 1 | 1];</span><br><span class="line">&#125;</span><br><span class="line">void Build_tree(int l, int r, int rt) &#x2F;&#x2F;建树,l,r表示当前节点区间，rt表示当前节点编号</span><br><span class="line">&#123;</span><br><span class="line">    if (l &#x3D;&#x3D; r) &#x2F;&#x2F;若到达叶节点</span><br><span class="line">    &#123;</span><br><span class="line">        Sum[rt] &#x3D; A[l];&#x2F;&#x2F;cin&gt;&gt;Sum[rt];</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    int mid &#x3D; (l + r) &gt;&gt; 1;</span><br><span class="line">    Build_tree(l, mid, rt &lt;&lt; 1);</span><br><span class="line">    Build_tree(mid + 1, r, rt &lt;&lt; 1 | 1);</span><br><span class="line">    Pushup(rt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的建树，是一个递归的过程。l与r分别表示区间，结合上面的图，当l==r的时候说明递归已经遍历到叶子节点了，而这个节点rt也是二叉树的节点编号。对应了数组的下标。所以进行赋值。然后直接return进行回溯。那么在正常递归的时候，我们需要利用二叉树的性质，即对于rt编号的节点而言，左子树编号为rt&lt;&lt;1，右子树为rt&lt;&lt;1|1。同样，由于二分的性质，利用mid = (l+r)/2，就可以获取下一个子树的区间范围。</p><p>在回溯的时候，是从树的最下层开始向最上层回溯，那么同样利用二叉树的性质，我们可以轻松将子树的数据加到父节点上。这样，当函数完成的时候，我们就可以利用数组来构建了一个线段树。</p><h3 id="懒惰标记，下推操作"><a href="#懒惰标记，下推操作" class="headerlink" title="懒惰标记，下推操作"></a>懒惰标记，下推操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">void Pushdown(int rt, int l, int r) &#x2F;&#x2F;下推标记的函数。l,r为左子树，右子树的数字数量</span><br><span class="line">&#123;</span><br><span class="line">    if (lz[rt])</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;下推标记</span><br><span class="line">        lz[rt &lt;&lt; 1] +&#x3D; lz[rt];</span><br><span class="line">        lz[rt &lt;&lt; 1 | 1] +&#x3D; lz[rt];</span><br><span class="line">        &#x2F;&#x2F;修改子节点的Sum使之与对应的lz相对应</span><br><span class="line">        &#x2F;&#x2F;int mid&#x3D;(l+r)&gt;&gt;1;与下面Update_tree_interval函数中Pushdown(rt,l,r)对应</span><br><span class="line">        Sum[rt &lt;&lt; 1] +&#x3D; lz[rt] * l;     &#x2F;&#x2F;Sum[rt&lt;&lt;1]+&#x3D;(mid-l+1)*lz[rt];与下面Update_tree_interval函数中Pushdown(rt,l,r)对应</span><br><span class="line">        Sum[rt &lt;&lt; 1 | 1] +&#x3D; lz[rt] * r; &#x2F;&#x2F;Sum[rt&lt;&lt;1|1]+&#x3D;(r-mid)*lz[rt];与下面Update_tree_interval函数中Pushdown(rt,l,r)对应</span><br><span class="line">        &#x2F;&#x2F;清除本节点标记</span><br><span class="line">        lz[rt] &#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单点修改"><a href="#单点修改" class="headerlink" title="单点修改"></a>单点修改</h3><p>线段树并不必须要进行区间的操作，如果是对单点进行操作，完全可以用更快的方法来实现。而对于单点修改而言，其实相比区间修改的代码要简单很多（因为lazy数组的存在），所以能用针对单点的修改最好不要用区间修改。单点更新非常类似二分查找，通过递归找到更新点的位置，在回溯的时候更新所有节点的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">void Update_tree_point(int l, int r, int rt, int a, int b) &#x2F;&#x2F;点修改，假设A[a]&#x3D;b,l,r表示当前节点区间，rt表示当前节点编号，a为更新点，b为更新值</span><br><span class="line">&#123;</span><br><span class="line">    if (l &#x3D;&#x3D; r) &#x2F;&#x2F;到叶节点，修改</span><br><span class="line">    &#123;</span><br><span class="line">        A[a] &#x3D; b;</span><br><span class="line">        Sum[rt] &#x3D; b;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    int mid &#x3D; (l + r) &gt;&gt; 1;</span><br><span class="line">    &#x2F;&#x2F;根据条件判断往左子树调用还是往右</span><br><span class="line">    &#x2F;&#x2F; Pushdown(rt,mid-l+1,r-mid); 若既有点更新又有区间更新，需要这句话</span><br><span class="line">    if (a &lt;&#x3D; mid)</span><br><span class="line">        Update_tree_point(l, mid, rt &lt;&lt; 1, a, b);</span><br><span class="line">    else</span><br><span class="line">        Update_tree_point(mid + 1, r, rt &lt;&lt; 1 | 1, a, b);</span><br><span class="line">    Pushup(rt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="区间修改"><a href="#区间修改" class="headerlink" title="区间修改"></a>区间修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">void Update_tree_interval(int L, int R, int l, int r, int rt, int b) &#x2F;&#x2F;区间修改，假设A[L,R]&#x3D;b,L,R表示操作区间，l,r表示当前节点区间，rt表示当前节点编号,b为更新值</span><br><span class="line">&#123;</span><br><span class="line">    if (L &lt;&#x3D; l &amp;&amp; r &lt;&#x3D; R) &#x2F;&#x2F;如果本区间完全在操作区间[L,R]以内</span><br><span class="line">    &#123;</span><br><span class="line">        Sum[rt] +&#x3D; b * (r - l + 1);</span><br><span class="line">        lz[rt] +&#x3D; b; &#x2F;&#x2F;增加lz标记，表示本区间的Sum正确，子区间的Sum仍需要根据lz的值来调整</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    int mid &#x3D; (l + r) &gt;&gt; 1;</span><br><span class="line">    Pushdown(rt, mid - l + 1, r - mid); &#x2F;&#x2F;Pushdown(rt,l,r);&#x2F;&#x2F;下推标记</span><br><span class="line">    &#x2F;&#x2F;这里判断左右子树跟[L,R]有无交集，有交集才递归</span><br><span class="line">    if (L &lt;&#x3D; mid)</span><br><span class="line">        Update_tree_interval(L, R, l, mid, rt &lt;&lt; 1, b);</span><br><span class="line">    if (R &gt; mid)</span><br><span class="line">        Update_tree_interval(L, R, mid + 1, r, rt &lt;&lt; 1 | 1, b);</span><br><span class="line">    Pushup(rt); &#x2F;&#x2F;更新本节点信息</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="区间查询"><a href="#区间查询" class="headerlink" title="区间查询"></a>区间查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ll Query_tree(int L, int R, int l, int r, int rt) &#x2F;&#x2F;区间查询，L,R表示操作区间，l,r表示当前节点区间，rt表示当前节点编号</span><br><span class="line">&#123;</span><br><span class="line">    if (L &lt;&#x3D; l &amp;&amp; r &lt;&#x3D; R)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;在区间内，直接返回</span><br><span class="line">        return Sum[rt];</span><br><span class="line">    &#125;</span><br><span class="line">    int mid &#x3D; (l + r) &gt;&gt; 1;</span><br><span class="line">    &#x2F;&#x2F;下推标记，否则Sum可能不正确</span><br><span class="line">    Pushdown(rt, mid - l + 1, r - mid); &#x2F;&#x2F;Pushdown(rt,l,r);</span><br><span class="line">    ll sum &#x3D; 0; &#x2F;&#x2F;累计答案</span><br><span class="line">    if (L &lt;&#x3D; mid)</span><br><span class="line">        sum +&#x3D; Query_tree(L, R, l, mid, rt &lt;&lt; 1);</span><br><span class="line">    if (R &gt; mid)</span><br><span class="line">        sum +&#x3D; Query_tree(L, R, mid + 1, r, rt &lt;&lt; 1 | 1);</span><br><span class="line">    return sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线段树模板"><a href="#线段树模板" class="headerlink" title="线段树模板"></a>线段树模板</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 10010;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">using namespace std;</span><br><span class="line">int A[maxx];        &#x2F;&#x2F;存原数组数据下标[1,n]</span><br><span class="line">int Sum[maxx &lt;&lt; 2]; &#x2F;&#x2F;Sum求和</span><br><span class="line">int lz[maxx &lt;&lt; 2];  &#x2F;&#x2F;lz为懒惰标记</span><br><span class="line"></span><br><span class="line">void init()&#x2F;&#x2F;初始化</span><br><span class="line">&#123;</span><br><span class="line">    memset(Sum,0,sizeof(Sum));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Pushup(int rt) &#x2F;&#x2F;Pushup函数更新节点</span><br><span class="line">&#123;</span><br><span class="line">    Sum[rt] &#x3D; Sum[rt &lt;&lt; 1] + Sum[rt &lt;&lt; 1 | 1];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Pushdown(int rt, int l, int r) &#x2F;&#x2F;下推标记的函数。l,r为左子树，右子树的数字数量</span><br><span class="line">&#123;</span><br><span class="line">    if (lz[rt])</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;下推标记</span><br><span class="line">        lz[rt &lt;&lt; 1] +&#x3D; lz[rt];</span><br><span class="line">        lz[rt &lt;&lt; 1 | 1] +&#x3D; lz[rt];</span><br><span class="line">        &#x2F;&#x2F;修改子节点的Sum使之与对应的lz相对应</span><br><span class="line">        &#x2F;&#x2F;int mid&#x3D;(l+r)&gt;&gt;1;与下面Update_tree_interval函数中Pushdown(rt,l,r)对应</span><br><span class="line">        Sum[rt &lt;&lt; 1] +&#x3D; lz[rt] * l;     &#x2F;&#x2F;Sum[rt&lt;&lt;1]+&#x3D;(mid-l+1)*lz[rt];与下面Update_tree_interval函数中Pushdown(rt,l,r)对应</span><br><span class="line">        Sum[rt &lt;&lt; 1 | 1] +&#x3D; lz[rt] * r; &#x2F;&#x2F;Sum[rt&lt;&lt;1|1]+&#x3D;(r-mid)*lz[rt];与下面Update_tree_interval函数中Pushdown(rt,l,r)对应</span><br><span class="line">        &#x2F;&#x2F;清除本节点标记</span><br><span class="line">        lz[rt] &#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Build_tree(int l, int r, int rt) &#x2F;&#x2F;建树,l,r表示当前节点区间，rt表示当前节点编号</span><br><span class="line">&#123;</span><br><span class="line">    if (l &#x3D;&#x3D; r) &#x2F;&#x2F;若到达叶节点</span><br><span class="line">    &#123;</span><br><span class="line">        Sum[rt] &#x3D; A[l];&#x2F;&#x2F;cin&gt;&gt;Sum[rt];</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    int mid &#x3D; (l + r) &gt;&gt; 1;</span><br><span class="line">    Build_tree(l, mid, rt &lt;&lt; 1);</span><br><span class="line">    Build_tree(mid + 1, r, rt &lt;&lt; 1 | 1);</span><br><span class="line">    Pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Update_tree_point(int l, int r, int rt, int a, int b) &#x2F;&#x2F;点修改，假设A[a]&#x3D;b,l,r表示当前节点区间，rt表示当前节点编号，a为更新点，b为更新值</span><br><span class="line">&#123;</span><br><span class="line">    if (l &#x3D;&#x3D; r) &#x2F;&#x2F;到叶节点，修改</span><br><span class="line">    &#123;</span><br><span class="line">        A[a] &#x3D; b;</span><br><span class="line">        Sum[rt] &#x3D; b;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    int mid &#x3D; (l + r) &gt;&gt; 1;</span><br><span class="line">    &#x2F;&#x2F;根据条件判断往左子树调用还是往右</span><br><span class="line">    &#x2F;&#x2F; Pushdown(rt,mid-l+1,r-mid); 若既有点更新又有区间更新，需要这句话</span><br><span class="line">    if (a &lt;&#x3D; mid)</span><br><span class="line">        Update_tree_point(l, mid, rt &lt;&lt; 1, a, b);</span><br><span class="line">    else</span><br><span class="line">        Update_tree_point(mid + 1, r, rt &lt;&lt; 1 | 1, a, b);</span><br><span class="line">    Pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Update_tree_interval(int L, int R, int l, int r, int rt, int b) &#x2F;&#x2F;区间修改，假设A[L,R]&#x3D;b,L,R表示操作区间，l,r表示当前节点区间，rt表示当前节点编号,b为更新值</span><br><span class="line">&#123;</span><br><span class="line">    if (L &lt;&#x3D; l &amp;&amp; r &lt;&#x3D; R) &#x2F;&#x2F;如果本区间完全在操作区间[L,R]以内</span><br><span class="line">    &#123;</span><br><span class="line">        Sum[rt] +&#x3D; b * (r - l + 1);</span><br><span class="line">        lz[rt] +&#x3D; b; &#x2F;&#x2F;增加lz标记，表示本区间的Sum正确，子区间的Sum仍需要根据lz的值来调整</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    int mid &#x3D; (l + r) &gt;&gt; 1;</span><br><span class="line">    Pushdown(rt, mid - l + 1, r - mid); &#x2F;&#x2F;Pushdown(rt,l,r);&#x2F;&#x2F;下推标记</span><br><span class="line">    &#x2F;&#x2F;这里判断左右子树跟[L,R]有无交集，有交集才递归</span><br><span class="line">    if (L &lt;&#x3D; mid)</span><br><span class="line">        Update_tree_interval(L, R, l, mid, rt &lt;&lt; 1, b);</span><br><span class="line">    if (R &gt; mid)</span><br><span class="line">        Update_tree_interval(L, R, mid + 1, r, rt &lt;&lt; 1 | 1, b);</span><br><span class="line">    Pushup(rt); &#x2F;&#x2F;更新本节点信息</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll Query_tree(int L, int R, int l, int r, int rt) &#x2F;&#x2F;区间查询，L,R表示操作区间，l,r表示当前节点区间，rt表示当前节点编号</span><br><span class="line">&#123;</span><br><span class="line">    if (L &lt;&#x3D; l &amp;&amp; r &lt;&#x3D; R)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;在区间内，直接返回</span><br><span class="line">        return Sum[rt];</span><br><span class="line">    &#125;</span><br><span class="line">    int mid &#x3D; (l + r) &gt;&gt; 1;</span><br><span class="line">    &#x2F;&#x2F;下推标记，否则Sum可能不正确</span><br><span class="line">    Pushdown(rt, mid - l + 1, r - mid); &#x2F;&#x2F;Pushdown(rt,l,r);</span><br><span class="line">    ll sum &#x3D; 0; &#x2F;&#x2F;累计答案</span><br><span class="line">    if (L &lt;&#x3D; mid)</span><br><span class="line">        sum +&#x3D; Query_tree(L, R, l, mid, rt &lt;&lt; 1);</span><br><span class="line">    if (R &gt; mid)</span><br><span class="line">        sum +&#x3D; Query_tree(L, R, mid + 1, r, rt &lt;&lt; 1 | 1);</span><br><span class="line">    return sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题：HDU-1166"><a href="#例题：HDU-1166" class="headerlink" title="例题：HDU-1166"></a>例题：HDU-1166</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 50010;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">using namespace std;</span><br><span class="line">int A[maxx];        &#x2F;&#x2F;存原数组数据下标[1,n]</span><br><span class="line">int Sum[maxx &lt;&lt; 2]; &#x2F;&#x2F;Sum求和</span><br><span class="line">int lz[maxx &lt;&lt; 2];  &#x2F;&#x2F;lz为懒惰标记</span><br><span class="line">void Pushup(int rt) &#x2F;&#x2F;Pushup函数更新节点</span><br><span class="line">&#123;</span><br><span class="line">    Sum[rt] &#x3D; Sum[rt &lt;&lt; 1] + Sum[rt &lt;&lt; 1 | 1];</span><br><span class="line">&#125;</span><br><span class="line">void Build_tree(int l, int r, int rt) &#x2F;&#x2F;建树,l,r表示当前节点区间，rt表示当前节点编号</span><br><span class="line">&#123;</span><br><span class="line">    if (l &#x3D;&#x3D; r) &#x2F;&#x2F;若到达叶节点</span><br><span class="line">    &#123;</span><br><span class="line">        Sum[rt] &#x3D; A[l];&#x2F;&#x2F; &#x2F;&#x2F;cin&gt;&gt;Sum[rt];</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    int mid &#x3D; (l + r) &gt;&gt; 1;</span><br><span class="line">    Build_tree(l, mid, rt &lt;&lt; 1);</span><br><span class="line">    Build_tree(mid + 1, r, rt &lt;&lt; 1 | 1);</span><br><span class="line">    Pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line">void Update_tree_point(int l, int r, int rt, int a, int b) &#x2F;&#x2F;点修改，假设A[a]&#x3D;b,l,r表示当前节点区间，rt表示当前节点编号，a为更新点，b为更新值</span><br><span class="line">&#123;</span><br><span class="line">    if (l &#x3D;&#x3D; r) &#x2F;&#x2F;到叶节点，修改</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;A[a] &#x3D; b;</span><br><span class="line">        Sum[rt] +&#x3D; b;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    int mid &#x3D; (l + r) &gt;&gt; 1;</span><br><span class="line">    &#x2F;&#x2F;根据条件判断往左子树调用还是往右</span><br><span class="line">    if (a &lt;&#x3D; mid)</span><br><span class="line">        Update_tree_point(l, mid, rt &lt;&lt; 1, a, b);</span><br><span class="line">    else</span><br><span class="line">        Update_tree_point(mid + 1, r, rt &lt;&lt; 1 | 1, a, b);</span><br><span class="line">    Pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line">ll Query_tree(int L, int R, int l, int r, int rt) &#x2F;&#x2F;区间查询，L,R表示操作区间，l,r表示当前节点区间，rt表示当前节点编号</span><br><span class="line">&#123;</span><br><span class="line">    if (L &lt;&#x3D; l &amp;&amp; r &lt;&#x3D; R)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;在区间内，直接返回</span><br><span class="line">        return Sum[rt];</span><br><span class="line">    &#125;</span><br><span class="line">    int mid &#x3D; (l + r) &gt;&gt; 1;</span><br><span class="line">    ll sum &#x3D; 0; &#x2F;&#x2F;累计答案</span><br><span class="line">    if (L &lt;&#x3D; mid)</span><br><span class="line">        sum +&#x3D; Query_tree(L, R, l, mid, rt &lt;&lt; 1);</span><br><span class="line">    if (R &gt; mid)</span><br><span class="line">        sum +&#x3D; Query_tree(L, R, mid + 1, r, rt &lt;&lt; 1 | 1);</span><br><span class="line">    return sum;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int t;</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;t);</span><br><span class="line">    string s;</span><br><span class="line">    int cnt &#x3D; 0;</span><br><span class="line">    while (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        ++cnt;</span><br><span class="line">        printf(&quot;Case %d:\n&quot;, cnt);</span><br><span class="line">        int n;</span><br><span class="line">        scanf(&quot;%d&quot;, &amp;n);</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">            scanf(&quot;%d&quot;, &amp;A[i]);</span><br><span class="line">        Build_tree(1, n, 1);</span><br><span class="line">        int x, y;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        while (s !&#x3D; &quot;End&quot;)</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%d%d&quot;, &amp;x, &amp;y);</span><br><span class="line">            if (s &#x3D;&#x3D; &quot;Query&quot;)</span><br><span class="line">            &#123;</span><br><span class="line">                printf(&quot;%d\n&quot;, Query_tree(x, y, 1, n, 1));</span><br><span class="line">            &#125;</span><br><span class="line">            else if (s &#x3D;&#x3D; &quot;Add&quot;)</span><br><span class="line">            &#123;</span><br><span class="line">                Update_tree_point(1, n, 1, x, y);</span><br><span class="line">            &#125;</span><br><span class="line">            else if (s &#x3D;&#x3D; &quot;Sub&quot;)</span><br><span class="line">            &#123;</span><br><span class="line">                Update_tree_point(1, n, 1, x, -y);</span><br><span class="line">            &#125;</span><br><span class="line">            cin &gt;&gt; s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线段树应用：扫描线求矩形面积并"><a href="#线段树应用：扫描线求矩形面积并" class="headerlink" title="线段树应用：扫描线求矩形面积并"></a>线段树应用：扫描线求矩形面积并</h2><p>分析:</p><p>1.矩形比较多，坐标也很大，所以横坐标需要离散化（纵坐标不需要），熟悉离散化后这个步骤不难，所以这里不详细讲解了，不明白的还请百度。</p><p>2.重点：扫描线法：假想有一条扫描线，从左往右（从右往左），或者从下往上（从上往下）扫描过整个多边形（或者说畸形。。多个矩形叠加后的那个图形）。如果是竖直方向上扫描，则是离散化横坐标，如果是水平方向上扫描，则是离散化纵坐标。下面的分析都是<strong>离散化横坐标的，并且从下往上扫描的。</strong></p><p>扫描之前还需要做一个工作，就是保存好所有矩形的上下边，并且按照它们所处的高度进行排序，另外如果是上边我们给他一个值-1，下边给他一个值1，我们用一个结构体来保存所有的上下边。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct segment</span><br><span class="line">&#123;</span><br><span class="line">double l,r,h;   &#x2F;&#x2F;l，r表示这条上下边的左右坐标，h是这条边所处的高度</span><br><span class="line">int f;   &#x2F;&#x2F;所赋的值，1或-1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着扫描线从下往上扫描，每遇到一条上下边就停下来，将这条线段投影到总区间上 <strong>（总区间就是整个多边形横跨的长度）</strong> ，这个投影对应的其实是个插入和删除线段操作。 <strong>还记得给他们赋的值1或-1吗，下边是1，扫描到下边的话相当于往总区间插入一条线段，上边-1，扫描到上边相当于在总区间删除一条线段</strong> （如果说插入删除比较抽象，那么就直白说，扫描到下边，投影到总区间，对应的那一段的值都要增1，扫描到上边对应的那一段的值都要减1， <strong>如果总区间某一段的值为0，说明其实没有线段覆盖到它，为正数则有，那会不会为负数呢？是不可能的，</strong> 可以自己思考一下）。</p><p>每扫描到一条上下边后并投影到总区间后，就判断总区间现在被覆盖的总长度，然后用下一条边的高度减去当前这条边的高度，乘上总区间被覆盖的长度，就能得到一块面积，并依此做下去，就能得到最后的面积</p><p>（这个过程其实一点都不难，只是看文字较难体会，建议纸上画图，一画即可明白，下面献上一图希望有帮助）</p><p><img src="https://images0.cnblogs.com/blog/406771/201304/12153052-27995daa57e94349a42362435b3d975c.jpg" alt="tupian6"></p><h2 id="扫描线求矩形面积并的例题：POJ-1151"><a href="#扫描线求矩形面积并的例题：POJ-1151" class="headerlink" title="扫描线求矩形面积并的例题：POJ-1151"></a>扫描线求矩形面积并的例题：POJ-1151</h2><p>题目给了n个矩形，每个矩形给了左下角和右上角的坐标，矩形可能会重叠，求的是矩形最后的面积。因为变化范围比较大，我们要用到离散化，离散化就不说了，重点说一说扫描线的过程：</p><p>下面有个矩形</p><p><img src="https://img-blog.csdn.net/20130726113250031?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2szMDM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="tupian7"></p><p>现在假设我们有一根线，从下往上开始扫描 </p><p><img src="https://img-blog.csdn.net/20130726113310406?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2szMDM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="tupian8"></p><p><img src="https://img-blog.csdn.net/20130726113323484?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2szMDM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="tupian9"></p><p><img src="https://img-blog.csdn.net/20130726113335390?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2szMDM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="tupian10"></p><p><img src="https://img-blog.csdn.net/20130726113346718?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2szMDM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="tupian11"></p><p><img src="https://img-blog.csdn.net/20130726113358093?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2szMDM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="tupian12"></p><p><img src="https://img-blog.csdn.net/20130726113407109?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2szMDM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="tupian13"></p><p>如图所示，我们可以把整个矩形分成如图各个颜色不同的小矩形，那么这个小矩形的高就是我们扫过的距离，那么剩下了一个变量，那就是矩形的长一直在变化。</p><p>我们的线段树就是为了维护矩形的长，我们给每一个矩形的上下边进行标记，下面的边标记为1，上面的边标记为-1，每遇到一个矩形时，我们知道了标记为1的边，我们就加进来这一条矩形的长，等到扫描到-1时，证明这一条边需要删除，就删去，利用1和-1可以轻松的到这种状态。</p><p>还要注意这里的线段树指的并不是线段的一个端点，而指的是一个区间，所以我们要计算的时候r+1和r-1</p><p>再提一下离散化，离散化就是把一段很大的区间映射到一个小区间内，这样会节省大量空间，要进行离散化，我们先对端点进行排序，然后去重，然后二分找值就可以了<br>具体的请结合代码分析：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;cctype&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#define mem(a,b) memset(a,b,sizeof(a))</span><br><span class="line">#define inf 0x3f3f3f3f</span><br><span class="line">#define N 220</span><br><span class="line">#define ll long long</span><br><span class="line">using namespace std;</span><br><span class="line">#define lson l,m,rt&lt;&lt;1</span><br><span class="line">#define rson m+1,r,rt&lt;&lt;1|1</span><br><span class="line">struct Seg</span><br><span class="line">&#123;</span><br><span class="line">    double l,r,h;</span><br><span class="line">    int f;</span><br><span class="line">    Seg() &#123;&#125;</span><br><span class="line">    Seg(double a,double b,double c,int d):l(a),r(b),h(c),f(d) &#123;&#125;</span><br><span class="line">    bool operator &lt; (const Seg &amp;cmp) const</span><br><span class="line">    &#123;</span><br><span class="line">        return h&lt;cmp.h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; e[N];</span><br><span class="line">struct node</span><br><span class="line">&#123;</span><br><span class="line">    int cnt;</span><br><span class="line">    double len;</span><br><span class="line">&#125; t[N&lt;&lt;2];</span><br><span class="line">double X[N];</span><br><span class="line">void pushdown(int l,int r,int rt)</span><br><span class="line">&#123;</span><br><span class="line">    if(t[rt].cnt)&#x2F;&#x2F;当前的边被标记，就把当前的长度加上</span><br><span class="line">        t[rt].len&#x3D;X[r+1]-X[l];</span><br><span class="line">    else if(l&#x3D;&#x3D;r)&#x2F;&#x2F;当为一个点的时候长度为0</span><br><span class="line">        t[rt].len&#x3D;0;</span><br><span class="line">    else&#x2F;&#x2F;其他情况把左右两个区间的值加上</span><br><span class="line">        t[rt].len&#x3D;t[rt&lt;&lt;1].len+t[rt&lt;&lt;1|1].len;</span><br><span class="line">&#125;</span><br><span class="line">void update(int L,int R,int l,int r,int rt,int val)</span><br><span class="line">&#123;</span><br><span class="line">    if(L&lt;&#x3D;l&amp;&amp;r&lt;&#x3D;R)</span><br><span class="line">    &#123;</span><br><span class="line">        t[rt].cnt+&#x3D;val;&#x2F;&#x2F;加上标记的值</span><br><span class="line">        pushdown(l,r,rt);&#x2F;&#x2F;像下更新节点</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    int m&#x3D;(l+r)&gt;&gt;1;</span><br><span class="line">    if(L&lt;&#x3D;m) update(L,R,lson,val);</span><br><span class="line">    if(R&gt;m) update(L,R,rson,val);</span><br><span class="line">    pushdown(l,r,rt);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n,q&#x3D;1;</span><br><span class="line">    double a,b,c,d;</span><br><span class="line">    while(~scanf(&quot;%d&quot;,&amp;n)&amp;&amp;n)</span><br><span class="line">    &#123;</span><br><span class="line">        mem(t,0);</span><br><span class="line">        int num&#x3D;0;</span><br><span class="line">        for(int i&#x3D;0; i&lt;n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%lf%lf%lf%lf&quot;,&amp;a,&amp;b,&amp;c,&amp;d);</span><br><span class="line">            X[num]&#x3D;a;</span><br><span class="line">            e[num++]&#x3D;Seg(a,c,b,1);&#x2F;&#x2F;矩形下面用1来标记吗</span><br><span class="line">            X[num]&#x3D;c;</span><br><span class="line">            e[num++]&#x3D;Seg(a,c,d,-1);&#x2F;&#x2F;上面用-1来标记</span><br><span class="line">        &#125;</span><br><span class="line">        sort(X,X+num);&#x2F;&#x2F;用于离散化</span><br><span class="line">        sort(e,e+num);&#x2F;&#x2F;把矩形的边的纵坐标从小到大排序</span><br><span class="line">        int m&#x3D;unique(X,X+num)-X;</span><br><span class="line">        double ans&#x3D;0;</span><br><span class="line">        for(int i&#x3D;0; i&lt;num; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            int l&#x3D;lower_bound(X,X+m,e[i].l)-X;&#x2F;&#x2F;找出离散化以后的值</span><br><span class="line">            int r&#x3D;lower_bound(X,X+m,e[i].r)-X-1;</span><br><span class="line">            update(l,r,0,m,1,e[i].f);</span><br><span class="line">            ans+&#x3D;t[1].len*(e[i+1].h-e[i].h);</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;Test case #%d\nTotal explored area: %.2lf\n\n&quot;,q++,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;因为之前4月份打了将近一个月的个人赛，有些以前学习过的算法已经忘了，所以重新再温习一遍。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法重温" scheme="https://stephencurry6666.github.io/categories/%E7%AE%97%E6%B3%95%E9%87%8D%E6%B8%A9/"/>
    
    
      <category term="线段树再温" scheme="https://stephencurry6666.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%86%8D%E6%B8%A9/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE-Day(4)学习笔记</title>
    <link href="https://stephencurry6666.github.io/2020/05/14/JavaSE-Day(4)%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://stephencurry6666.github.io/2020/05/14/JavaSE-Day(4)%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-05-14T07:14:00.877Z</published>
    <updated>2020-05-14T12:44:11.422Z</updated>
    
    <content type="html"><![CDATA[<h3 id="选择结构switch语句的格式及其解释"><a href="#选择结构switch语句的格式及其解释" class="headerlink" title="选择结构switch语句的格式及其解释"></a>选择结构switch语句的格式及其解释</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1:switch语句(掌握)</span><br><span class="line">(1)格式：</span><br><span class="line">switch(表达式) &#123;</span><br><span class="line">case 值1:</span><br><span class="line">语句体1;</span><br><span class="line">break;</span><br><span class="line">case 值2:</span><br><span class="line">语句体2;</span><br><span class="line">break;</span><br><span class="line">...</span><br><span class="line">default:</span><br><span class="line">语句体n+1;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">格式解释说明：</span><br><span class="line">switch:说明这是switch语句。</span><br><span class="line">表达式:可以是byte,short,int,char</span><br><span class="line">JDK5以后可以是枚举</span><br><span class="line">JDK7以后可以是字符串</span><br><span class="line">case:后面的值就是要和表达式进行比较的值</span><br><span class="line">break:表示程序到这里中断，跳出switch语句</span><br><span class="line">default:如果所有的情况都不匹配,就执行这里,相当于if语句中的else</span><br><span class="line">(2)面试题</span><br><span class="line">switch语句的表达式可以是byte吗?可以是long吗?可以是String吗?</span><br><span class="line">可以,不可以,JDK7以后可以</span><br></pre></td></tr></table></figure><h3 id="选择结构switch语句的基本实用"><a href="#选择结构switch语句的基本实用" class="headerlink" title="选择结构switch语句的基本实用"></a>选择结构switch语句的基本实用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package stephencurry;</span><br><span class="line">import java.util.*;</span><br><span class="line">import java.math.*;</span><br><span class="line">import java.io.*;</span><br><span class="line">public class Main &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">        Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line">        System.out.println(&quot;请输入一个整数：&quot;);</span><br><span class="line">        int week &#x3D; sc.nextInt();</span><br><span class="line">        switch(week)</span><br><span class="line">        &#123;</span><br><span class="line">        case 1:</span><br><span class="line">        System.out.println(&quot;星期一&quot;);</span><br><span class="line">        break;</span><br><span class="line">        case 2:</span><br><span class="line">System.out.println(&quot;星期二&quot;);</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">System.out.println(&quot;星期三&quot;);</span><br><span class="line">break;</span><br><span class="line">case 4:</span><br><span class="line">System.out.println(&quot;星期四&quot;);</span><br><span class="line">break;</span><br><span class="line">case 5:</span><br><span class="line">System.out.println(&quot;星期五&quot;);</span><br><span class="line">break;</span><br><span class="line">case 6:</span><br><span class="line">System.out.println(&quot;星期六&quot;);</span><br><span class="line">break;</span><br><span class="line">case 7:</span><br><span class="line">System.out.println(&quot;星期日&quot;);</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">System.out.println(&quot;你输入的数据有误&quot;);</span><br><span class="line">break;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择结构switch语句的注意事项"><a href="#选择结构switch语句的注意事项" class="headerlink" title="选择结构switch语句的注意事项"></a>选择结构switch语句的注意事项</h3><p><strong>注意事项：</strong><br>A:case后面只能是常量，不能是变量，而且，多个case后面的值不能出现相同的<br>B:default可以省略吗?<br>可以省略，但是不建议，因为它的作用是对不正确的情况给出提示。<br>特殊情况：<br>case就可以把值固定。<br>A,B,C,D<br>C:break可以省略吗?<br>可以省略，但是结果可能不是我们想要的。<br>会出现一个现象：case穿透。<br>最终我们建议不要省略<br>D:default一定要在最后吗?<br>不是，可以在任意位置。但是建议在最后。<br>E:switch语句的结束条件<br>a:遇到break就结束了<br>b:执行到末尾就结束了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">class SwitchDemo2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;创建键盘录入对象</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;控制键盘录入数据</span><br><span class="line">System.out.println(&quot;请输入一个数据(1-7):&quot;);</span><br><span class="line">int week &#x3D; sc.nextInt(); &#x2F;&#x2F;3</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义常量</span><br><span class="line">&#x2F;&#x2F;int number &#x3D; 3;</span><br><span class="line">&#x2F;&#x2F;然后把case后面的值改为number，就会报错</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;switch判断语句</span><br><span class="line">switch(week) &#123;</span><br><span class="line">case 1:</span><br><span class="line">System.out.println(&quot;星期一&quot;);</span><br><span class="line">break;</span><br><span class="line">case 2:</span><br><span class="line">System.out.println(&quot;星期二&quot;);</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">System.out.println(&quot;星期三&quot;);</span><br><span class="line">break;</span><br><span class="line">case 4:</span><br><span class="line">System.out.println(&quot;星期四&quot;);</span><br><span class="line">break;</span><br><span class="line">case 5:</span><br><span class="line">System.out.println(&quot;星期五&quot;);</span><br><span class="line">break;</span><br><span class="line">case 6:</span><br><span class="line">System.out.println(&quot;星期六&quot;);</span><br><span class="line">break;</span><br><span class="line">case 7:</span><br><span class="line">System.out.println(&quot;星期日&quot;);</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">System.out.println(&quot;你输入的数据有误&quot;);</span><br><span class="line">&#x2F;&#x2F;break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择结构switch语句练习1看程序写结果"><a href="#选择结构switch语句练习1看程序写结果" class="headerlink" title="选择结构switch语句练习1看程序写结果"></a>选择结构switch语句练习1看程序写结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">看程序写结果</span><br><span class="line">*&#x2F;</span><br><span class="line">class SwitchTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int x &#x3D; 2;</span><br><span class="line">int y &#x3D; 3;</span><br><span class="line">switch(x)&#123;</span><br><span class="line">default:</span><br><span class="line">y++;</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">y++;</span><br><span class="line">case 4:</span><br><span class="line">y++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;y&#x3D;&quot;+y);</span><br><span class="line">System.out.println(&quot;---------------&quot;);</span><br><span class="line"></span><br><span class="line">int a &#x3D; 2;</span><br><span class="line">int b &#x3D; 3;</span><br><span class="line">switch(a)&#123;</span><br><span class="line">default:</span><br><span class="line">b++;</span><br><span class="line">case 3:</span><br><span class="line">b++;</span><br><span class="line">case 4:</span><br><span class="line">b++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;b&#x3D;&quot;+b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">结果是：y&#x3D;4；b&#x3D;6</span><br></pre></td></tr></table></figure><h3 id="选择结构switch语句练习2单项选择题"><a href="#选择结构switch语句练习2单项选择题" class="headerlink" title="选择结构switch语句练习2单项选择题"></a>选择结构switch语句练习2单项选择题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">模拟单项选择题。</span><br><span class="line"></span><br><span class="line">分析：</span><br><span class="line">A:出一个选择题，然后供你选择。</span><br><span class="line">B:键盘录入选择的数据。</span><br><span class="line">C:根据选择来给出你选择的结论。</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">class SwitchTest2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;出一个选择题，然后供你选择。</span><br><span class="line">&#x2F;&#x2F;由于我们现在没有办法键盘录入得到一个&#39;A&#39;,&#39;B&#39;</span><br><span class="line">&#x2F;&#x2F;这样的东西，我就用65，66这样的值替代</span><br><span class="line">&#x2F;&#x2F;将来我们获取到这样的值以后，强制转换为字符类型</span><br><span class="line">System.out.println(&quot;下面的几个人你最爱谁?&quot;);</span><br><span class="line">System.out.println(&quot;65 林青霞&quot;);</span><br><span class="line">System.out.println(&quot;66 张曼玉&quot;);</span><br><span class="line">System.out.println(&quot;67 刘德华&quot;);</span><br><span class="line">System.out.println(&quot;68 王力宏&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;键盘录入选择的数据。</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入你的选择：&quot;);</span><br><span class="line">int choiceNumber &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;强制转换为字符类型</span><br><span class="line">char choice &#x3D; (char) choiceNumber;</span><br><span class="line"></span><br><span class="line">switch(choice) &#123;</span><br><span class="line">case &#39;A&#39;:</span><br><span class="line">System.out.println(&quot;恭喜你,选择正确&quot;);</span><br><span class="line">break;</span><br><span class="line">case &#39;B&#39;:</span><br><span class="line">System.out.println(&quot;不好意思，你选择有误&quot;);</span><br><span class="line">break;</span><br><span class="line">case &#39;C&#39;:</span><br><span class="line">System.out.println(&quot;不好意思，你选择有误&quot;);</span><br><span class="line">break;</span><br><span class="line">case &#39;D&#39;:</span><br><span class="line">System.out.println(&quot;不好意思，你选择有误&quot;);</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">System.out.println(&quot;没有该选项&quot;);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择结构switch语句练习3表达式求字符串"><a href="#选择结构switch语句练习3表达式求字符串" class="headerlink" title="选择结构switch语句练习3表达式求字符串"></a>选择结构switch语句练习3表达式求字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">根据你键盘录入的字符串，判断是否有满足要求的，如果有就输出。</span><br><span class="line">否则，提示有误。</span><br><span class="line"></span><br><span class="line">String s &#x3D; sc.nextLine();</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">class SwitchTest3 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;创建键盘录入对象</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;录入数据</span><br><span class="line">System.out.println(&quot;请输入你要判断的字符串：&quot;);</span><br><span class="line">String s &#x3D; sc.nextLine();</span><br><span class="line"></span><br><span class="line">switch(s) &#123;</span><br><span class="line">case &quot;hello&quot;:</span><br><span class="line">System.out.println(&quot;你输入的是hello&quot;);</span><br><span class="line">break;</span><br><span class="line">case &quot;world&quot;:</span><br><span class="line">System.out.println(&quot;你输入的是world&quot;);</span><br><span class="line">break;</span><br><span class="line">case &quot;java&quot;:</span><br><span class="line">System.out.println(&quot;你输入的是java&quot;);</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">System.out.println(&quot;没有找到你输入的数据&quot;);</span><br><span class="line">&#x2F;&#x2F;break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择结构switch和if语句的各自使用场景"><a href="#选择结构switch和if语句的各自使用场景" class="headerlink" title="选择结构switch和if语句的各自使用场景"></a>选择结构switch和if语句的各自使用场景</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">用switch语句实现键盘录入月份，输出对应的季节</span><br><span class="line"></span><br><span class="line">分析：</span><br><span class="line">A:键盘录入一个月份，用Scanner实现</span><br><span class="line">B:用switch语句实现即可</span><br><span class="line"></span><br><span class="line">if语句和switch语句的区别?</span><br><span class="line">if语句：</span><br><span class="line">A:针对结果是boolean类型的判断</span><br><span class="line">B:针对一个范围的判断</span><br><span class="line">C:针对几个常量值的判断</span><br><span class="line"></span><br><span class="line">switch语句：</span><br><span class="line">针对几个常量值的判断</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">class SwitchTest4 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;创建键盘录入对象</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;录入数据</span><br><span class="line">System.out.println(&quot;请输入月份(1-12)：&quot;);</span><br><span class="line">int month &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">switch(month) &#123;</span><br><span class="line">case 1:</span><br><span class="line">System.out.println(&quot;冬季&quot;);</span><br><span class="line">break;</span><br><span class="line">case 2:</span><br><span class="line">System.out.println(&quot;冬季&quot;);</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">System.out.println(&quot;春季&quot;);</span><br><span class="line">break;</span><br><span class="line">case 4:</span><br><span class="line">System.out.println(&quot;春季&quot;);</span><br><span class="line">break;</span><br><span class="line">case 5:</span><br><span class="line">System.out.println(&quot;春季&quot;);</span><br><span class="line">break;</span><br><span class="line">case 6:</span><br><span class="line">System.out.println(&quot;夏季&quot;);</span><br><span class="line">break;</span><br><span class="line">case 7:</span><br><span class="line">System.out.println(&quot;夏季&quot;);</span><br><span class="line">break;</span><br><span class="line">case 8:</span><br><span class="line">System.out.println(&quot;夏季&quot;);</span><br><span class="line">break;</span><br><span class="line">case 9:</span><br><span class="line">System.out.println(&quot;秋季&quot;);</span><br><span class="line">break;</span><br><span class="line">case 10:</span><br><span class="line">System.out.println(&quot;秋季&quot;);</span><br><span class="line">break;</span><br><span class="line">case 11:</span><br><span class="line">System.out.println(&quot;秋季&quot;);</span><br><span class="line">break;</span><br><span class="line">case 12:</span><br><span class="line">System.out.println(&quot;冬季&quot;);</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">System.out.println(&quot;你输入的月份有误&quot;);</span><br><span class="line">&#125;</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;这样写太麻烦了，我们使用一个我们不想使用的东西：case穿透</span><br><span class="line">switch(month) &#123;</span><br><span class="line">case 1:</span><br><span class="line">case 2:</span><br><span class="line">case 12:</span><br><span class="line">System.out.println(&quot;冬季&quot;);</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">case 4:</span><br><span class="line">case 5:</span><br><span class="line">System.out.println(&quot;春季&quot;);</span><br><span class="line">break;</span><br><span class="line">case 6:</span><br><span class="line">case 7:</span><br><span class="line">case 8:</span><br><span class="line">System.out.println(&quot;夏季&quot;);</span><br><span class="line">break;</span><br><span class="line">case 9:</span><br><span class="line">case 10:</span><br><span class="line">case 11:</span><br><span class="line">System.out.println(&quot;秋季&quot;);</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">System.out.println(&quot;你输入的月份有误&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构循环语句概述"><a href="#循环结构循环语句概述" class="headerlink" title="循环结构循环语句概述"></a>循环结构循环语句概述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">需求：请在控制台输出10次&quot;HelloWorld&quot;</span><br><span class="line">*&#x2F;</span><br><span class="line">class Demo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构for语句的格式和基本使用"><a href="#循环结构for语句的格式和基本使用" class="headerlink" title="循环结构for语句的格式和基本使用"></a>循环结构for语句的格式和基本使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">循环语句：for循环,while循环,do...while循环。</span><br><span class="line"></span><br><span class="line">for循环格式：</span><br><span class="line">for(初始化语句;判断条件语句;控制条件语句) &#123;</span><br><span class="line">循环体语句;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行流程：</span><br><span class="line">A:执行初始化语句</span><br><span class="line">B:执行判断条件语句,看其返回值是true还是false</span><br><span class="line">如果是true，就继续执行</span><br><span class="line">如果是false，就结束循环</span><br><span class="line">C:执行循环体语句;</span><br><span class="line">D:执行控制条件语句</span><br><span class="line">E:回到B继续。</span><br><span class="line"></span><br><span class="line">需求：请在控制台输出10次&quot;HelloWorld&quot;</span><br><span class="line">*&#x2F;</span><br><span class="line">class ForDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;最原始的做法</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">System.out.println(&quot;----------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;这种做法不好,代码的重复度太高。</span><br><span class="line">&#x2F;&#x2F;所以呢，我们用循环改进</span><br><span class="line">for(int x&#x3D;1;x&lt;&#x3D;10;x++) &#123;</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构for语句的注意事项"><a href="#循环结构for语句的注意事项" class="headerlink" title="循环结构for语句的注意事项"></a>循环结构for语句的注意事项</h3><p><strong>注意事项：</strong><br>A:判断条件语句无论简单还是复杂结果是boolean类型。</p><p>B:循环体语句如果是一条语句，大括号可以省略；如果是多条语句，大括号不能省略。建议永远不要省略。</p><p>C:一般来说：有左大括号就没有分号，有分号就没有左大括号</p><h3 id="循环结构for语句练习1获取数据"><a href="#循环结构for语句练习1获取数据" class="headerlink" title="循环结构for语句练习1获取数据"></a>循环结构for语句练习1获取数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">需求：请在控制台输出数据1-10</span><br><span class="line">*&#x2F;</span><br><span class="line">class ForDemo2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;原始做法</span><br><span class="line">System.out.println(1);</span><br><span class="line">System.out.println(2);</span><br><span class="line">System.out.println(3);</span><br><span class="line">System.out.println(4);</span><br><span class="line">System.out.println(5);</span><br><span class="line">System.out.println(6);</span><br><span class="line">System.out.println(7);</span><br><span class="line">System.out.println(8);</span><br><span class="line">System.out.println(9);</span><br><span class="line">System.out.println(10);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;-------------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;如何改进呢?用循环改进</span><br><span class="line">for(int x&#x3D;1; x&lt;&#x3D;10; x++) &#123;</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;-------------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;从0开始</span><br><span class="line">for(int x&#x3D;0; x&lt;10; x++) &#123;</span><br><span class="line">System.out.println(x+1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构for语句练习2求和思想"><a href="#循环结构for语句练习2求和思想" class="headerlink" title="循环结构for语句练习2求和思想"></a>循环结构for语句练习2求和思想</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">需求：求出1-10之间数据之和</span><br><span class="line"></span><br><span class="line">分析：</span><br><span class="line">0+1&#x3D;1</span><br><span class="line">1+2&#x3D;3</span><br><span class="line">3+3&#x3D;6</span><br><span class="line">6+4&#x3D;10</span><br><span class="line">10+5&#x3D;15</span><br><span class="line"> ...</span><br><span class="line"> </span><br><span class="line">由此可见我们要定义两个变量：</span><br><span class="line">一个变量用于存储第一个加数，第一个加数其实保存的是以前的所有数据和。默认初始化值应该是0。</span><br><span class="line">一个变量用于存储第二个加数，第二个加数其实就是每次的数据变化的值。</span><br><span class="line"></span><br><span class="line">求和思想。</span><br><span class="line">*&#x2F;</span><br><span class="line">class ForDemo3 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;原始做法</span><br><span class="line">System.out.println(1+2+3+4+5+6+7+8+9+10);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义第一个加数</span><br><span class="line">int sum &#x3D; 0;</span><br><span class="line"></span><br><span class="line">for(int x&#x3D;1; x&lt;&#x3D;10; x++) &#123;</span><br><span class="line">&#x2F;&#x2F;这里的x其实是第二个加数</span><br><span class="line">sum &#x3D; sum + x;</span><br><span class="line">&#x2F;*</span><br><span class="line">0 + 1 &#x3D; 1</span><br><span class="line">1 + 2 &#x3D; 3</span><br><span class="line">3 + 3 &#x3D; 6</span><br><span class="line">...</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;sum +&#x3D; x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;sum:&quot;+sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构for语句练习3偶数和"><a href="#循环结构for语句练习3偶数和" class="headerlink" title="循环结构for语句练习3偶数和"></a>循环结构for语句练习3偶数和</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">需求：</span><br><span class="line">A:求1-100之和。</span><br><span class="line">B:求出1-100之间偶数和</span><br><span class="line">C:求出1-100之间奇数和(自己做)</span><br><span class="line">*&#x2F;</span><br><span class="line">class ForDemo4 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;求1-100之和。</span><br><span class="line">int sum1 &#x3D; 0;</span><br><span class="line"></span><br><span class="line">for(int x&#x3D;1; x&lt;&#x3D;100; x++) &#123;</span><br><span class="line">sum1 +&#x3D;x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;1-100之和是：&quot;+sum1);</span><br><span class="line">System.out.println(&quot;------------------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;求出1-100之间偶数和</span><br><span class="line">&#x2F;&#x2F;方式1</span><br><span class="line">int sum2 &#x3D; 0;</span><br><span class="line"></span><br><span class="line">for(int x&#x3D;1; x&lt;&#x3D;100; x++) &#123;</span><br><span class="line">if(x%2 &#x3D;&#x3D; 0) &#123;</span><br><span class="line">sum2 +&#x3D; x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;1-100偶数之和是：&quot;+sum2);</span><br><span class="line">System.out.println(&quot;------------------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;方式2</span><br><span class="line">int sum3 &#x3D; 0;</span><br><span class="line"></span><br><span class="line">for(int x&#x3D;0; x&lt;&#x3D;100; x+&#x3D;2) &#123;</span><br><span class="line">sum3 +&#x3D; x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;1-100偶数之和是：&quot;+sum3);</span><br><span class="line">System.out.println(&quot;------------------&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构for语句练习4阶乘"><a href="#循环结构for语句练习4阶乘" class="headerlink" title="循环结构for语句练习4阶乘"></a>循环结构for语句练习4阶乘</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">需求：求5的阶乘。</span><br><span class="line"></span><br><span class="line">什么是阶乘呢?</span><br><span class="line">n! &#x3D; n*(n-1)! 规则</span><br><span class="line">n! &#x3D; n*(n-1)*(n-2)*...*3*2*1</span><br><span class="line"></span><br><span class="line">求和思想。</span><br><span class="line">求阶乘思想。</span><br><span class="line">*&#x2F;</span><br><span class="line">class ForDemo5 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;定义最终结果变量</span><br><span class="line">int jc &#x3D; 1;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;这里的x其实可以直接从2开始</span><br><span class="line">&#x2F;&#x2F;for(int x&#x3D;1; x&lt;&#x3D;5; x++) </span><br><span class="line"></span><br><span class="line">for(int x&#x3D;2; x&lt;&#x3D;5; x++) &#123;</span><br><span class="line">jc *&#x3D;x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;1-5的阶乘是：&quot;+jc);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构for语句练习5水仙花数"><a href="#循环结构for语句练习5水仙花数" class="headerlink" title="循环结构for语句练习5水仙花数"></a>循环结构for语句练习5水仙花数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">天将降大任于斯人也,必先盗其QQ,封其微博,收其wifi,夺其手机。让其静心学习Java欧耶。</span><br><span class="line"></span><br><span class="line">需求：在控制台输出所有的”水仙花数”</span><br><span class="line"></span><br><span class="line">分析：</span><br><span class="line">我们都不知道什么叫&quot;水仙花数&quot;，你让我怎么做呢?</span><br><span class="line"></span><br><span class="line">所谓的水仙花数是指一个三位数，其各位数字的立方和等于该数本身。</span><br><span class="line">举例：153就是一个水仙花数。</span><br><span class="line">153 &#x3D; 1*1*1 + 5*5*5 + 3*3*3 &#x3D; 1 + 125 + 27 &#x3D; 153</span><br><span class="line"></span><br><span class="line">A:三位数其实是告诉了我们范围。</span><br><span class="line">B:通过for循环我们就可以实现获取每一个三位数</span><br><span class="line">  但是麻烦是如何获取这个三位数的个,十,百位上的数据</span><br><span class="line">  </span><br><span class="line">  我们如何获取一个数据的个,十,百呢?</span><br><span class="line">假设有个一个数据:153</span><br><span class="line">ge:153%10 &#x3D; 3</span><br><span class="line">shi: 153&#x2F;10%10 &#x3D; 5</span><br><span class="line">bai：153&#x2F;10&#x2F;10%10 &#x3D; 1</span><br><span class="line">qian：x&#x2F;10&#x2F;10&#x2F;10%10</span><br><span class="line">wan:  x&#x2F;10&#x2F;10&#x2F;10&#x2F;10%10</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">C:让ge*ge*ge+shi*shi*shi+bai*bai*bai和该数据比较</span><br><span class="line">  如果相同，就把该数据在控制台输出。</span><br><span class="line">*&#x2F;</span><br><span class="line">class ForDemo6 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;三位数其实是告诉了我们范围。</span><br><span class="line">for(int x&#x3D;100; x&lt;1000; x++) &#123;</span><br><span class="line">int ge &#x3D; x%10;</span><br><span class="line">int shi &#x3D; x&#x2F;10%10;</span><br><span class="line">int bai &#x3D; x&#x2F;10&#x2F;10%10;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;让ge*ge*ge+shi*shi*shi+bai*bai*bai和该数据比较</span><br><span class="line">if(x &#x3D;&#x3D; (ge*ge*ge+shi*shi*shi+bai*bai*bai)) &#123;</span><br><span class="line">&#x2F;&#x2F;如果相同，就把该数据在控制台输出。</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构for语句练习6改进版的回文数"><a href="#循环结构for语句练习6改进版的回文数" class="headerlink" title="循环结构for语句练习6改进版的回文数"></a>循环结构for语句练习6改进版的回文数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">练习：</span><br><span class="line">请在控制台输出满足如下条件的五位数</span><br><span class="line">个位等于万位</span><br><span class="line">十位等于千位</span><br><span class="line">个位+十位+千位+万位&#x3D;百位</span><br><span class="line"></span><br><span class="line">分析：</span><br><span class="line">A:五位数就告诉了我们范围。</span><br><span class="line">B:分解每一个五位数的个，十，百，千，万位上的数据</span><br><span class="line">C:按照要求进行判断即可</span><br><span class="line">*&#x2F;</span><br><span class="line">class ForDemo7 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;五位数就告诉了我们范围。</span><br><span class="line">for(int x&#x3D;10000; x&lt;100000; x++) &#123;</span><br><span class="line">&#x2F;&#x2F;分解每一个五位数的个，十，百，千，万位上的数据</span><br><span class="line">int ge &#x3D; x%10;</span><br><span class="line">int shi &#x3D; x&#x2F;10%10;</span><br><span class="line">int bai  &#x3D; x&#x2F;10&#x2F;10%10;</span><br><span class="line">int qian &#x3D; x&#x2F;10&#x2F;10&#x2F;10%10;</span><br><span class="line">int wan &#x3D; x&#x2F;10&#x2F;10&#x2F;10&#x2F;10%10;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;按照要求进行判断即可</span><br><span class="line">if((ge&#x3D;&#x3D;wan) &amp;&amp; (shi&#x3D;&#x3D;qian) &amp;&amp; (ge+shi+qian+wan&#x3D;&#x3D;bai)) &#123;</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构for语句练习7统计思想"><a href="#循环结构for语句练习7统计思想" class="headerlink" title="循环结构for语句练习7统计思想"></a>循环结构for语句练习7统计思想</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">需求：统计”水仙花数”共有多少个</span><br><span class="line"></span><br><span class="line">分析：</span><br><span class="line">A:首先必须知道什么是水仙花数</span><br><span class="line">所谓的水仙花数是指一个三位数，其各位数字的立方和等于该数本身。</span><br><span class="line">举例：153就是一个水仙花数。</span><br><span class="line">153 &#x3D; 1*1*1 + 5*5*5 + 3*3*3 &#x3D; 1 + 125 + 27 &#x3D; 153</span><br><span class="line">B:定义统计变量，初始化值是0</span><br><span class="line">C:三位数告诉了我们范围，用for循环就可以搞定</span><br><span class="line">D:获取每一个三位数的个，十，百的数据</span><br><span class="line">E:按照要求进行判断</span><br><span class="line">F:如果满足要求就计数。</span><br><span class="line">*&#x2F;</span><br><span class="line">class ForDemo8 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;定义统计变量，初始化值是0</span><br><span class="line">int count &#x3D; 0;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;三位数告诉了我们范围，用for循环就可以搞定</span><br><span class="line">for(int x&#x3D;100; x&lt;1000; x++) &#123;</span><br><span class="line">&#x2F;&#x2F;获取每一个三位数的个，十，百的数据</span><br><span class="line">int ge &#x3D; x%10;</span><br><span class="line">int shi &#x3D; x&#x2F;10%10;</span><br><span class="line">int bai &#x3D; x&#x2F;10&#x2F;10%10;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;按照要求进行判断</span><br><span class="line">if(x &#x3D;&#x3D; (ge*ge*ge+shi*shi*shi+bai*bai*bai)) &#123;</span><br><span class="line">&#x2F;&#x2F;如果满足要求就计数。</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;水仙花数共有&quot;+count+&quot;个&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构for语句练习8同时取余问题"><a href="#循环结构for语句练习8同时取余问题" class="headerlink" title="循环结构for语句练习8同时取余问题"></a>循环结构for语句练习8同时取余问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">需求：请统计1-1000之间同时满足如下条件的数据有多少个：</span><br><span class="line">对3整除余2</span><br><span class="line">对5整除余3</span><br><span class="line">对7整除余2</span><br><span class="line"></span><br><span class="line">分析：</span><br><span class="line">A:定义统计变量,初始化值是0</span><br><span class="line">B:1-1000之间是一个范围，用for很容易就可以实现。</span><br><span class="line">C:每个数据要同时满足如下要求</span><br><span class="line">x%3&#x3D;&#x3D;2</span><br><span class="line">x%5&#x3D;&#x3D;3</span><br><span class="line">x%7&#x3D;&#x3D;2</span><br><span class="line">D:如果满足条件，统计数据++即可，最后输出统计变量</span><br><span class="line">*&#x2F;</span><br><span class="line">class ForDemo9 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;定义统计变量,初始化值是0</span><br><span class="line">int count &#x3D; 0;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;1-1000之间是一个范围，用for很容易就可以实现。</span><br><span class="line">for(int x&#x3D;1; x&lt;&#x3D;1000; x++) &#123;</span><br><span class="line">&#x2F;*</span><br><span class="line">每个数据要同时满足如下要求</span><br><span class="line">x%3&#x3D;&#x3D;2</span><br><span class="line">x%5&#x3D;&#x3D;3</span><br><span class="line">x%7&#x3D;&#x3D;2</span><br><span class="line">*&#x2F;</span><br><span class="line">if(x%3&#x3D;&#x3D;2 &amp;&amp; x%5&#x3D;&#x3D;3 &amp;&amp; x%7&#x3D;&#x3D;2) &#123;</span><br><span class="line">count++;</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;输出数据</span><br><span class="line">System.out.println(&quot;满足这样条件的数据共有：&quot;+count+&quot;个&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构while语句的基本格式和使用"><a href="#循环结构while语句的基本格式和使用" class="headerlink" title="循环结构while语句的基本格式和使用"></a>循环结构while语句的基本格式和使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">while循环的基本格式：</span><br><span class="line">while(判断条件语句) &#123;</span><br><span class="line">循环体语句;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">扩展格式：</span><br><span class="line"></span><br><span class="line">初始化语句;</span><br><span class="line">    while(判断条件语句) &#123;</span><br><span class="line"> 循环体语句;</span><br><span class="line"> 控制条件语句;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">通过这个格式，我们就可以看到其实和for循环是差不多的。</span><br><span class="line"></span><br><span class="line">for(初始化语句;判断条件语句;控制条件语句) &#123;</span><br><span class="line">循环体语句;</span><br><span class="line">&#125;</span><br><span class="line">*&#x2F;</span><br><span class="line">class WhileDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;输出10次&quot;HelloWorld&quot;</span><br><span class="line">&#x2F;&#x2F;for语句版</span><br><span class="line">for(int x&#x3D;0; x&lt;10; x++) &#123;</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;--------------&quot;);</span><br><span class="line">&#x2F;&#x2F;while语句版</span><br><span class="line">int x&#x3D;0;</span><br><span class="line">while(x&lt;10) &#123;</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">x++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构while语句的练习1求和思想"><a href="#循环结构while语句的练习1求和思想" class="headerlink" title="循环结构while语句的练习1求和思想"></a>循环结构while语句的练习1求和思想</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">练习：用while循环实现</span><br><span class="line">左边：求出1-100之和</span><br><span class="line">右边：统计水仙花数有多少个</span><br><span class="line"></span><br><span class="line">初始化语句;</span><br><span class="line">while(判断条件语句) &#123;</span><br><span class="line"> 循环体语句;</span><br><span class="line"> 控制条件语句;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for(初始化语句;判断条件语句;控制条件语句) &#123;</span><br><span class="line">循环体语句;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line">class WhileDemo2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;求出1-100之和</span><br><span class="line">&#x2F;&#x2F;for语句版本</span><br><span class="line">int sum &#x3D; 0;</span><br><span class="line"></span><br><span class="line">for(int x&#x3D;1; x&lt;&#x3D;100; x++) &#123;</span><br><span class="line">sum+&#x3D;x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;sum:&quot;+sum);</span><br><span class="line">System.out.println(&quot;--------&quot;);</span><br><span class="line">&#x2F;&#x2F;while语句版本</span><br><span class="line">int sum2 &#x3D; 0;</span><br><span class="line"></span><br><span class="line">int y&#x3D;1;</span><br><span class="line">while(y&lt;&#x3D;100) &#123;</span><br><span class="line">sum2+&#x3D;y;</span><br><span class="line">y++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;sum2:&quot;+sum2);</span><br><span class="line">System.out.println(&quot;--------&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构while语句的练习2统计思想"><a href="#循环结构while语句的练习2统计思想" class="headerlink" title="循环结构while语句的练习2统计思想"></a>循环结构while语句的练习2统计思想</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">需求：统计水仙花数有多少个</span><br><span class="line">*&#x2F;</span><br><span class="line">class WhileDemo3 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;for循环版本</span><br><span class="line">int count &#x3D; 0;</span><br><span class="line"></span><br><span class="line">for(int x&#x3D;100; x&lt;1000; x++) &#123;</span><br><span class="line">int ge &#x3D; x%10;</span><br><span class="line">int shi &#x3D; x&#x2F;10%10;</span><br><span class="line">int bai &#x3D; x&#x2F;10&#x2F;10%10;</span><br><span class="line"></span><br><span class="line">if((ge*ge*ge+shi*shi*shi+bai*bai*bai) &#x3D;&#x3D; x) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;count:&quot;+count);</span><br><span class="line">System.out.println(&quot;------------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;while循环版本</span><br><span class="line">int count2 &#x3D; 0;</span><br><span class="line"></span><br><span class="line">int y &#x3D; 100;</span><br><span class="line">while(y&lt;1000) &#123;</span><br><span class="line">int ge &#x3D; y%10;</span><br><span class="line">int shi &#x3D; y&#x2F;10%10;</span><br><span class="line">int bai &#x3D; y&#x2F;10&#x2F;10%10;</span><br><span class="line"></span><br><span class="line">if((ge*ge*ge+shi*shi*shi+bai*bai*bai) &#x3D;&#x3D; y) &#123;</span><br><span class="line">count2++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">y++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;count2:&quot;+count2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构while语句和for语句的区别"><a href="#循环结构while语句和for语句的区别" class="headerlink" title="循环结构while语句和for语句的区别"></a>循环结构while语句和for语句的区别</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">while循环和for循环的区别?</span><br><span class="line">使用区别：如果你想在循环结束后，继续使用控制条件的那个变量，用while循环，否则用for循环。不知道用for循环。</span><br><span class="line">          因为变量及早的从内存中消失，可以提高内存的使用效率。</span><br><span class="line">  </span><br><span class="line">其实还有一种场景的理解:</span><br><span class="line">如果是一个范围的，用for循环非常明确。</span><br><span class="line">如果是不明确要做多少次，用while循环较为合适。</span><br><span class="line">举例：吃葡萄。</span><br><span class="line">*&#x2F;</span><br><span class="line">class WhileDemo4 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;for循环实现</span><br><span class="line">for(int x&#x3D;0; x&lt;10; x++) &#123;</span><br><span class="line">System.out.println(&quot;学习Java技术哪家强,中国北京传智播客&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;这里不能在继续访问了</span><br><span class="line">&#x2F;&#x2F;System.out.println(x);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;while循环实现</span><br><span class="line">int y &#x3D; 0;</span><br><span class="line">while(y&lt;10) &#123;</span><br><span class="line">System.out.println(&quot;学习Java技术哪家强,中国北京传智播客&quot;);</span><br><span class="line">y++;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;这里是可以继续访问的</span><br><span class="line">System.out.println(y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构while语句和练习珠穆朗玛峰"><a href="#循环结构while语句和练习珠穆朗玛峰" class="headerlink" title="循环结构while语句和练习珠穆朗玛峰"></a>循环结构while语句和练习珠穆朗玛峰</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">我国最高山峰是珠穆朗玛峰：8848m，我现在有一张足够大的纸张，厚度为：0.01m。</span><br><span class="line">请问，我折叠多少次，就可以保证厚度不低于珠穆朗玛峰的高度?</span><br><span class="line"></span><br><span class="line">分析：</span><br><span class="line">A:定义一个统计变量，默认值是0</span><br><span class="line">B:最高山峰是珠穆朗玛峰：8848m这是最终的厚度</span><br><span class="line">  我现在有一张足够大的纸张，厚度为：0.01m这是初始厚度</span><br><span class="line">C:我折叠多少次，就可以保证厚度不低于珠穆朗玛峰的高度?</span><br><span class="line">  折叠一次有什么变化呢?就是厚度是以前的2倍。</span><br><span class="line">D:只要每次变化的厚度没有超过珠穆朗玛峰的高度，就折叠，统计变量++</span><br><span class="line">E:输出统计变量。</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">class WhileDemo5 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;定义一个统计变量，默认值是0</span><br><span class="line">int count &#x3D; 0;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;最高山峰是珠穆朗玛峰：8848m这是最终的厚度</span><br><span class="line">&#x2F;&#x2F;我现在有一张足够大的纸张，厚度为：0.01m这是初始厚度</span><br><span class="line">&#x2F;&#x2F;为了简单，我把0.01变成1，同理8848就变成了884800</span><br><span class="line">int end &#x3D; 884800;</span><br><span class="line">int start &#x3D; 1;</span><br><span class="line"></span><br><span class="line">while(start&lt;end) &#123;</span><br><span class="line">&#x2F;&#x2F;只要每次变化的厚度没有超过珠穆朗玛峰的高度，就折叠，统计变量++</span><br><span class="line">count++;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;折叠一次有什么变化呢?就是厚度是以前的2倍。</span><br><span class="line">start *&#x3D; 2;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;第&quot;+count+&quot;次厚度是&quot;+start);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;输出统计变量。</span><br><span class="line">System.out.println(&quot;要叠&quot;+count+&quot;次&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构do…while语句的格式和基本使用"><a href="#循环结构do…while语句的格式和基本使用" class="headerlink" title="循环结构do…while语句的格式和基本使用"></a>循环结构do…while语句的格式和基本使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">do...while循环的基本格式：</span><br><span class="line">do &#123;</span><br><span class="line">循环体语句;</span><br><span class="line">&#125;while(判断条件语句);</span><br><span class="line"></span><br><span class="line">扩展格式；</span><br><span class="line">初始化语句;</span><br><span class="line">do &#123;</span><br><span class="line">循环体语句;</span><br><span class="line">控制条件语句;</span><br><span class="line">&#125;while(判断条件语句);</span><br><span class="line">*&#x2F;</span><br><span class="line">class DoWhileDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;输出10次HelloWorld。</span><br><span class="line">int x &#x3D; 0;</span><br><span class="line">do &#123;</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">x++;</span><br><span class="line">&#125;while(x&lt;10);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;--------------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;求和1-100</span><br><span class="line">int sum &#x3D; 0;</span><br><span class="line">int a &#x3D; 1;</span><br><span class="line">do &#123;</span><br><span class="line">sum +&#x3D; a;</span><br><span class="line">a++;</span><br><span class="line">&#125;while(a&lt;&#x3D;100);</span><br><span class="line"></span><br><span class="line">System.out.println(sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构三种循环语句的区别"><a href="#循环结构三种循环语句的区别" class="headerlink" title="循环结构三种循环语句的区别"></a>循环结构三种循环语句的区别</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">循环语句的区别:</span><br><span class="line">do...while循环至少执行一次循环体。</span><br><span class="line">而for,while循环必须先判断条件是否成立，然后决定是否执行循环体语句。</span><br><span class="line"></span><br><span class="line">那么，我们一般使用哪种循环呢?</span><br><span class="line">优先考虑for，其次考虑while，最后考虑do...while</span><br><span class="line">*&#x2F;</span><br><span class="line">class DoWhileDemo2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int x &#x3D; 3;</span><br><span class="line">while(x &lt; 3) &#123;</span><br><span class="line">System.out.println(&quot;我爱林青霞&quot;);</span><br><span class="line">x++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;--------------&quot;);</span><br><span class="line"></span><br><span class="line">int y &#x3D; 3;</span><br><span class="line">do &#123;</span><br><span class="line">System.out.println(&quot;我爱林青霞&quot;);</span><br><span class="line">y++;</span><br><span class="line">&#125;while(y &lt; 3);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构循环注意事项之死循环"><a href="#循环结构循环注意事项之死循环" class="headerlink" title="循环结构循环注意事项之死循环"></a>循环结构循环注意事项之死循环</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">注意死循环：</span><br><span class="line">A:一定要注意控制条件语句控制的那个变量的问题，不要弄丢了，否则就容易死循环。</span><br><span class="line">B:两种最简单的死循环格式</span><br><span class="line">while(true)&#123;...&#125;</span><br><span class="line">for(;;)&#123;...&#125;</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line">class DoWhileDemo3 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int x &#x3D; 0;</span><br><span class="line">while(x &lt; 10) &#123;</span><br><span class="line">System.out.println(x);</span><br><span class="line">x++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;------------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">while(true) &#123;</span><br><span class="line">System.out.println(&quot;今天我很高兴，学习了死循环&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">for(;;) &#123;</span><br><span class="line">System.out.println(&quot;今天我很高兴，学习了死循环&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构循环嵌套输出4行5列的星星"><a href="#循环结构循环嵌套输出4行5列的星星" class="headerlink" title="循环结构循环嵌套输出4行5列的星星"></a>循环结构循环嵌套输出4行5列的星星</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">需求：请输出一个4行5列的星星(*)图案。</span><br><span class="line">结果：</span><br><span class="line">*****</span><br><span class="line">*****</span><br><span class="line">*****</span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">循环嵌套：就是循环语句的循环体本身是一个循环语句。</span><br><span class="line"></span><br><span class="line">通过结果我们知道这样的一个结论：</span><br><span class="line">外循环控制行数</span><br><span class="line">内循环控制列数</span><br><span class="line">*&#x2F;</span><br><span class="line">class ForForDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;原始做法</span><br><span class="line">System.out.println(&quot;*****&quot;);</span><br><span class="line">System.out.println(&quot;*****&quot;);</span><br><span class="line">System.out.println(&quot;*****&quot;);</span><br><span class="line">System.out.println(&quot;*****&quot;);</span><br><span class="line">System.out.println(&quot;-------------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;虽然可以完成需求，但是不是很好</span><br><span class="line">&#x2F;&#x2F;如果是多行多列就会比较麻烦</span><br><span class="line">&#x2F;&#x2F;所以我们准备改进</span><br><span class="line">&#x2F;&#x2F;如何改进呢?</span><br><span class="line">&#x2F;&#x2F;我先考虑如何实现一行*的问题</span><br><span class="line">&#x2F;&#x2F;System.out.println(&quot;*****&quot;);</span><br><span class="line">&#x2F;&#x2F;我们要想的是如何实现一次输出一颗*的问题</span><br><span class="line">&#x2F;&#x2F;System.out.println(&quot;*&quot;);</span><br><span class="line">&#x2F;&#x2F;System.out.println(&quot;*&quot;);</span><br><span class="line">&#x2F;&#x2F;现在虽然可以一次一颗*，但是却换行了，我要求不能换行，怎么办呢?</span><br><span class="line">&#x2F;&#x2F;输出语句的另一种格式：System.out.print(); 这个是不带换行的</span><br><span class="line">&#x2F;&#x2F;System.out.print(&quot;*&quot;);</span><br><span class="line">&#x2F;&#x2F;System.out.print(&quot;*&quot;);</span><br><span class="line">&#x2F;&#x2F;System.out.print(&quot;*&quot;);</span><br><span class="line">&#x2F;&#x2F;System.out.print(&quot;*&quot;);</span><br><span class="line">&#x2F;&#x2F;System.out.print(&quot;*&quot;);</span><br><span class="line">&#x2F;&#x2F;如果我要在一行上打出多颗*，比较麻烦，而代码是重复的，所以我决定用循环改进</span><br><span class="line">for(int x&#x3D;0; x&lt;5; x++) &#123;</span><br><span class="line">System.out.print(&quot;*&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;我们可以通过空的输出语句实现换行：System.out.println();</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;既然我可以打出一行，我就可以打出第二行</span><br><span class="line">for(int x&#x3D;0; x&lt;5; x++) &#123;</span><br><span class="line">System.out.print(&quot;*&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;我们可以通过空的输出语句实现换行：System.out.println();</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;同理打出第三行，第四行</span><br><span class="line">for(int x&#x3D;0; x&lt;5; x++) &#123;</span><br><span class="line">System.out.print(&quot;*&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;我们可以通过空的输出语句实现换行：System.out.println();</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;既然我可以打出一行，我就可以打出第二行</span><br><span class="line">for(int x&#x3D;0; x&lt;5; x++) &#123;</span><br><span class="line">System.out.print(&quot;*&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;我们可以通过空的输出语句实现换行：System.out.println();</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(&quot;-----------------&quot;);</span><br><span class="line">&#x2F;&#x2F;同样的代码出现了4次，说明我们程序写的不好，用循环改进</span><br><span class="line">for(int y&#x3D;0; y&lt;4; y++) &#123;</span><br><span class="line">for(int x&#x3D;0; x&lt;5; x++) &#123;</span><br><span class="line">System.out.print(&quot;*&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;我们可以通过空的输出语句实现换行：System.out.println();</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构循环嵌套输出直角三角形"><a href="#循环结构循环嵌套输出直角三角形" class="headerlink" title="循环结构循环嵌套输出直角三角形"></a>循环结构循环嵌套输出直角三角形</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">需求：请输出下列的形状</span><br><span class="line">*</span><br><span class="line">**</span><br><span class="line">***</span><br><span class="line">****</span><br><span class="line">*****</span><br><span class="line">*&#x2F;</span><br><span class="line">class ForForDemo2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;通过简单的观察，我们看到这是一个行是5，列数是变化的形状</span><br><span class="line">&#x2F;&#x2F;我们先打印出一个5行5列的形状</span><br><span class="line">for(int x&#x3D;0; x&lt;5; x++) &#123;</span><br><span class="line">for(int y&#x3D;0; y&lt;5; y++) &#123;</span><br><span class="line">System.out.print(&quot;*&quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;--------------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;我们实现了一个5行5列的形状</span><br><span class="line">&#x2F;&#x2F;但是这不是我们想要的</span><br><span class="line">&#x2F;&#x2F;我们要的是列数变化的</span><br><span class="line">&#x2F;&#x2F;列数是如何变化的呢?</span><br><span class="line">&#x2F;&#x2F;第一行：1列y&#x3D;0,y&lt;&#x3D;0,y++</span><br><span class="line">&#x2F;&#x2F;第二行：2列y&#x3D;0,y&lt;&#x3D;1,y++</span><br><span class="line">&#x2F;&#x2F;第三行：3列y&#x3D;0,y&lt;&#x3D;2,y++</span><br><span class="line">&#x2F;&#x2F;第四行：4列y&#x3D;0,y&lt;&#x3D;3,y++</span><br><span class="line">&#x2F;&#x2F;第五行：5列y&#x3D;0,y&lt;&#x3D;4,y++</span><br><span class="line">&#x2F;&#x2F;在看外循环x的变化，恰好就是x&#x3D;0,1,2,3,4</span><br><span class="line">&#x2F;&#x2F;所以这个最终版的程序就是如下</span><br><span class="line">for(int x&#x3D;0; x&lt;5; x++) &#123;</span><br><span class="line">for(int y&#x3D;0; y&lt;&#x3D;x; y++) &#123;</span><br><span class="line">System.out.print(&quot;*&quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构九九乘法表"><a href="#循环结构九九乘法表" class="headerlink" title="循环结构九九乘法表"></a>循环结构九九乘法表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">需求：在控制台输出九九乘法表。</span><br><span class="line"></span><br><span class="line">首先我们写出九九乘法表：</span><br><span class="line">1*1&#x3D;1</span><br><span class="line">1*2&#x3D;22*2&#x3D;4</span><br><span class="line">1*3&#x3D;32*3&#x3D;63*3&#x3D;9</span><br><span class="line">1*4&#x3D;42*4&#x3D;83*4&#x3D;124*4&#x3D;16</span><br><span class="line">...</span><br><span class="line">1*9&#x3D;92*9&#x3D;183*9&#x3D;27...</span><br><span class="line"></span><br><span class="line">我们先把这个九九乘法表看出是这样的一个形状：</span><br><span class="line">*</span><br><span class="line">**</span><br><span class="line">***</span><br><span class="line">****</span><br><span class="line">*****</span><br><span class="line">******</span><br><span class="line">*******</span><br><span class="line">********</span><br><span class="line">*********</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">&#39;\x&#39; x表示任意，这种做法叫转移字符。</span><br><span class="line"></span><br><span class="line">&#39;\t&#39;tab键的位置</span><br><span class="line">&#39;\r&#39;回车</span><br><span class="line">&#39;\n&#39;换行</span><br><span class="line">*&#x2F;</span><br><span class="line">class ForForDemo3 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">for(int x&#x3D;0; x&lt;9; x++) &#123;</span><br><span class="line">for(int y&#x3D;0; y&lt;&#x3D;x; y++) &#123;</span><br><span class="line">System.out.print(&quot;*&quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;--------------&quot;);</span><br><span class="line">&#x2F;&#x2F;为了使用数据，我们从1开始</span><br><span class="line">for(int x&#x3D;1; x&lt;&#x3D;9; x++) &#123;</span><br><span class="line">for(int y&#x3D;1; y&lt;&#x3D;x; y++) &#123;</span><br><span class="line">System.out.print(y+&quot;*&quot;+x+&quot;&#x3D;&quot;+y*x+&quot;\t&quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制跳转语句break语句"><a href="#控制跳转语句break语句" class="headerlink" title="控制跳转语句break语句"></a>控制跳转语句break语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package stephencurry;</span><br><span class="line">import java.util.*;</span><br><span class="line">import java.math.*;</span><br><span class="line">import java.io.*;</span><br><span class="line">public class Main &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">        Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line">        for(int x&#x3D;0; x&lt;10; x++) &#123;</span><br><span class="line">if(x &#x3D;&#x3D; 3) &#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;over&quot;);</span><br><span class="line">System.out.println(&quot;-------------&quot;);</span><br><span class="line"></span><br><span class="line">wc:for(int x&#x3D;0; x&lt;3; x++) &#123;</span><br><span class="line">nc:for(int y&#x3D;0; y&lt;4; y++) &#123;</span><br><span class="line">if(y &#x3D;&#x3D; 2) &#123;</span><br><span class="line">&#x2F;&#x2F;break nc;</span><br><span class="line">break wc;</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(&quot;*&quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制跳转语句continue语句"><a href="#控制跳转语句continue语句" class="headerlink" title="控制跳转语句continue语句"></a>控制跳转语句continue语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">continue:继续</span><br><span class="line"></span><br><span class="line">使用场景：</span><br><span class="line">循环中。离开此场景无意义。</span><br><span class="line"></span><br><span class="line">测试，找到和break的区别：</span><br><span class="line">break:跳出单层循环</span><br><span class="line">continue:跳出一次循环，进入下一次的执行</span><br><span class="line"></span><br><span class="line">练习题：</span><br><span class="line">for(int x&#x3D;1; x&lt;&#x3D;10; x++) &#123;</span><br><span class="line">if(x%3&#x3D;&#x3D;0) &#123;</span><br><span class="line">&#x2F;&#x2F;在此处填写代码</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(“Java基础班”);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">我想在控制台输出2次:“Java基础班“</span><br><span class="line">break;</span><br><span class="line">我想在控制台输出7次:“Java基础班“</span><br><span class="line">continue;</span><br><span class="line">我想在控制台输出13次:“Java基础班“</span><br><span class="line">System.out.println(“Java基础班”);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line">class ContinueDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">for(int x&#x3D;0; x&lt;10; x++) &#123;</span><br><span class="line">if(x &#x3D;&#x3D; 3) &#123;</span><br><span class="line">&#x2F;&#x2F;break;</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制跳转语句return语句"><a href="#控制跳转语句return语句" class="headerlink" title="控制跳转语句return语句"></a>控制跳转语句return语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">return:返回</span><br><span class="line"></span><br><span class="line">其实它的作用不是结束循环的，而是结束方法的。</span><br><span class="line">*&#x2F;</span><br><span class="line">class ReturnDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">for(int x&#x3D;0; x&lt;10; x++) &#123;</span><br><span class="line">if(x &#x3D;&#x3D; 2) &#123;</span><br><span class="line">System.out.println(&quot;退出&quot;);</span><br><span class="line">&#x2F;&#x2F;break;</span><br><span class="line">&#x2F;&#x2F;continue;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;over&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="while语句和break结合使用之小芳存钱"><a href="#while语句和break结合使用之小芳存钱" class="headerlink" title="while语句和break结合使用之小芳存钱"></a>while语句和break结合使用之小芳存钱</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">需求：小芳的妈妈每天给她2.5元钱，她都会存起来，但是，</span><br><span class="line">      每当这一天是存钱的第5天或者5的倍数的话，她都会花去6元钱，</span><br><span class="line">  请问，经过多少天，小芳才可以存到100元钱。</span><br><span class="line"></span><br><span class="line">分析：</span><br><span class="line">A:小芳的妈妈每天给她2.5元钱</span><br><span class="line">double dayMoney &#x3D; 2.5;</span><br><span class="line">B:她都会存起来</span><br><span class="line">double daySum &#x3D; 0;</span><br><span class="line">C:从第一天开始存储</span><br><span class="line">int dayCount &#x3D; 1;</span><br><span class="line">D:经过多少天，小芳才可以存到100元钱。</span><br><span class="line">double result &#x3D; 100;</span><br><span class="line">E:这一天是存钱的第5天或者5的倍数的话，她都会花去6元钱，</span><br><span class="line">说明要判断dayCount的值，如果对5整除就减去6元钱。</span><br><span class="line">daySum -&#x3D; 6;</span><br><span class="line">  由此还隐含了一个问题，就是如果不是5的倍数天的话，钱要累加</span><br><span class="line">daySum +&#x3D; dayMoney;</span><br><span class="line">F:因为不知道是多少天，所以我用死循环，一旦超过100元我就退出循环。</span><br><span class="line">*&#x2F;</span><br><span class="line">class WhileDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;每天要存储的钱是2.5元</span><br><span class="line">double dayMoney &#x3D; 2.5;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;存钱的初始化值是0</span><br><span class="line">double daySum &#x3D; 0;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;从第一天开始存储</span><br><span class="line">int dayCount &#x3D; 1;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;最终存储不小于100就不存储了</span><br><span class="line">int result &#x3D; 100;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;因为不知道是多少天，所以我用死循环，</span><br><span class="line">while(true) &#123;</span><br><span class="line">&#x2F;&#x2F;累加钱</span><br><span class="line">daySum +&#x3D; dayMoney;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;一旦超过100元我就退出循环。</span><br><span class="line">if(daySum &gt;&#x3D; result) &#123;</span><br><span class="line">System.out.println(&quot;共花了&quot;+dayCount+&quot;天存储了100元&quot;);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(dayCount%5 &#x3D;&#x3D; 0) &#123;</span><br><span class="line">&#x2F;&#x2F;花去6元钱</span><br><span class="line">daySum -&#x3D; 6;</span><br><span class="line">System.out.println(&quot;第&quot;+dayCount+&quot;天花了6元钱&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;天数变化</span><br><span class="line">dayCount++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;选择结构switch语句的格式及其解释&quot;&gt;&lt;a href=&quot;#选择结构switch语句的格式及其解释&quot; class=&quot;headerlink&quot; title=&quot;选择结构switch语句的格式及其解释&quot;&gt;&lt;/a&gt;选择结构switch语句的格式及其解释&lt;/h3&gt;
    
    </summary>
    
    
      <category term="Java系统学习-JavaSE篇" scheme="https://stephencurry6666.github.io/categories/Java%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0-JavaSE%E7%AF%87/"/>
    
    
      <category term="Java系统学习" scheme="https://stephencurry6666.github.io/tags/Java%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>牛客算法周周练6</title>
    <link href="https://stephencurry6666.github.io/2020/05/13/%E7%89%9B%E5%AE%A2%E7%AE%97%E6%B3%95%E5%91%A8%E5%91%A8%E7%BB%836/"/>
    <id>https://stephencurry6666.github.io/2020/05/13/%E7%89%9B%E5%AE%A2%E7%AE%97%E6%B3%95%E5%91%A8%E5%91%A8%E7%BB%836/</id>
    <published>2020-05-13T03:39:36.878Z</published>
    <updated>2020-05-13T08:24:43.827Z</updated>
    
    <content type="html"><![CDATA[<h3 id="A题"><a href="#A题" class="headerlink" title="A题"></a>A题</h3><p>大小各不相同的一队青蛙站在河左岸的石墩（记为A）上，要过到对岸的石墩(记为D)上去。河心有几片菏叶(分别记为Y1…Ym)和几个石墩(分别记为S1…Sn)。图示如下：</p><a id="more"></a><p><img src="https://uploadfiles.nowcoder.com/images/20180701/305473_1530409311818_55A3FDD5552A97D657101D27CE6E2F90" alt="tupian"></p><p>青蛙的站队和移动方法规则如下：</p><p>1． 每只青蛙只能站在荷叶、石墩，或者仅比它大一号的青蛙背上（统称为合法的落脚点）；</p><p>2． 一只青蛙只有背上没有其它青蛙的时候才能够从一个落脚点跳到另一个落脚点；</p><p>3． 青蛙允许从左岸A直接跳到河心的石墩、荷叶和右岸的石墩D上，允许从河心的石墩和荷叶跳到右岸的石墩D上；</p><p>4． 青蛙在河心的石墩之间、荷叶之间以及石墩和荷叶之间可以来回跳动；</p><p>5． 青蛙在离开左岸石墩后，不能再返回左岸；到达右岸后，不能再跳回；</p><p>6． 假定石墩承重能力很大，允许无论多少只青蛙都可呆在上面。但是，由于石墩的面积不大，至多只能有一只青蛙直接站在上面，而其他的青蛙只能依规则1落在比它大一号的青蛙的背上。<br>7． 荷叶不仅面积不大，而且负重能力也有限，至多只能有一只青蛙站在上面。</p><p>8． 每一步只能移动一只青蛙，并且移动后需要满足站队规则；</p><p>9． 在一开始的时候，青蛙均站在A上，最大的一只青蛙直接站在石墩上，而其它的青蛙依规则6站在比其大一号的青蛙的背上。</p><p>青蛙希望最终能够全部移动到D上，并完成站队。</p><p>设河心有m片荷叶和n个石墩，请求出这队青蛙至多有多少只，在满足站队和移动规则的前提下，能从A过到D。</p><p>例如，在m=1且n=1时，河心有一片荷叶（Y1）和一个石墩（S1），此时至多有4只青蛙能够过河（由小到大称为1、2、3、4），过河的一种方法为：</p><p><img src="https://uploadfiles.nowcoder.com/images/20180701/305473_1530409345048_6028F142230141307F51778CA0C5A02F" alt="tupian2"></p><p>输入描述:<br>仅有两行，每一行仅包含一个整数和一个换行/回车符。第一行的数字为河心的石墩数n(0 ≤ N ≤ 25)，第二行为荷叶数m(0 ≤ M ≤ 25)。</p><p>输出描述:<br>仅包含一个数字和一个换行/回车符。该数字为在河心有n个石墩和m片荷叶时，最多能够过河的青蛙的只数。</p><p>输入</p><p>1</p><p>1</p><p>输出</p><p>4</p><p><strong>题意：</strong><br>中文题，不过多叙述题意。</p><p><strong>思路：</strong><br>这道题的话，看起来像汉诺塔，但是汉诺塔可以随意移动，虽然也有一定前提。但是对这个题目来说最要命的约束条件就是到了对面就不能动了。所以我们可以知道一定是重的青蛙先跳去对面。所以我们从几个极端来看。<br>如果给出莲叶数是m，石头数目是n。</p><p>如果n是0，那么最多可以允许m+1个青蛙，m个青蛙填满莲叶，最后一个青蛙跳过去。<br>如果n是1，那么最多允许m+1个青蛙先填满莲叶，在去石头上面过渡，另外的m+1个青蛙根据m=0的情况跳。所以一共 （m + 1）*2。所以我们得出结论：</p><script type="math/tex; mode=display">ans=2^{n}*(m+1)</script><p><strong>AC代码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 100010;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    cout &lt;&lt; (1 &lt;&lt; n) * (m + 1) &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B题"><a href="#B题" class="headerlink" title="B题"></a>B题</h3><p><strong>题意：</strong><br>月月给华华出了一道题，先给你一个式子：$F_{1}=A,F_{2}=B,F_{i}=F_{i-1}+F_{i-2}(i&gt;2)$，然后求$gcd(F_{N},F_{N+1})$。</p><p><strong>思路：</strong><br>这道题的话，考察裴蜀定理,裴蜀定理具体如下：裴蜀定理（或贝祖定理）得名于法国数学家艾蒂安·裴蜀，说明了对任何整数a、b和它们的最大公约数d，关于未知数x和y的线性不定方程（称为裴蜀等式）：若a,b是整数,且$gcd(a,b)=d$，那么对于任意的整数x,y,ax+by都一定是d的倍数，特别地，一定存在整数x,y，使$ax+by=d$成立。由裴蜀定理可知，要求$gcd(F_{N},F_{N+1})$,只要求出$gcd(A,B)$就可以了，这两者是相等的。并且C++函数库中已经封装了_$gcd(a,b)$用来求a与b之间的最大公约数，我们只需要套用就可以了。</p><p><strong>AC代码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 100010;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    ll a, b, n;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; n;</span><br><span class="line">    cout &lt;&lt; __gcd(a, b) &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C题"><a href="#C题" class="headerlink" title="C题"></a>C题</h3><p><strong>题意：</strong><br>Nancy喜欢博弈！<br>Johnson和Nancy得到了一个神奇的多重集合，仅包含一个正整数n，两个人轮流进行操作。<br>一次操作可以将集合中一个数字分解为它的任意两个非1的因数，并加入集合中。<br>他们想知道，在Johnson和Nancy绝顶聪明的情况下，如果Nancy先手进行操作，最后谁没有办法继续操作了呢？</p><p><strong>思路：</strong><br>这道题的话，每次操作可以将集合中的一个数字分解为它的任意两个非1的因数, 集合中的数字个数+1。因为质因数是无法再被分解的,所以最后集合中的数全为 n 的质因数。因此只需要看题目给定的n有多少个质因数。假设n有p个质因数，那么这场游戏将进行p-1次操作（每次操作后集合中的数字个数+1），如果p-1为奇数那么后手便无法再进行操作，如果p-1为偶数则先手再无法进行操作。所以我们只要筛一下素数就行了。最后$n==1$的情况要判断一下。</p><p><strong>AC代码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 100010;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    if (n &#x3D;&#x3D; 1)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;Nancy&quot; &lt;&lt; endl;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    int ans &#x3D; 0;</span><br><span class="line">    for (int i &#x3D; 2; i &lt;&#x3D; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        while (n % i &#x3D;&#x3D; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            n &#x2F;&#x3D; i;</span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (ans % 2 !&#x3D; 0)</span><br><span class="line">        cout &lt;&lt; &quot;Nancy&quot; &lt;&lt; endl;</span><br><span class="line">    else</span><br><span class="line">        cout &lt;&lt; &quot;Johnson&quot; &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="D题"><a href="#D题" class="headerlink" title="D题"></a>D题</h3><p><strong>题意：</strong><br>胡队长带领HA实验的战士们玩真人CS，真人CS的地图由一些据点组成，现在胡队长已经占领了n个据点，为了方便，将他们编号为1~n，为了隐蔽，胡队长命令战士们在每个据点出挖一个坑，让战士们躲在坑里。由于需要在任意两个点之间传递信息，两个坑之间必须挖出至少一条通路，而挖沟是一件很麻烦的差事，所以胡队长希望挖出数量尽可能少的沟，使得任意两个据点之间有至少一条通路，顺便，尽可能的$\sum d[i][j]$使最小（其中$d[i][j]$为据点i到j的距离）。</p><p><strong>思路：</strong><br>这道题的话，就是一道裸的最小生成树，直接做就可以了。</p><p><strong>AC代码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 100010;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">using namespace std;</span><br><span class="line">struct node</span><br><span class="line">&#123;</span><br><span class="line">    int s;</span><br><span class="line">    int e;</span><br><span class="line">    int v;</span><br><span class="line">&#125; edge[maxx*5];</span><br><span class="line">bool cmp(node a, node b)</span><br><span class="line">&#123;</span><br><span class="line">    return a.v &lt; b.v;</span><br><span class="line">&#125;</span><br><span class="line">int pre[maxx];</span><br><span class="line">int n, m;</span><br><span class="line">void init()</span><br><span class="line">&#123;</span><br><span class="line">    for (int i &#x3D; 0; i &lt;&#x3D; n; i++)</span><br><span class="line">        pre[i] &#x3D; i;</span><br><span class="line">&#125;</span><br><span class="line">int getf(int a)</span><br><span class="line">&#123;</span><br><span class="line">    if (pre[a] &#x3D;&#x3D; a)</span><br><span class="line">        return a;</span><br><span class="line">    int tmp &#x3D; getf(pre[a]);</span><br><span class="line">    return pre[a] &#x3D; tmp;</span><br><span class="line">&#125;</span><br><span class="line">int Kruskal(int a, int b)</span><br><span class="line">&#123;</span><br><span class="line">    int fa &#x3D; getf(a);</span><br><span class="line">    int fb &#x3D; getf(b);</span><br><span class="line">    if (fa !&#x3D; fb)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[fa] &#x3D; fb;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">        return 0;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    while (cin &gt;&gt; n &gt;&gt; m)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; m; i++)</span><br><span class="line">            cin &gt;&gt; edge[i].s &gt;&gt; edge[i].e &gt;&gt; edge[i].v;</span><br><span class="line">        sort(edge + 1, edge + m + 1, cmp);</span><br><span class="line">        int ans &#x3D; 0;</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (Kruskal(edge[i].s, edge[i].e))</span><br><span class="line">                ans +&#x3D; edge[i].v;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E题"><a href="#E题" class="headerlink" title="E题"></a>E题</h3><p><strong>题意：</strong><br>这道题给你了一些代码，让你补全。</p><p><strong>思路：</strong><br>这道题的话，看完代码后不难看出是求的线段树，所以我们按要求补全即可。</p><p><strong>AC代码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;climits&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;cstdlib&gt;</span><br><span class="line">#include &lt;ctime&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">#define fi first</span><br><span class="line">#define lc (x &lt;&lt; 1)</span><br><span class="line">#define se second</span><br><span class="line">#define U unsigned</span><br><span class="line">#define rc (x &lt;&lt; 1 | 1)</span><br><span class="line">#define Re register</span><br><span class="line">#define LL long long</span><br><span class="line">#define MP std::make_pair</span><br><span class="line">#define CLR(i, a) memset(i, a, sizeof(i))</span><br><span class="line">#define FOR(i, a, b) for (Re int i &#x3D; a; i &lt;&#x3D; b; ++i)</span><br><span class="line">#define ROF(i, a, b) for (Re int i &#x3D; a; i &gt;&#x3D; b; --i)</span><br><span class="line">#define SFOR(i, a, b, c) for (Re int i &#x3D; a; i &lt;&#x3D; b; i +&#x3D; c)</span><br><span class="line">#define SROF(i, a, b, c) for (Re int i &#x3D; a; i &gt;&#x3D; b; i -&#x3D; c)</span><br><span class="line">#define DEBUG(x) std::cerr &lt;&lt; #x &lt;&lt; &#39;&#x3D;&#39; &lt;&lt; x &lt;&lt; std::endl</span><br><span class="line">const int MAXN &#x3D; 1000000 + 5;</span><br><span class="line">int N, maxL;</span><br><span class="line">std::set&lt;std::pair&lt;int, int&gt;&gt; L;</span><br><span class="line">int a[MAXN];</span><br><span class="line">inline int calc()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 返回 set 中所有线段的并长度。(每个 pair 表示一个线段[first,second]</span><br><span class="line">    int ans &#x3D; 0;</span><br><span class="line">    for (int i &#x3D; 1; i &lt;&#x3D; maxL; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if (a[i])</span><br><span class="line">            ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    scanf(&quot;%d%d&quot;, &amp;N, &amp;maxL);</span><br><span class="line">    while (N--)</span><br><span class="line">    &#123;</span><br><span class="line">        int opt, x, y;</span><br><span class="line">        scanf(&quot;%d%d%d&quot;, &amp;opt, &amp;x, &amp;y);</span><br><span class="line">        if (opt &#x3D;&#x3D; 1)</span><br><span class="line">        &#123;</span><br><span class="line">            if (L.find(MP(x, y)) !&#x3D; L.end())</span><br><span class="line">                continue;</span><br><span class="line">            L.insert(MP(x, y));</span><br><span class="line">            for (int i &#x3D; x; i &lt;&#x3D; y; i++)</span><br><span class="line">                a[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">        if (opt &#x3D;&#x3D; 2)</span><br><span class="line">        &#123;</span><br><span class="line">            if (L.find(MP(x, y)) &#x3D;&#x3D; L.end())</span><br><span class="line">                continue;</span><br><span class="line">            L.erase(MP(x, y));</span><br><span class="line">            for (int i &#x3D; x; i &lt;&#x3D; y; i++)</span><br><span class="line">                a[i]--;</span><br><span class="line">        &#125;</span><br><span class="line">        if (opt &#x3D;&#x3D; 3)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;%d\n&quot;, calc());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;A题&quot;&gt;&lt;a href=&quot;#A题&quot; class=&quot;headerlink&quot; title=&quot;A题&quot;&gt;&lt;/a&gt;A题&lt;/h3&gt;&lt;p&gt;大小各不相同的一队青蛙站在河左岸的石墩（记为A）上，要过到对岸的石墩(记为D)上去。河心有几片菏叶(分别记为Y1…Ym)和几个石墩(分别记为S1…Sn)。图示如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="牛客题解" scheme="https://stephencurry6666.github.io/categories/%E7%89%9B%E5%AE%A2%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="牛客题解" scheme="https://stephencurry6666.github.io/tags/%E7%89%9B%E5%AE%A2%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE-Day(3)学习笔记</title>
    <link href="https://stephencurry6666.github.io/2020/05/12/JavaSE-Day(3)%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://stephencurry6666.github.io/2020/05/12/JavaSE-Day(3)%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-05-12T09:38:34.083Z</published>
    <updated>2020-05-12T12:39:14.882Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据类型中补充的几个小问题"><a href="#数据类型中补充的几个小问题" class="headerlink" title="数据类型中补充的几个小问题"></a>数据类型中补充的几个小问题</h2><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">1:在定义Long或者Float类型变量的时候，要加L或者f。</span><br><span class="line">  整数默认是int类型，浮点数默认是double。</span><br><span class="line">  </span><br><span class="line">  byte，short在定义的时候，他们接收的其实是一个int类型的值。</span><br><span class="line">  这个是自己做了一个数据检测的，如果不再它们的范围内，就报错。</span><br><span class="line">  </span><br><span class="line">2:byte值的问题</span><br><span class="line">byte b1 &#x3D; 127;</span><br><span class="line">byte b2 &#x3D; (byte)128; &#x2F;&#x2F;-128</span><br><span class="line">byte b3 &#x3D; (byte)129; &#x2F;&#x2F;-127</span><br><span class="line">byte b4 &#x3D; (byte)130; &#x2F;&#x2F;-126</span><br><span class="line"></span><br><span class="line">byte的范围：-128 ~ 127</span><br><span class="line"></span><br><span class="line">128：10000000</span><br><span class="line">-128：10000000 (这里的1即是符号位，也是数值位)</span><br><span class="line"></span><br><span class="line">3:数据类型转换之默认转换</span><br><span class="line">byte,short,char -- int -- long -- float -- double</span><br><span class="line"></span><br><span class="line">long: 8个字节</span><br><span class="line">float：4个字节</span><br><span class="line"></span><br><span class="line">A:它们底层的存储结构不同。</span><br><span class="line">B:float表示的数据范围比long的范围要大</span><br><span class="line">long：2^63-1</span><br><span class="line">float：3.4*10^38 &gt; 2*10^38 &gt; 2*8^38 &#x3D; 2*2^3^38 &#x3D; 2*2^114 &gt; 2^63-1</span><br><span class="line"></span><br><span class="line">4:Java语言中的字符char可以存储一个中文汉字吗?为什么呢?</span><br><span class="line">可以。因为java语言中的字符占用两个字节。</span><br><span class="line"></span><br><span class="line">Java语言采用的是Unicode编码。</span><br></pre></td></tr></table></figure><h2 id="算术运算符的基本用法"><a href="#算术运算符的基本用法" class="headerlink" title="算术运算符的基本用法"></a>算术运算符的基本用法</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">算术运算符：</span><br><span class="line">+,-,*,&#x2F;,%,++,--</span><br><span class="line"></span><br><span class="line">注意事项：</span><br><span class="line">A:整数相除只能得到整数。如果想得到小数，必须把数据变化为浮点数类型</span><br><span class="line">B:&#x2F;获取的是除法操作的商，%获取的是除法操作的余数</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">class OperatorDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;定义变量</span><br><span class="line">int x &#x3D; 3;  &#x2F;&#x2F;把3赋值给int类型的变量x</span><br><span class="line">int y &#x3D; 4;</span><br><span class="line"></span><br><span class="line">System.out.println(x+y);</span><br><span class="line">System.out.println(x-y);</span><br><span class="line">System.out.println(x*y);</span><br><span class="line">System.out.println(x&#x2F;y); &#x2F;&#x2F;整数相除只能得到整数</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;我就想得到小数，该肿么办呢?</span><br><span class="line">&#x2F;&#x2F;只需要把操作的数据中任意的一个数据变为浮点数</span><br><span class="line">System.out.println(x*1.0&#x2F;y);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;%的应用</span><br><span class="line">System.out.println(x%y); &#x2F;&#x2F;得到的是余数</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算术运算符-和—的使用"><a href="#算术运算符-和—的使用" class="headerlink" title="算术运算符++和—的使用"></a>算术运算符++和—的使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">++,--运算符的使用：</span><br><span class="line">单独使用：</span><br><span class="line">放在操作数的前面和后面效果一样。(这种用法是我们比较常见的)</span><br><span class="line">参与运算使用：</span><br><span class="line">放在操作数的前面，先自增或者自减，然后再参与运算。</span><br><span class="line">放在操作数的后面，先参与运算，再自增或者自减。</span><br><span class="line"></span><br><span class="line">作用：就是对变量进行自增1或者自减1。</span><br><span class="line">*&#x2F;</span><br><span class="line">class OperatorDemo2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;定义两个变量</span><br><span class="line">int x &#x3D; 3;</span><br><span class="line">int y &#x3D; 4;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;字符串的拼接</span><br><span class="line">&#x2F;&#x2F;System.out.println(&quot;x:&quot;+x);</span><br><span class="line">&#x2F;&#x2F;System.out.println(&quot;y:&quot;+y);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;x:&quot;+x+&quot;,y:&quot;+y);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;单独使用</span><br><span class="line">&#x2F;&#x2F;x++;</span><br><span class="line">&#x2F;&#x2F;y--;</span><br><span class="line">++x;</span><br><span class="line">--y;</span><br><span class="line">&#x2F;&#x2F;System.out.println(x);</span><br><span class="line">System.out.println(&quot;x:&quot;+x+&quot;,y:&quot;+y);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;意外的类型,常量是不可以这样做的</span><br><span class="line">&#x2F;&#x2F;System.out.println(10++);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;-------------------&quot;);</span><br><span class="line">&#x2F;&#x2F;参与运算使用</span><br><span class="line">int a &#x3D; 3;</span><br><span class="line">int b &#x3D; 4;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;int c &#x3D; a++;</span><br><span class="line">&#x2F;&#x2F;int d &#x3D; b--;</span><br><span class="line"></span><br><span class="line">int c &#x3D; ++a;</span><br><span class="line">int d &#x3D; --b;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;a:&quot;+a); &#x2F;&#x2F;4, 4</span><br><span class="line">System.out.println(&quot;b:&quot;+b); &#x2F;&#x2F;3, 3</span><br><span class="line">System.out.println(&quot;c:&quot;+c); &#x2F;&#x2F;3, 4</span><br><span class="line">System.out.println(&quot;d:&quot;+d); &#x2F;&#x2F;4, 3</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算术运算符-的多种用法"><a href="#算术运算符-的多种用法" class="headerlink" title="算术运算符+的多种用法"></a>算术运算符+的多种用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">+的用法：</span><br><span class="line">A:加法</span><br><span class="line">B:正号</span><br><span class="line">C:字符串连接符</span><br><span class="line">*&#x2F;</span><br><span class="line">class OperatorDemo3 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;加法</span><br><span class="line">System.out.println(3+4);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;正号</span><br><span class="line">System.out.println(+4);</span><br><span class="line"></span><br><span class="line">System.out.println(&#39;a&#39;);</span><br><span class="line">System.out.println(&#39;a&#39;+1); &#x2F;&#x2F;这里是加法</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;字符串连接符</span><br><span class="line">System.out.println(&quot;hello&quot;+&#39;a&#39;+1);</span><br><span class="line">System.out.println(&#39;a&#39;+1+&quot;hello&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算术运算符-和—的练习"><a href="#算术运算符-和—的练习" class="headerlink" title="算术运算符++和—的练习"></a>算术运算符++和—的练习</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">++,--的练习题</span><br><span class="line"></span><br><span class="line">第一题：</span><br><span class="line">int a &#x3D; 10;</span><br><span class="line">int b &#x3D; 10;</span><br><span class="line">int c &#x3D; 10;</span><br><span class="line"></span><br><span class="line">a &#x3D; b++;</span><br><span class="line">c &#x3D; --a;</span><br><span class="line">b &#x3D; ++a;</span><br><span class="line">a &#x3D; c--;</span><br><span class="line">请分别计算出a,b,c的值</span><br><span class="line"></span><br><span class="line">第二题：</span><br><span class="line">int x &#x3D; 4;</span><br><span class="line">int y &#x3D; (x++)+(++x)+(x*10);</span><br><span class="line">请分别计算出x,y的值</span><br><span class="line">*&#x2F;</span><br><span class="line">class OperatorTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int a &#x3D; 10;</span><br><span class="line">int b &#x3D; 10;</span><br><span class="line">int c &#x3D; 10;</span><br><span class="line"></span><br><span class="line">a &#x3D; b++; &#x2F;&#x2F;a&#x3D;10,b&#x3D;11,c&#x3D;10</span><br><span class="line">c &#x3D; --a; &#x2F;&#x2F;a&#x3D;9,b&#x3D;11,c&#x3D;9</span><br><span class="line">b &#x3D; ++a; &#x2F;&#x2F;a&#x3D;10,b&#x3D;10,c&#x3D;9</span><br><span class="line">a &#x3D; c--; &#x2F;&#x2F;a&#x3D;9,b&#x3D;10,c&#x3D;8</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;a:&quot;+a);</span><br><span class="line">System.out.println(&quot;b:&quot;+b);</span><br><span class="line">System.out.println(&quot;c:&quot;+c);</span><br><span class="line">System.out.println(&quot;--------------&quot;);</span><br><span class="line"></span><br><span class="line">int x &#x3D; 4;</span><br><span class="line">int y &#x3D; (x++)+(++x)+(x*10);</span><br><span class="line">&#x2F;&#x2F;4+6+60</span><br><span class="line">&#x2F;&#x2F;x&#x3D;5,6</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;x:&quot;+x);</span><br><span class="line">System.out.println(&quot;y:&quot;+y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="赋值运算符的基本用法"><a href="#赋值运算符的基本用法" class="headerlink" title="赋值运算符的基本用法"></a>赋值运算符的基本用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">赋值运算符：</span><br><span class="line">基本的赋值运算符：&#x3D;</span><br><span class="line">把&#x3D;右边的数据赋值给左边。</span><br><span class="line"></span><br><span class="line">扩展的赋值运算符：+&#x3D;,-&#x3D;,*&#x3D;,&#x2F;&#x3D;,%&#x3D;</span><br><span class="line">+&#x3D; 把左边和右边做加法，然后赋值给左边。</span><br><span class="line">*&#x2F;</span><br><span class="line">class OperatorDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;定义一个变量</span><br><span class="line">int x &#x3D; 10;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;其他用法</span><br><span class="line">int a,b; </span><br><span class="line">a &#x3D; b &#x3D; 10;</span><br><span class="line">System.out.println(a); </span><br><span class="line">System.out.println(b);</span><br><span class="line">System.out.println(&quot;-----------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义一个变量</span><br><span class="line">int y &#x3D; 10;</span><br><span class="line"></span><br><span class="line">y +&#x3D; 20;</span><br><span class="line"></span><br><span class="line">System.out.println(y);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="赋值运算符的面试题"><a href="#赋值运算符的面试题" class="headerlink" title="赋值运算符的面试题"></a>赋值运算符的面试题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">面试题：</span><br><span class="line">short s&#x3D;1;s &#x3D; s+1; </span><br><span class="line"></span><br><span class="line">short s&#x3D;1;s+&#x3D;1;</span><br><span class="line">上面两个代码有没有问题，如果有，那里有问题。</span><br><span class="line"></span><br><span class="line">为什么第二个木有问题呢?</span><br><span class="line">扩展的赋值运算符其实隐含了一个强制类型转换。</span><br><span class="line"></span><br><span class="line">s +&#x3D; 1;</span><br><span class="line">不是等价于 s &#x3D; s + 1;</span><br><span class="line">而是等价于 s &#x3D; (s的数据类型)(s + 1);</span><br><span class="line">*&#x2F;</span><br><span class="line">class OperatorTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;short s &#x3D; 1;</span><br><span class="line">&#x2F;&#x2F;s &#x3D; s + 1;</span><br><span class="line">&#x2F;&#x2F;System.out.println(s);</span><br><span class="line"></span><br><span class="line">short s &#x3D; 1;</span><br><span class="line">s +&#x3D; 1; &#x2F;&#x2F;好像是 s &#x3D; s + 1;</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="比较运算符的基本用法及其注意事项"><a href="#比较运算符的基本用法及其注意事项" class="headerlink" title="比较运算符的基本用法及其注意事项"></a>比较运算符的基本用法及其注意事项</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">比较运算符：</span><br><span class="line">&#x3D;&#x3D;,!&#x3D;,&gt;,&gt;&#x3D;,&lt;,&lt;&#x3D;</span><br><span class="line"></span><br><span class="line">特点：</span><br><span class="line">无论你的操作是简单还是复杂，结果是boolean类型。</span><br><span class="line"></span><br><span class="line">注意事项：</span><br><span class="line">&quot;&#x3D;&#x3D;&quot;不能写成&quot;&#x3D;&quot;。</span><br><span class="line">*&#x2F;</span><br><span class="line">class OperatorDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int x &#x3D; 3;</span><br><span class="line">int y &#x3D; 4;</span><br><span class="line">int z &#x3D; 3;</span><br><span class="line"></span><br><span class="line">System.out.println(x &#x3D;&#x3D; y);</span><br><span class="line">System.out.println(x &#x3D;&#x3D; z);</span><br><span class="line">System.out.println((x+y) &#x3D;&#x3D; (x+z));</span><br><span class="line">System.out.println(&quot;------------&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(x !&#x3D; y);</span><br><span class="line">System.out.println(x &gt; y);</span><br><span class="line">System.out.println(x &gt;&#x3D; y);</span><br><span class="line">System.out.println(x &lt; y);</span><br><span class="line">System.out.println(x &lt;&#x3D; y);</span><br><span class="line">System.out.println(&quot;------------&quot;);</span><br><span class="line"></span><br><span class="line">int a &#x3D; 10;</span><br><span class="line">int b &#x3D; 20;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;boolean flag &#x3D; (a &#x3D;&#x3D; b);</span><br><span class="line">&#x2F;&#x2F;boolean flag &#x3D; (a &#x3D; b); &#x2F;&#x2F;这个是有问题的，不兼容的类型</span><br><span class="line">&#x2F;&#x2F;System.out.println(flag);</span><br><span class="line"></span><br><span class="line">int c &#x3D; (a &#x3D; b); &#x2F;&#x2F;把b赋值给a，然后把a留下来</span><br><span class="line">System.out.println(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逻辑运算符的基本用法"><a href="#逻辑运算符的基本用法" class="headerlink" title="逻辑运算符的基本用法"></a>逻辑运算符的基本用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">逻辑运算符：</span><br><span class="line">&amp;,|,^,!</span><br><span class="line">&amp;&amp;,||</span><br><span class="line"></span><br><span class="line">特点：</span><br><span class="line">逻辑运算符一般用于连接boolean类型的表达式或者值。</span><br><span class="line"></span><br><span class="line">表达式：就是用运算符把常量或者变量连接起来的符合java语法的式子。</span><br><span class="line">算术表达式：a + b</span><br><span class="line">比较表达式：a &#x3D;&#x3D; b</span><br><span class="line"></span><br><span class="line">结论：</span><br><span class="line">&amp;逻辑与:有false则false。</span><br><span class="line">|逻辑或:有true则true。</span><br><span class="line">^逻辑异或:相同为false，不同为true。</span><br><span class="line">举例：情侣关系。男男,男女,女男,女女</span><br><span class="line">!逻辑非:非false则true，非true则false。</span><br><span class="line">特点：偶数个不改变本身。</span><br><span class="line">*&#x2F;</span><br><span class="line">class OperatorDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int a &#x3D; 3;</span><br><span class="line">int b &#x3D; 4;</span><br><span class="line">int c &#x3D; 5;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&amp;逻辑与</span><br><span class="line">System.out.println((a &gt; b) &amp; (a &gt; c)); &#x2F;&#x2F;false &amp; false &#x3D; false</span><br><span class="line">System.out.println((a &gt; b) &amp; (a &lt; c)); &#x2F;&#x2F;false &amp; true &#x3D; false</span><br><span class="line">System.out.println((a &lt; b) &amp; (a &gt; c)); &#x2F;&#x2F;true &amp; false &#x3D; false</span><br><span class="line">System.out.println((a &lt; b) &amp; (a &lt; c)); &#x2F;&#x2F;true &amp; true &#x3D; true</span><br><span class="line">System.out.println(&quot;---------------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;|逻辑或</span><br><span class="line">System.out.println((a &gt; b) | (a &gt; c)); &#x2F;&#x2F;false | false &#x3D; false</span><br><span class="line">System.out.println((a &gt; b) | (a &lt; c)); &#x2F;&#x2F;false | true &#x3D; true</span><br><span class="line">System.out.println((a &lt; b) | (a &gt; c)); &#x2F;&#x2F;true | false &#x3D; true</span><br><span class="line">System.out.println((a &lt; b) | (a &lt; c)); &#x2F;&#x2F;true | true &#x3D; true</span><br><span class="line">System.out.println(&quot;---------------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;^逻辑异或</span><br><span class="line">System.out.println((a &gt; b) ^ (a &gt; c)); &#x2F;&#x2F;false ^ false &#x3D; false</span><br><span class="line">System.out.println((a &gt; b) ^ (a &lt; c)); &#x2F;&#x2F;false ^ true &#x3D; true</span><br><span class="line">System.out.println((a &lt; b) ^ (a &gt; c)); &#x2F;&#x2F;true ^ false &#x3D; true</span><br><span class="line">System.out.println((a &lt; b) ^ (a &lt; c)); &#x2F;&#x2F;true ^ true &#x3D; false</span><br><span class="line">System.out.println(&quot;---------------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;!逻辑非</span><br><span class="line">System.out.println(!(a &gt; b)); &#x2F;&#x2F;!false &#x3D; true</span><br><span class="line">System.out.println(!(a &lt; b)); &#x2F;&#x2F;!true &#x3D; false</span><br><span class="line">System.out.println(!!(a &gt; b)); &#x2F;&#x2F;!!false &#x3D; false</span><br><span class="line">System.out.println(!!!(a &gt; b)); &#x2F;&#x2F;!!false &#x3D; true</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逻辑运算符-amp-amp-和-amp-的区别"><a href="#逻辑运算符-amp-amp-和-amp-的区别" class="headerlink" title="逻辑运算符&amp;&amp;和&amp;的区别"></a>逻辑运算符&amp;&amp;和&amp;的区别</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">&amp;&amp;和&amp;的区别? 同理||和|的区别?</span><br><span class="line">A:最终结果一样。</span><br><span class="line">B:&amp;&amp;具有短路效果。左边是false，右边不执行。</span><br><span class="line">C:||具有短路效果，左边是true，右边不执行。</span><br><span class="line"></span><br><span class="line">开发中常用的逻辑运算符：</span><br><span class="line">&amp;&amp;,||,!</span><br><span class="line">*&#x2F;</span><br><span class="line">class OperatorDemo2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int a &#x3D; 3;</span><br><span class="line">int b &#x3D; 4;</span><br><span class="line">int c &#x3D; 5;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&amp;&amp;双与</span><br><span class="line">System.out.println((a &gt; b) &amp;&amp; (a &gt; c)); &#x2F;&#x2F;false &amp;&amp; false &#x3D; false</span><br><span class="line">System.out.println((a &gt; b) &amp;&amp; (a &lt; c)); &#x2F;&#x2F;false &amp;&amp; true &#x3D; false</span><br><span class="line">System.out.println((a &lt; b) &amp;&amp; (a &gt; c)); &#x2F;&#x2F;true &amp;&amp; false &#x3D; false</span><br><span class="line">System.out.println((a &lt; b) &amp;&amp; (a &lt; c)); &#x2F;&#x2F;true &amp;&amp; true &#x3D; true</span><br><span class="line">System.out.println(&quot;----------------&quot;);</span><br><span class="line"></span><br><span class="line">int x &#x3D; 3;</span><br><span class="line">int y &#x3D; 4;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;boolean b1 &#x3D; ((x++ &#x3D;&#x3D; 3) &amp; (y++ &#x3D;&#x3D; 4));</span><br><span class="line">&#x2F;&#x2F;boolean b1 &#x3D; ((x++ &#x3D;&#x3D; 3) &amp;&amp; (y++ &#x3D;&#x3D; 4));</span><br><span class="line">&#x2F;&#x2F;boolean b1 &#x3D; ((++x &#x3D;&#x3D; 3) &amp; (y++ &#x3D;&#x3D; 4));</span><br><span class="line">boolean b1 &#x3D; ((++x &#x3D;&#x3D; 3) &amp;&amp; (y++ &#x3D;&#x3D; 4));</span><br><span class="line">System.out.println(&quot;x:&quot;+x);</span><br><span class="line">System.out.println(&quot;y:&quot;+y);</span><br><span class="line">System.out.println(b1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="位运算的基本用法1"><a href="#位运算的基本用法1" class="headerlink" title="位运算的基本用法1"></a>位运算的基本用法1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">位运算符：</span><br><span class="line">&amp;,|,^,~</span><br><span class="line">&lt;&lt;,&gt;&gt;,&gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">要做位运算，首先要把数据转换为二进制。</span><br><span class="line">*&#x2F;</span><br><span class="line">class OperatorDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;&amp;,|,^,~</span><br><span class="line"></span><br><span class="line">int a &#x3D; 3;</span><br><span class="line">int b &#x3D; 4;</span><br><span class="line"></span><br><span class="line">System.out.println(3 &amp; 4);</span><br><span class="line">System.out.println(3 | 4);</span><br><span class="line">System.out.println(3 ^ 4);</span><br><span class="line">System.out.println(~3);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">分析：因为是位运算，所以我们必须先把数据换算成二进制。</span><br><span class="line"></span><br><span class="line">3的二进制：11</span><br><span class="line">00000000 00000000 00000000 00000011</span><br><span class="line">4的二进制：100</span><br><span class="line">00000000 00000000 00000000 00000100</span><br><span class="line"></span><br><span class="line">&amp;位与运算：有0则0。</span><br><span class="line">00000000 00000000 00000000 00000011</span><br><span class="line">   &amp;00000000 00000000 00000000 00000100</span><br><span class="line">-----------------------------------</span><br><span class="line">00000000 00000000 00000000 00000000</span><br><span class="line">结果是：0</span><br><span class="line"></span><br><span class="line">|位或运算：有1则1。</span><br><span class="line">00000000 00000000 00000000 00000011</span><br><span class="line">   |00000000 00000000 00000000 00000100</span><br><span class="line">-----------------------------------</span><br><span class="line">00000000 00000000 00000000 00000111</span><br><span class="line">结果是：7</span><br><span class="line"></span><br><span class="line">^位异或运算：相同则0，不同则1。</span><br><span class="line">00000000 00000000 00000000 00000011</span><br><span class="line">   &amp;00000000 00000000 00000000 00000100</span><br><span class="line">-----------------------------------</span><br><span class="line">00000000 00000000 00000000 00000111</span><br><span class="line">结果是：7</span><br><span class="line"></span><br><span class="line">~按位取反运算符：0变1，1变0</span><br><span class="line">00000000 00000000 00000000 00000011</span><br><span class="line">   ~11111111 11111111 11111111 11111100 (补码)</span><br><span class="line">   </span><br><span class="line">   补码：11111111 11111111 11111111 11111100</span><br><span class="line">   反码：11111111 11111111 11111111 11111011</span><br><span class="line">   原码：10000000 00000000 00000000 00000100</span><br><span class="line">结果是：-4</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="位异或运算符的特点"><a href="#位异或运算符的特点" class="headerlink" title="位异或运算符的特点"></a>位异或运算符的特点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">^的特点：一个数据对另一个数据位异或两次，该数本身不变。</span><br><span class="line">*&#x2F;</span><br><span class="line">class OperatorDemo2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int a &#x3D; 10;</span><br><span class="line">int b &#x3D; 20;</span><br><span class="line"></span><br><span class="line">System.out.println(a ^ b ^ b); &#x2F;&#x2F;10</span><br><span class="line">System.out.println(a ^ b ^ a); &#x2F;&#x2F;20</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="位运算的面试题"><a href="#位运算的面试题" class="headerlink" title="位运算的面试题"></a>位运算的面试题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">面试题：</span><br><span class="line">请自己实现两个整数变量的交换</span><br><span class="line">注意：以后讲课的过程中，我没有明确指定数据的类型，默认int类型。</span><br><span class="line">*&#x2F;</span><br><span class="line">class OperatorTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int a &#x3D; 10;</span><br><span class="line">int b &#x3D; 20;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;a:&quot;+a+&quot;,b:&quot;+b);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;方式1：使用第三方变量(开发中用的)</span><br><span class="line">&#x2F;*</span><br><span class="line">int c &#x3D; a;</span><br><span class="line">a &#x3D; b;</span><br><span class="line">b &#x3D; c;</span><br><span class="line">System.out.println(&quot;a:&quot;+a+&quot;,b:&quot;+b);</span><br><span class="line">System.out.println(&quot;------------&quot;);</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;方式2：用位异或实现(面试用)</span><br><span class="line">&#x2F;&#x2F;左边：a,b,a</span><br><span class="line">&#x2F;&#x2F;右边：a ^ b</span><br><span class="line">&#x2F;*</span><br><span class="line">a &#x3D; a ^ b;</span><br><span class="line">b &#x3D; a ^ b; &#x2F;&#x2F;a ^ b ^ b &#x3D; a</span><br><span class="line">a &#x3D; a ^ b; &#x2F;&#x2F;a ^ b ^ a &#x3D; b</span><br><span class="line">System.out.println(&quot;a:&quot;+a+&quot;,b:&quot;+b);</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;方式3：用变量相加的做法</span><br><span class="line">&#x2F;*</span><br><span class="line">a &#x3D; a + b; &#x2F;&#x2F;a&#x3D;30</span><br><span class="line">b &#x3D; a - b; &#x2F;&#x2F;b&#x3D;10</span><br><span class="line">a &#x3D; a - b; &#x2F;&#x2F;a&#x3D;20</span><br><span class="line">System.out.println(&quot;a:&quot;+a+&quot;,b:&quot;+b);</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;方式4：一句话搞定</span><br><span class="line">b &#x3D; (a+b) - (a&#x3D;b); &#x2F;&#x2F;b&#x3D;30-20&#x3D;10,a&#x3D;20</span><br><span class="line">System.out.println(&quot;a:&quot;+a+&quot;,b:&quot;+b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="位运算的基本用法2及面试题"><a href="#位运算的基本用法2及面试题" class="headerlink" title="位运算的基本用法2及面试题"></a>位运算的基本用法2及面试题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">&lt;&lt;:左移左边最高位丢弃，右边补齐0</span><br><span class="line">&gt;&gt;:右移最高位是0，左边补齐0；最高为是1，左边补齐1</span><br><span class="line">&gt;&gt;&gt;:无符号右移 无论最高位是0还是1，左边补齐0</span><br><span class="line"></span><br><span class="line">面试题：</span><br><span class="line">请用最有效率的方式写出计算2乘以8的结果?</span><br><span class="line">2 * 8</span><br><span class="line"></span><br><span class="line">2 &lt;&lt; 3</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line">class OperatorDemo3 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;&lt;&lt; 把&lt;&lt;左边的数据乘以2的移动次幂</span><br><span class="line">System.out.println(3 &lt;&lt; 2); &#x2F;&#x2F;3*2^2 &#x3D; 3*4 &#x3D; 12;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&gt;&gt; 把&gt;&gt;左边的数据除以2的移动次幂</span><br><span class="line">System.out.println(24 &gt;&gt; 2); &#x2F;&#x2F;24 &#x2F; 2^2 &#x3D; 24 &#x2F; 4 &#x3D; 6</span><br><span class="line">System.out.println(24 &gt;&gt;&gt; 2);</span><br><span class="line"></span><br><span class="line">System.out.println(-24 &gt;&gt; 2); </span><br><span class="line">System.out.println(-24 &gt;&gt;&gt; 2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">计算出3的二进制：11</span><br><span class="line">00000000 00000000 00000000 00000011</span><br><span class="line">(00)000000 00000000 00000000 0000001100</span><br><span class="line"></span><br><span class="line">&gt;&gt;的移动：</span><br><span class="line">计算出24的二进制：11000</span><br><span class="line">原码：10000000 00000000 00000000 00011000</span><br><span class="line">反码：11111111 11111111 11111111 11100111</span><br><span class="line">补码：11111111 11111111 11111111 11101000</span><br><span class="line"></span><br><span class="line">11111111 11111111 11111111 11101000</span><br><span class="line">1111111111 11111111 11111111 111010(00) 补码</span><br><span class="line"></span><br><span class="line">补码：1111111111 11111111 11111111 111010</span><br><span class="line">反码：1111111111 11111111 11111111 111001</span><br><span class="line">原码：1000000000 00000000 00000000 000110</span><br><span class="line"></span><br><span class="line">结果：-6</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;的移动：</span><br><span class="line">计算出24的二进制：11000</span><br><span class="line">原码：10000000 00000000 00000000 00011000</span><br><span class="line">反码：11111111 11111111 11111111 11100111</span><br><span class="line">补码：11111111 11111111 11111111 11101000</span><br><span class="line"></span><br><span class="line">11111111 11111111 11111111 11101000</span><br><span class="line">0011111111 11111111 11111111 111010(00)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="三元运算符的基本用法"><a href="#三元运算符的基本用法" class="headerlink" title="三元运算符的基本用法"></a>三元运算符的基本用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">单目运算符：~3</span><br><span class="line">双目运算符：3 + 4</span><br><span class="line"></span><br><span class="line">三目运算符：</span><br><span class="line">格式：比较表达式?表达式1:表达式2;</span><br><span class="line"></span><br><span class="line">比较表达式:结果是一个boolean类型。</span><br><span class="line"></span><br><span class="line">执行流程：</span><br><span class="line">根据比较表达式的计算返回一个true或者false。</span><br><span class="line">如果是true，就把表达式1作为结果。</span><br><span class="line">如果是false，就把表达式2作为结果。</span><br><span class="line">*&#x2F;</span><br><span class="line">class OperatorDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int x &#x3D; 100;</span><br><span class="line">int y &#x3D; 200;</span><br><span class="line"></span><br><span class="line">int z &#x3D; ((x &gt; y)? x: y);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;int z &#x3D; ((x &lt; y)? x: y);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;int z &#x3D; ((x &#x3D;&#x3D; y)? x: y);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;报错</span><br><span class="line">&#x2F;&#x2F;int z &#x3D; ((x &#x3D; y)? x : y);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;z:&quot;+z);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三元运算符的练习"><a href="#三元运算符的练习" class="headerlink" title="三元运算符的练习"></a>三元运算符的练习</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">练习：</span><br><span class="line">获取两个整数中的最大值</span><br><span class="line">获取三个整数中的最大值</span><br><span class="line">比较两个整数是否相同</span><br><span class="line">*&#x2F;</span><br><span class="line">class OperatorTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;获取两个整数中的最大值</span><br><span class="line">int x &#x3D; 100;</span><br><span class="line">int y &#x3D; 200;</span><br><span class="line"></span><br><span class="line">int max &#x3D; (x &gt; y? x: y);</span><br><span class="line">System.out.println(&quot;max:&quot;+max);</span><br><span class="line">System.out.println(&quot;--------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;获取三个整数中的最大值</span><br><span class="line">int a &#x3D; 10;</span><br><span class="line">int b &#x3D; 30;</span><br><span class="line">int c &#x3D; 20;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;分两步：</span><br><span class="line">&#x2F;&#x2F;A:先比较a,b的最大值</span><br><span class="line">&#x2F;&#x2F;B:拿a,b的最大值在和c进行比较</span><br><span class="line">int temp &#x3D; ((a &gt; b)? a: b);</span><br><span class="line">&#x2F;&#x2F;System.out.println(temp);</span><br><span class="line">int max1 &#x3D; (temp &gt; c? temp: c);</span><br><span class="line">System.out.println(&quot;max1:&quot;+max1);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;一步搞定</span><br><span class="line">&#x2F;&#x2F;int max2 &#x3D; (a &gt; b)?((a &gt; c)? a: c):((b &gt; c)? b: c);</span><br><span class="line">&#x2F;&#x2F;这种做法不推荐。</span><br><span class="line">&#x2F;&#x2F;int max2 &#x3D; a &gt; b?a &gt; c? a: c:b &gt; c? b: c;</span><br><span class="line">&#x2F;&#x2F;System.out.println(&quot;max2:&quot;+max2);</span><br><span class="line">System.out.println(&quot;--------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;比较两个整数是否相同</span><br><span class="line">int m &#x3D; 100;</span><br><span class="line">int n &#x3D; 200;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;boolean flag &#x3D; (m &#x3D;&#x3D; n)? true: false;</span><br><span class="line">boolean flag &#x3D; (m &#x3D;&#x3D; n);</span><br><span class="line">System.out.println(flag);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="键盘录入的基本格式讲解"><a href="#键盘录入的基本格式讲解" class="headerlink" title="键盘录入的基本格式讲解"></a>键盘录入的基本格式讲解</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">为了让程序的数据更符合开发的数据，我们就加入了键盘录入。</span><br><span class="line">让程序更灵活一下。</span><br><span class="line"></span><br><span class="line">那么，我们如何实现键盘数据的录入呢?</span><br><span class="line">A:导包</span><br><span class="line">格式：</span><br><span class="line">import java.util.Scanner; </span><br><span class="line">位置：</span><br><span class="line">在class上面。</span><br><span class="line">B:创建键盘录入对象</span><br><span class="line">格式：</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line">C:通过对象获取数据</span><br><span class="line">格式：</span><br><span class="line">int x &#x3D; sc.nextInt();</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">class ScannerDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;创建键盘录入数据对象</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请你输入一个数据：&quot;);</span><br><span class="line">int x &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;你输入的数据是：&quot;+x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="键盘录入的练习1"><a href="#键盘录入的练习1" class="headerlink" title="键盘录入的练习1"></a>键盘录入的练习1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">键盘录入练习：</span><br><span class="line">键盘录入两个数据，并对这两个数据求和，输出其结果</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">class ScannerTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;键盘录入两个数据，并对这两个数据求和，输出其结果</span><br><span class="line">&#x2F;&#x2F;创建键盘录入对象</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入第一个数据：&quot;);</span><br><span class="line">int x &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入第二个数据：&quot;);</span><br><span class="line">int y &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;把键盘录入的数据进行相加即可</span><br><span class="line">int sum &#x3D; (x + y);</span><br><span class="line">System.out.println(&quot;sum:&quot;+sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">键盘录入练习：键盘录入两个数据，获取这两个数据中的最大值</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">class ScannerTest2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;创建键盘录入对象</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入第一个数据：&quot;);</span><br><span class="line">int a &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入第二个数据：&quot;);</span><br><span class="line">int b &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;获取这两个数据中的最大值</span><br><span class="line">int max &#x3D; (a &gt; b? a: b);</span><br><span class="line">System.out.println(&quot;max:&quot;+max);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="键盘录入的练习2"><a href="#键盘录入的练习2" class="headerlink" title="键盘录入的练习2"></a>键盘录入的练习2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">练习：</span><br><span class="line">键盘录入三个数据，获取这三个数据中的最大值</span><br><span class="line">键盘录入两个数据，比较这两个数据是否相等</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">class ScannerTest3 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;键盘录入三个数据，获取这三个数据中的最大值</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;创建键盘录入对象</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入第一个数据：&quot;);</span><br><span class="line">int a &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入第二个数据：&quot;);</span><br><span class="line">int b &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入第三个数据：&quot;);</span><br><span class="line">int c &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;获取这三个数据中的最大值</span><br><span class="line">int temp &#x3D; ((a &gt; b)? a: b);</span><br><span class="line">int max &#x3D; (temp &gt; c? temp : c);</span><br><span class="line">System.out.println(&quot;max:&quot;+max);</span><br><span class="line">System.out.println(&quot;------------------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;键盘录入两个数据</span><br><span class="line">System.out.println(&quot;请输入第一个数据：&quot;);</span><br><span class="line">int x &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入第二个数据：&quot;);</span><br><span class="line">int y &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;比较这两个数据是否相等</span><br><span class="line">boolean flag &#x3D; (x &#x3D;&#x3D; y);</span><br><span class="line">System.out.println(&quot;flag:&quot;+flag);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="顺序结构语句"><a href="#顺序结构语句" class="headerlink" title="顺序结构语句"></a>顺序结构语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">流程控制语句：可以控制程序的执行流程。</span><br><span class="line"></span><br><span class="line">分类：</span><br><span class="line">顺序结构</span><br><span class="line">选择结构</span><br><span class="line">循环结构</span><br><span class="line"></span><br><span class="line">顺序结构：</span><br><span class="line">从上往下，依次执行。</span><br><span class="line">*&#x2F;</span><br><span class="line">class ShunXuJieGouDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">System.out.println(&quot;程序开始了&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;我爱Java&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;程序结束了&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择结构if语句格式1"><a href="#选择结构if语句格式1" class="headerlink" title="选择结构if语句格式1"></a>选择结构if语句格式1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">选择结构：</span><br><span class="line">if语句</span><br><span class="line">switch语句</span><br><span class="line"></span><br><span class="line">if语句：</span><br><span class="line">格式1</span><br><span class="line">格式2</span><br><span class="line">格式3</span><br><span class="line"></span><br><span class="line">if语句的格式：</span><br><span class="line">if(比较表达式) &#123;</span><br><span class="line">语句体;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行流程：</span><br><span class="line">先计算比较表达式的值，看其返回值是true还是false。</span><br><span class="line">如果是true，就执行语句体；</span><br><span class="line">如果是false，就不执行语句体；</span><br><span class="line">*&#x2F;</span><br><span class="line">class IfDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int x &#x3D; 10;</span><br><span class="line"></span><br><span class="line">if(x &#x3D;&#x3D; 10) &#123;</span><br><span class="line">System.out.println(&quot;x等于10&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(x &#x3D;&#x3D; 20) &#123;</span><br><span class="line">System.out.println(&quot;x等于20&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;over&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择结构if语句注意事项"><a href="#选择结构if语句注意事项" class="headerlink" title="选择结构if语句注意事项"></a>选择结构if语句注意事项</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">if语句的注意事项：</span><br><span class="line">A:比较表达式无论简单还是复杂，结果必须是boolean类型</span><br><span class="line">B:if语句控制的语句体如果是一条语句，大括号可以省略；</span><br><span class="line">  如果是多条语句，就不能省略。建议永远不要省略。</span><br><span class="line">C:一般来说：有左大括号就没有分号，有分号就没有左大括号</span><br><span class="line">*&#x2F;</span><br><span class="line">class IfDemo2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int x &#x3D; 10;</span><br><span class="line"></span><br><span class="line">if(x &#x3D;&#x3D; 10) &#123;</span><br><span class="line">System.out.println(&quot;x等于10&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if((x &gt; 5) || (x &#x3D;&#x3D; 10)) &#123;</span><br><span class="line">System.out.println(&quot;x大于或者等于10&quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;-------------------&quot;);</span><br><span class="line"></span><br><span class="line">int a &#x3D; 100;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">if(a &#x3D;&#x3D; 100) &#123;</span><br><span class="line">System.out.println(&quot;a的值是100&quot;);</span><br><span class="line">&#125;</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">if(a !&#x3D; 100) &#123;</span><br><span class="line">System.out.println(&quot;a的值是100&quot;);</span><br><span class="line">System.out.println(&quot;over&quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;-------------------&quot;);</span><br><span class="line"></span><br><span class="line">int b &#x3D; 100;</span><br><span class="line">if(b !&#x3D; 100);  &#x2F;&#x2F;这里其实是有语句体的，只不过是空语句体。</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;代码块</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(&quot;b的值是100&quot;);</span><br><span class="line">System.out.println(&quot;over&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择结构if语句格式2"><a href="#选择结构if语句格式2" class="headerlink" title="选择结构if语句格式2"></a>选择结构if语句格式2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">if语句格式2：</span><br><span class="line">if(比较表达式) &#123;</span><br><span class="line">语句体1;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">语句体2;</span><br><span class="line">&#125;</span><br><span class="line">执行流程：</span><br><span class="line">首先计算比较表达式的值，看其返回值是true还是false。</span><br><span class="line">如果是true，就执行语句体1；</span><br><span class="line">如果是false，就执行语句体2；</span><br><span class="line"></span><br><span class="line">注意：else后面是没有比较表达式的，只有if后面有。</span><br><span class="line">*&#x2F;</span><br><span class="line">class IfDemo3 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;判断两个数据是否相等</span><br><span class="line"></span><br><span class="line">int a &#x3D; 10;</span><br><span class="line">int b &#x3D; 20;</span><br><span class="line"></span><br><span class="line">if(a &#x3D;&#x3D; b) &#123;</span><br><span class="line">System.out.println(&quot;a等于b&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(&quot;a不等于b&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择结构if语句格式2的练习"><a href="#选择结构if语句格式2的练习" class="headerlink" title="选择结构if语句格式2的练习"></a>选择结构if语句格式2的练习</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">if语句格式2的练习：</span><br><span class="line">A:获取两个数据中较大的值</span><br><span class="line">B:判断一个数据是奇数还是偶数,并输出是奇数还是偶数</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">class IfTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;创建键盘录入对象</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;获取两个数据中较大的值</span><br><span class="line">System.out.println(&quot;请输入第一个数据：&quot;);</span><br><span class="line">int a &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入第二个数据：&quot;);</span><br><span class="line">int b &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义一个变量接收最大值</span><br><span class="line">int max;</span><br><span class="line"></span><br><span class="line">if(a &gt; b) &#123;</span><br><span class="line">max &#x3D; a;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">max &#x3D; b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;max:&quot;+max);</span><br><span class="line">System.out.println(&quot;----------------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;判断一个数据是奇数还是偶数</span><br><span class="line">System.out.println(&quot;请输入你要判断的数据：&quot;);</span><br><span class="line">int x &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">if(x%2 &#x3D;&#x3D; 0) &#123;</span><br><span class="line">System.out.println(x+&quot;这个数据是偶数&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(x+&quot;这个数据是奇数&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="if语句的格式2和三元的相互转换问题"><a href="#if语句的格式2和三元的相互转换问题" class="headerlink" title="if语句的格式2和三元的相互转换问题"></a>if语句的格式2和三元的相互转换问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">由于if语句的第二种格式刚才也完成了三元运算符可以完成的效果。</span><br><span class="line">所以，我们就认为他们可以完成一样的操作。</span><br><span class="line">但是，他们就一点区别没有吗?肯定不是。</span><br><span class="line"></span><br><span class="line">区别：</span><br><span class="line">三元运算符实现的，都可以采用if语句实现。反之不成立。</span><br><span class="line"></span><br><span class="line">什么时候if语句实现不能用三元改进呢?</span><br><span class="line">当if语句控制的操作是一个输出语句的时候就不能。</span><br><span class="line">为什么呢?因为三元运算符是一个运算符，运算符操作完毕就应该有一个结果，而不是一个输出。</span><br><span class="line">*&#x2F;</span><br><span class="line">class IfDemo4 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;获取两个数据的最大值</span><br><span class="line">int a &#x3D; 10;</span><br><span class="line">int b &#x3D; 20;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;用if语句实现</span><br><span class="line">int max1;</span><br><span class="line">if(a &gt; b) &#123;</span><br><span class="line">max1 &#x3D; a;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">max1 &#x3D; b;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;max1:&quot;+max1);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;用三元改进</span><br><span class="line">int max2 &#x3D; (a &gt; b)? a: b;</span><br><span class="line">System.out.println(&quot;max2:&quot;+max2);</span><br><span class="line">System.out.println(&quot;----------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;判断一个数据是奇数还是偶数,并输出是奇数还是偶数</span><br><span class="line">int x &#x3D; 100;</span><br><span class="line"></span><br><span class="line">if(x%2 &#x3D;&#x3D; 0) &#123;</span><br><span class="line">System.out.println(&quot;100是一个偶数&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(&quot;100是一个奇数&quot;);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;用三元改进</span><br><span class="line">&#x2F;&#x2F;这种改进是错误的。</span><br><span class="line">&#x2F;&#x2F;String s &#x3D; (x%2 &#x3D;&#x3D; 0)?System.out.println(&quot;100是一个偶数&quot;);:System.out.println(&quot;100是一个奇数&quot;);;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择结构if语句格式3"><a href="#选择结构if语句格式3" class="headerlink" title="选择结构if语句格式3"></a>选择结构if语句格式3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">if语句的格式3：</span><br><span class="line">if(比较表达式1) &#123;</span><br><span class="line">语句体1;</span><br><span class="line">&#125;else if(比较表达式2) &#123;</span><br><span class="line">语句体2;</span><br><span class="line">&#125;else if(比较表达式3) &#123;</span><br><span class="line">语句体3;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">else &#123;</span><br><span class="line">语句体n+1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行流程：</span><br><span class="line">首先计算比较表达式1看其返回值是true还是false，</span><br><span class="line">如果是true，就执行语句体1，if语句结束。</span><br><span class="line">如果是false，接着计算比较表达式2看其返回值是true还是false，</span><br><span class="line"></span><br><span class="line">如果是true，就执行语句体2，if语句结束。</span><br><span class="line">如果是false，接着计算比较表达式3看其返回值是true还是false，</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">如果都是false，就执行语句体n+1。</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">class IfDemo5 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;需求：键盘录入一个成绩，判断并输出成绩的等级。</span><br><span class="line">&#x2F;*</span><br><span class="line">90-100 优秀</span><br><span class="line">80-90  好</span><br><span class="line">70-80  良</span><br><span class="line">60-70  及格</span><br><span class="line">0-60   不及格</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;创建键盘录入对象</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;录入数据</span><br><span class="line">System.out.println(&quot;请输入你的考试成绩：&quot;);</span><br><span class="line">int score &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">if(score&gt;&#x3D;90 &amp;&amp; score&lt;&#x3D;100) &#123;</span><br><span class="line">System.out.println(&quot;优秀&quot;);</span><br><span class="line">&#125;else if(score&gt;&#x3D;80 &amp;&amp; score&lt;90) &#123;</span><br><span class="line">System.out.println(&quot;好&quot;);</span><br><span class="line">&#125;else if(score&gt;&#x3D;70 &amp;&amp; score&lt;80) &#123;</span><br><span class="line">System.out.println(&quot;良&quot;);</span><br><span class="line">&#125;else if(score&gt;&#x3D;60 &amp;&amp; score&lt;70) &#123;</span><br><span class="line">System.out.println(&quot;及格&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(&quot;不及格&quot;);</span><br><span class="line">&#125;</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F;这样写已经满足我的基本要求，但是可能别人在使用的时候，不会按照你要求的数据给出了。</span><br><span class="line">&#x2F;&#x2F;在做一个程序的基本测试的时候，一定要考虑这样的几个问题：</span><br><span class="line">&#x2F;&#x2F;正确数据，错误数据，边界数据。</span><br><span class="line">&#x2F;&#x2F;而我们刚才写的程序并没有处理错误数据，所以这个程序不是很好，要改进</span><br><span class="line">&#x2F;*</span><br><span class="line">if(score&gt;&#x3D;90 &amp;&amp; score&lt;&#x3D;100) &#123;</span><br><span class="line">System.out.println(&quot;优秀&quot;);</span><br><span class="line">&#125;else if(score&gt;&#x3D;80 &amp;&amp; score&lt;90) &#123;</span><br><span class="line">System.out.println(&quot;好&quot;);</span><br><span class="line">&#125;else if(score&gt;&#x3D;70 &amp;&amp; score&lt;80) &#123;</span><br><span class="line">System.out.println(&quot;良&quot;);</span><br><span class="line">&#125;else if(score&gt;&#x3D;60 &amp;&amp; score&lt;70) &#123;</span><br><span class="line">System.out.println(&quot;及格&quot;);</span><br><span class="line">&#125;else if(score&gt;&#x3D;0 &amp;&amp; score&lt;60)&#123;</span><br><span class="line">System.out.println(&quot;不及格&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(&quot;你输入的成绩有误&quot;);</span><br><span class="line">&#125;</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;另一种判断改进</span><br><span class="line">if(score&lt;0 || score&gt;100) &#123;</span><br><span class="line">System.out.println(&quot;你输入的成绩有误&quot;);</span><br><span class="line">&#125;else if(score&gt;&#x3D;90 &amp;&amp; score&lt;&#x3D;100) &#123;</span><br><span class="line">System.out.println(&quot;优秀&quot;);</span><br><span class="line">&#125;else if(score&gt;&#x3D;80 &amp;&amp; score&lt;90) &#123;</span><br><span class="line">System.out.println(&quot;好&quot;);</span><br><span class="line">&#125;else if(score&gt;&#x3D;70 &amp;&amp; score&lt;80) &#123;</span><br><span class="line">System.out.println(&quot;良&quot;);</span><br><span class="line">&#125;else if(score&gt;&#x3D;60 &amp;&amp; score&lt;70) &#123;</span><br><span class="line">System.out.println(&quot;及格&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(&quot;不及格&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择结构if语句格式3的练习"><a href="#选择结构if语句格式3的练习" class="headerlink" title="选择结构if语句格式3的练习"></a>选择结构if语句格式3的练习</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">键盘录入月份的值，输出对应的季节。</span><br><span class="line"></span><br><span class="line">春3,4,5</span><br><span class="line">夏6,7,8</span><br><span class="line">秋9,10,11</span><br><span class="line">冬12,1,2</span><br><span class="line"></span><br><span class="line">分析：</span><br><span class="line">A:键盘录入月份的值，所以我们要使用Scanner。</span><br><span class="line">B:我们应该判断这个月份在那个季节，而这个判断情况较多，所以，用if语句格式3。</span><br><span class="line"></span><br><span class="line">if语句的使用场景：</span><br><span class="line">A:针对表达式是一个boolean类型的判断</span><br><span class="line">B:针对一个范围的判断</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">class IfTest3 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;创建键盘录入对象</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;录入数据</span><br><span class="line">System.out.println(&quot;请你输入一个月份:&quot;);</span><br><span class="line">int month &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第三种格式实现即可</span><br><span class="line">if(month&lt;1 || month&gt;12) &#123;</span><br><span class="line">System.out.println(&quot;你输入的月份有误&quot;);</span><br><span class="line">&#125;else if(month &#x3D;&#x3D; 1) &#123;</span><br><span class="line">System.out.println(&quot;冬季&quot;);</span><br><span class="line">&#125;else if(month &#x3D;&#x3D; 2) &#123;</span><br><span class="line">System.out.println(&quot;冬季&quot;);</span><br><span class="line">&#125;else if(month &#x3D;&#x3D; 3) &#123;</span><br><span class="line">System.out.println(&quot;春季&quot;);</span><br><span class="line">&#125;else if(month &#x3D;&#x3D; 4) &#123;</span><br><span class="line">System.out.println(&quot;春季&quot;);</span><br><span class="line">&#125;else if(month &#x3D;&#x3D; 5) &#123;</span><br><span class="line">System.out.println(&quot;春季&quot;);</span><br><span class="line">&#125;else if(month &#x3D;&#x3D; 6) &#123;</span><br><span class="line">System.out.println(&quot;夏季&quot;);</span><br><span class="line">&#125;else if(month &#x3D;&#x3D; 7) &#123;</span><br><span class="line">System.out.println(&quot;夏季&quot;);</span><br><span class="line">&#125;else if(month &#x3D;&#x3D; 8) &#123;</span><br><span class="line">System.out.println(&quot;夏季&quot;);</span><br><span class="line">&#125;else if(month &#x3D;&#x3D; 9) &#123;</span><br><span class="line">System.out.println(&quot;秋季&quot;);</span><br><span class="line">&#125;else if(month &#x3D;&#x3D; 10) &#123;</span><br><span class="line">System.out.println(&quot;秋季&quot;);</span><br><span class="line">&#125;else if(month &#x3D;&#x3D; 11) &#123;</span><br><span class="line">System.out.println(&quot;秋季&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(&quot;冬季&quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;--------------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;这个程序确实是符合了我们的需求，但是就是看起来比较麻烦</span><br><span class="line">&#x2F;&#x2F;那么，我们能不能改进一下呢?</span><br><span class="line">&#x2F;&#x2F;month &#x3D;&#x3D; 3</span><br><span class="line">&#x2F;&#x2F;month &#x3D;&#x3D; 4</span><br><span class="line">&#x2F;&#x2F;month &#x3D;&#x3D; 5</span><br><span class="line">&#x2F;&#x2F;我们发现，上面三个都是春季。</span><br><span class="line">&#x2F;&#x2F;而他们本身每一个都是一个boolean表达式</span><br><span class="line">&#x2F;&#x2F;所以，我们就可以考虑使用逻辑运算符给他们连接起来改进</span><br><span class="line">if(month&lt;1 || month&gt;12) &#123;</span><br><span class="line">System.out.println(&quot;你输入的月份有误&quot;);</span><br><span class="line">&#125;else if(month&#x3D;&#x3D;3 || month&#x3D;&#x3D;4 || month&#x3D;&#x3D;5) &#123;</span><br><span class="line">System.out.println(&quot;春季&quot;);</span><br><span class="line">&#125;else if(month&#x3D;&#x3D;6 || month&#x3D;&#x3D;7 || month&#x3D;&#x3D;8) &#123;</span><br><span class="line">System.out.println(&quot;夏季&quot;);</span><br><span class="line">&#125;else if(month&#x3D;&#x3D;9 || month&#x3D;&#x3D;10 || month&#x3D;&#x3D;11) &#123;</span><br><span class="line">System.out.println(&quot;秋季&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(&quot;冬季&quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;--------------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;这个时候，程序代码以及可以了。</span><br><span class="line">&#x2F;&#x2F;但是呢，假如我要求你输入一个月份，判断是上半年还是下半年。</span><br><span class="line">&#x2F;&#x2F;这个时候，我们的判断条件连接就是6个boolean表达式</span><br><span class="line">&#x2F;&#x2F;我们可能还有更多的连接</span><br><span class="line">&#x2F;&#x2F;这个时候，其实我们还有另外的一种改进方案：</span><br><span class="line">&#x2F;&#x2F;month &#x3D;&#x3D; 3</span><br><span class="line">&#x2F;&#x2F;month &#x3D;&#x3D; 4</span><br><span class="line">&#x2F;&#x2F;month &#x3D;&#x3D; 5</span><br><span class="line">&#x2F;&#x2F;month&gt;&#x3D;3 &amp;&amp; month&lt;&#x3D;5</span><br><span class="line">&#x2F;&#x2F;用范围也是可以改进的。</span><br><span class="line">if(month&lt;1 || month&gt;12) &#123;</span><br><span class="line">System.out.println(&quot;你输入的月份有误&quot;);</span><br><span class="line">&#125;else if(month&gt;&#x3D;3 &amp;&amp; month&lt;&#x3D;5) &#123;</span><br><span class="line">System.out.println(&quot;春季&quot;);</span><br><span class="line">&#125;else if(month&gt;&#x3D;6 &amp;&amp; month&lt;&#x3D;8) &#123;</span><br><span class="line">System.out.println(&quot;夏季&quot;);</span><br><span class="line">&#125;else if(month&gt;&#x3D;9 &amp;&amp; month&lt;&#x3D;11) &#123;</span><br><span class="line">System.out.println(&quot;秋季&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(&quot;冬季&quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;--------------&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择结构if语句的嵌套使用"><a href="#选择结构if语句的嵌套使用" class="headerlink" title="选择结构if语句的嵌套使用"></a>选择结构if语句的嵌套使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">获取三个数据中的最大值</span><br><span class="line"></span><br><span class="line">由此案例主要是为了讲解if语句是可以嵌套使用的。而且是可以任意的嵌套。</span><br><span class="line">*&#x2F;</span><br><span class="line">class IfTest4 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int a &#x3D; 10;</span><br><span class="line">int b &#x3D; 30;</span><br><span class="line">int c &#x3D; 20;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;三元实现</span><br><span class="line">&#x2F;&#x2F;int temp &#x3D; (a&gt;b)? a: b;</span><br><span class="line">&#x2F;&#x2F;int max &#x3D; (temp&gt;c)? temp: c;</span><br><span class="line">&#x2F;&#x2F;System.out.println(&quot;max:&quot;+max);</span><br><span class="line">&#x2F;&#x2F;System.out.println(&quot;--------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;用if语句实现</span><br><span class="line">int max;</span><br><span class="line">if(a &gt; b) &#123;</span><br><span class="line">if(a &gt; c) &#123;</span><br><span class="line">max &#x3D; a;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">max &#x3D; c;</span><br><span class="line">&#125;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">if(b &gt; c) &#123;</span><br><span class="line">max &#x3D; b;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">max &#x3D; c;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;max:&quot;+max);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数据类型中补充的几个小问题&quot;&gt;&lt;a href=&quot;#数据类型中补充的几个小问题&quot; class=&quot;headerlink&quot; title=&quot;数据类型中补充的几个小问题&quot;&gt;&lt;/a&gt;数据类型中补充的几个小问题&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Java系统学习-JavaSE篇" scheme="https://stephencurry6666.github.io/categories/Java%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0-JavaSE%E7%AF%87/"/>
    
    
      <category term="Java系统学习" scheme="https://stephencurry6666.github.io/tags/Java%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Constructing Roads（POJ-2421）（最小生成树）</title>
    <link href="https://stephencurry6666.github.io/2020/05/12/Constructing%20Roads%EF%BC%88POJ-2421%EF%BC%89%EF%BC%88%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%EF%BC%89/"/>
    <id>https://stephencurry6666.github.io/2020/05/12/Constructing%20Roads%EF%BC%88POJ-2421%EF%BC%89%EF%BC%88%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%EF%BC%89/</id>
    <published>2020-05-12T09:21:22.967Z</published>
    <updated>2020-05-13T03:40:09.945Z</updated>
    
    <content type="html"><![CDATA[<p>There are N villages, which are numbered from 1 to N, and you should build some roads such that every two villages can connect to each other. We say two village A and B are connected, if and only if there is a road between A and B, or there exists a village C such that there is a road between A and C, and C and B are connected.</p><a id="more"></a><p>We know that there are already some roads between some villages and your job is the build some roads such that all the villages are connect and the length of all the roads built is minimum.<br>Input<br>The first line is an integer N (3 &lt;= N &lt;= 100), which is the number of villages. Then come N lines, the i-th of which contains N integers, and the j-th of these N integers is the distance (the distance should be an integer within [1, 1000]) between village i and village j.</p><p>Then there is an integer Q (0 &lt;= Q &lt;= N * (N + 1) / 2). Then come Q lines, each line contains two integers a and b (1 &lt;= a &lt; b &lt;= N), which means the road between village a and village b has been built.<br>Output<br>You should output a line contains an integer, which is the length of all the roads to be built such that all the villages are connected, and this value is minimum.<br>Sample Input<br>3<br>0 990 692</p><p>990 0 179</p><p>692 179 0</p><p>1</p><p>1 2</p><p>Sample Output<br>179</p><p><strong>题意：</strong><br><strong>要修公路，输入一个n，表示n个村庄。接着输入n*n的矩阵，该图的邻接矩阵，然后输入一个q 接下来的q行，每行包含两个数a，b，表示a、b这条边联通，就是已经有公路不用修了，要让所有村庄联通在一起问：修路最小代价是多少。</strong></p><p><strong>思路：</strong><br><strong>这道题的话，根据题目输入构造邻接矩阵，然后把已经联通的村庄的距离设置为0，表示不用在修这条公路。然后用Prim算法即可。</strong></p><p><strong>AC代码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 10010;</span><br><span class="line">const int mod &#x3D; 10007;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">const double eps &#x3D; 1e-8;</span><br><span class="line">using namespace std;</span><br><span class="line">int mapp[maxx][maxx];</span><br><span class="line">int dis[maxx];</span><br><span class="line">bool vis[maxx];</span><br><span class="line">int n;</span><br><span class="line">void Prim()</span><br><span class="line">&#123;</span><br><span class="line">    int sum &#x3D; 0;</span><br><span class="line">    int now;</span><br><span class="line">    for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dis[i] &#x3D; i;</span><br><span class="line">        vis[i] &#x3D; false;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">        dis[i] &#x3D; mapp[1][i];</span><br><span class="line">    dis[1] &#x3D; 0;</span><br><span class="line">    vis[1] &#x3D; true;</span><br><span class="line">    for (int i &#x3D; 1; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        now &#x3D; inf;</span><br><span class="line">        int minn &#x3D; inf;</span><br><span class="line">        for (int j &#x3D; 1; j &lt;&#x3D; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (!vis[j] &amp;&amp; dis[j] &lt; minn)</span><br><span class="line">            &#123;</span><br><span class="line">                now &#x3D; j;</span><br><span class="line">                minn &#x3D; dis[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(now &#x3D;&#x3D; inf)</span><br><span class="line">        break;</span><br><span class="line">        vis[now] &#x3D; true;</span><br><span class="line">        sum +&#x3D; minn;</span><br><span class="line">        for (int j &#x3D; 1; j &lt;&#x3D; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (!vis[j] &amp;&amp; dis[j] &gt; mapp[now][j])</span><br><span class="line">                dis[j] &#x3D; mapp[now][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d\n&quot;, sum);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    while (~scanf(&quot;%d&quot;, &amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">            for (int j &#x3D; 1; j &lt;&#x3D; n; j++)</span><br><span class="line">                scanf(&quot;%d&quot;, &amp;mapp[i][j]);</span><br><span class="line">        int q, a, b;</span><br><span class="line">        scanf(&quot;%d&quot;, &amp;q);</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; q; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%d%d&quot;, &amp;a, &amp;b);</span><br><span class="line">            mapp[a][b] &#x3D; mapp[b][a] &#x3D; 0;</span><br><span class="line">        &#125;</span><br><span class="line">        Prim();</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;There are N villages, which are numbered from 1 to N, and you should build some roads such that every two villages can connect to each other. We say two village A and B are connected, if and only if there is a road between A and B, or there exists a village C such that there is a road between A and C, and C and B are connected.&lt;/p&gt;
    
    </summary>
    
    
      <category term="最小生成树" scheme="https://stephencurry6666.github.io/categories/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
    
      <category term="最小生成树" scheme="https://stephencurry6666.github.io/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>QS Network（ZOJ-1586）（最小生成树）</title>
    <link href="https://stephencurry6666.github.io/2020/05/12/QS%20Network%EF%BC%88ZOJ-1586%EF%BC%89%EF%BC%88%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%EF%BC%89/"/>
    <id>https://stephencurry6666.github.io/2020/05/12/QS%20Network%EF%BC%88ZOJ-1586%EF%BC%89%EF%BC%88%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%EF%BC%89/</id>
    <published>2020-05-12T08:30:24.464Z</published>
    <updated>2020-05-12T09:24:50.592Z</updated>
    
    <content type="html"><![CDATA[<p>Sunny Cup 2003 - Preliminary Round<br>April 20th, 12:00 - 17:00</p><p>Problem E: QS Network</p><a id="more"></a><p>In the planet w-503 of galaxy cgb, there is a kind of intelligent creature named QS. QScommunicate with each other via networks. If two QS want to get connected, they need to buy two network adapters (one for each QS) and a segment of network cable. Please be advised that ONE NETWORK ADAPTER CAN ONLY BE USED IN A SINGLE CONNECTION.(ie. if a QS want to setup four connections, it needs to buy four adapters). In the procedure of communication, a QS broadcasts its message to all the QS it is connected with, the group of QS who receive the message broadcast the message to all the QS they connected with, the procedure repeats until all the QS’s have received the message.</p><p>A sample is shown below:</p><p><img src="https://vj.z180.cn/1120637f03c5c4bc9402775a6100caa8?v=1589071552" alt="tupian"></p><p>A sample QS network, and QS A want to send a message.</p><p>Step 1. QS A sends message to QS B and QS C;</p><p>Step 2. QS B sends message to QS A ; QS C sends message to QS A and QS D;</p><p>Step 3. the procedure terminates because all the QS received the message.</p><p>Each QS has its favorate brand of network adapters and always buys the brand in all of its connections. Also the distance between QS vary. Given the price of each QS’s favorate brand of network adapters and the price of cable between each pair of QS, your task is to write a program to determine the minimum cost to setup a QS network.</p><p>Input</p><p>The 1st line of the input contains an integer t which indicates the number of data sets.</p><p>From the second line there are t data sets.</p><p>In a single data set,the 1st line contains an interger n which indicates the number of QS.</p><p>The 2nd line contains n integers, indicating the price of each QS’s favorate network adapter.</p><p>In the 3rd line to the n+2th line contain a matrix indicating the price of cable between ecah pair of QS.</p><p>Constrains:</p><p>all the integers in the input are non-negative and not more than 1000.</p><p>Output</p><p>for each data set,output the minimum cost in a line. NO extra empty lines needed.</p><p>Sample Input</p><p>1</p><p>3</p><p>10 20 30</p><p>0 100 200</p><p>100 0 300</p><p>200 300 0</p><p>Sample Output</p><p>370</p><p><strong>题意：</strong><br><strong>第一行给出T，代表有T组数据。每组数据第一行给出N，代表图有N个结点。接着一行给出N个数，代表每个结点的权值（就是接收器的费用），接着N行每行N个数，矩阵的形式给出各点之间边的权值（也就是连接接收器网线的费用）。最后实际权值就是边的权值加上两个点的权值，输出最小生成树的权值总和即可。</strong></p><p><strong>思路：</strong><br><strong>这道题的话，因为输入的是矩阵，我们用Prim算法更好一些，套下模板即可。</strong></p><p><strong>AC代码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 10010;</span><br><span class="line">const int mod &#x3D; 10007;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">const double eps &#x3D; 1e-8;</span><br><span class="line">using namespace std;</span><br><span class="line">int mapp[maxx][maxx];</span><br><span class="line">int dis[maxx];</span><br><span class="line">int val[maxx];</span><br><span class="line">bool vis[maxx];</span><br><span class="line">int n;</span><br><span class="line">void Prim()</span><br><span class="line">&#123;</span><br><span class="line">    int sum &#x3D; 0;</span><br><span class="line">    int now;</span><br><span class="line">    for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dis[i] &#x3D; i;</span><br><span class="line">        vis[i] &#x3D; false;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">        dis[i] &#x3D; mapp[1][i];</span><br><span class="line">    dis[1] &#x3D; 0;</span><br><span class="line">    vis[1] &#x3D; true;</span><br><span class="line">    for (int i &#x3D; 1; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        now &#x3D; inf;</span><br><span class="line">        int minn &#x3D; inf;</span><br><span class="line">        for (int j &#x3D; 1; j &lt;&#x3D; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (!vis[j] &amp;&amp; dis[j] &lt; minn)</span><br><span class="line">            &#123;</span><br><span class="line">                now &#x3D; j;</span><br><span class="line">                minn &#x3D; dis[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (now &#x3D;&#x3D; inf)</span><br><span class="line">            break;</span><br><span class="line">        vis[now] &#x3D; true;</span><br><span class="line">        sum +&#x3D; minn;</span><br><span class="line">        for (int j &#x3D; 1; j &lt;&#x3D; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (!vis[j] &amp;&amp; dis[j] &gt; mapp[now][j])</span><br><span class="line">                dis[j] &#x3D; mapp[now][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d\n&quot;, sum);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int t;</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;t);</span><br><span class="line">    while (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf(&quot;%d&quot;, &amp;n);</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">            scanf(&quot;%d&quot;, &amp;val[i]);</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">            for (int j &#x3D; 1; j &lt;&#x3D; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                scanf(&quot;%d&quot;, &amp;mapp[i][j]);</span><br><span class="line">                mapp[i][j] +&#x3D; val[i] + val[j];</span><br><span class="line">            &#125;</span><br><span class="line">        Prim();</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Sunny Cup 2003 - Preliminary Round&lt;br&gt;April 20th, 12:00 - 17:00&lt;/p&gt;
&lt;p&gt;Problem E: QS Network&lt;/p&gt;
    
    </summary>
    
    
      <category term="最小生成树" scheme="https://stephencurry6666.github.io/categories/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
    
      <category term="最小生成树" scheme="https://stephencurry6666.github.io/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>再次温习最小生成树的一些思路</title>
    <link href="https://stephencurry6666.github.io/2020/05/12/%E5%86%8D%E6%AC%A1%E6%B8%A9%E4%B9%A0%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%B7%AF/"/>
    <id>https://stephencurry6666.github.io/2020/05/12/%E5%86%8D%E6%AC%A1%E6%B8%A9%E4%B9%A0%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%B7%AF/</id>
    <published>2020-05-12T08:30:24.464Z</published>
    <updated>2020-05-12T09:20:59.153Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>因为之前4月份打了将近一个月的个人赛，有些以前学习过的算法已经忘了，所以重新再温习一遍。</p><a id="more"></a><h2 id="关于最小生成树"><a href="#关于最小生成树" class="headerlink" title="关于最小生成树"></a>关于最小生成树</h2><p><strong>最小生成树（minimum spanning tree）是由n个顶点，n-1条边，将一个连通图连接起来，且使权值最小的结构。<br>最小生成树可以用Prim（普里姆）算法或kruskal（克鲁斯卡尔）算法求出。</strong></p><h2 id="Kruskal算法详解及模板与例题"><a href="#Kruskal算法详解及模板与例题" class="headerlink" title="Kruskal算法详解及模板与例题"></a>Kruskal算法详解及模板与例题</h2><h3 id="Kruskal算法简介"><a href="#Kruskal算法简介" class="headerlink" title="Kruskal算法简介"></a>Kruskal算法简介</h3><p><strong>Kruskal算法是基于并查集算法而进行的，很简单的思路就是，对一张图，将所有的边都拆出来，然后对每条边的边权进行排序（从大到小，从小到大看题目需要），然后再将边连回去，连边的时候判断两个点是否被连通了，如果是连通的，那么就将该边扔了再看下一条边，如果没有被连通，那么就将该条边连上，然后用并查集合并即可。</strong></p><p><strong>时间复杂度：O（NlogN）（N为边数）<br>kruskal算法又称“加边法”，用于边数较少的稀疏图<br>方法：每次找图中权值最小的边，将边连接的两个顶点加入最小生成树集合中<br>注意：相同权值任选其中一个即可，但是不允许出现闭合回路的情况。</strong></p><h3 id="Kruskal算法图解"><a href="#Kruskal算法图解" class="headerlink" title="Kruskal算法图解"></a>Kruskal算法图解</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODIwMTE1NjM2MTE3?x-oss-process=image/format,png" alt="tupian1"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODIwMTE1NjQ2MzA4?x-oss-process=image/format,png" alt="tupian2"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODIwMTE1NjU4MzI0?x-oss-process=image/format,png" alt="tupian3"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODIwMTE1NzExODQ1?x-oss-process=image/format,png" alt="tupian4"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODIwMTE1NzIzMTg5?x-oss-process=image/format,png" alt="tupian5"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODIwMTE1NzMyNjMy?x-oss-process=image/format,png" alt="tupian6"></p><h3 id="Kruskal算法代码详解及模板"><a href="#Kruskal算法代码详解及模板" class="headerlink" title="Kruskal算法代码详解及模板"></a>Kruskal算法代码详解及模板</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 200010;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">using namespace std;</span><br><span class="line">int pre[maxx];</span><br><span class="line">int n;</span><br><span class="line">struct node&#x2F;&#x2F;存边权值</span><br><span class="line">&#123;</span><br><span class="line">    int s;</span><br><span class="line">    int e;</span><br><span class="line">    int v;</span><br><span class="line">&#125; edge[maxx];</span><br><span class="line">bool cmp(node a, node b)&#x2F;&#x2F;看情况修改 优先级给小边权还是大边权</span><br><span class="line">&#123;</span><br><span class="line">    return a.v &lt; b.v;</span><br><span class="line">&#125;</span><br><span class="line">void init()&#x2F;&#x2F;初始化</span><br><span class="line">&#123;</span><br><span class="line">    for (int i &#x3D; 0; i &lt;&#x3D; n; i++)</span><br><span class="line">        pre[i] &#x3D; i;</span><br><span class="line">&#125;</span><br><span class="line">int getf(int a)&#x2F;&#x2F;并查集 看两点是否在同一个图内</span><br><span class="line">&#123;</span><br><span class="line">    if (pre[a] &#x3D;&#x3D; a)</span><br><span class="line">        return a;</span><br><span class="line">    int tmp &#x3D; getf(pre[a]);</span><br><span class="line">    return pre[a] &#x3D; tmp;</span><br><span class="line">&#125;</span><br><span class="line">int Kruskal(int a, int b) &#x2F;&#x2F;并查集合并操作，看是否在同一个图内 如果在就跳过 不在就合并</span><br><span class="line">&#123;</span><br><span class="line">    int fa &#x3D; getf(a);</span><br><span class="line">    int fb &#x3D; getf(b);</span><br><span class="line">    if (fa !&#x3D; fb)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[fa] &#x3D; fb;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">        return 0;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    while (~scanf(&quot;%d&quot;, &amp;n), n)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        int m &#x3D; (n * (n - 1)) &#x2F; 2;</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; m; i++)</span><br><span class="line">            scanf(&quot;%d%d%d&quot;, &amp;edge[i].s, &amp;edge[i].e, &amp;edge[i].v);</span><br><span class="line">        sort(edge + 1, edge + m + 1, cmp);</span><br><span class="line">        int ans &#x3D; 0;</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (Kruskal(edge[i].s, edge[i].e))</span><br><span class="line">                ans +&#x3D; edge[i].v;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%d\n&quot;, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kruskal算法例题"><a href="#Kruskal算法例题" class="headerlink" title="Kruskal算法例题"></a>Kruskal算法例题</h3><p><strong>例题一：POJ-1287</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 10010;</span><br><span class="line">const int mod &#x3D; 10007;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">const double eps &#x3D; 1e-8;</span><br><span class="line">using namespace std;</span><br><span class="line">struct node</span><br><span class="line">&#123;</span><br><span class="line">    int s;</span><br><span class="line">    int e;</span><br><span class="line">    int v;</span><br><span class="line">&#125; edge[maxx];</span><br><span class="line">bool cmp(node a, node b)</span><br><span class="line">&#123;</span><br><span class="line">    return a.v &lt; b.v;</span><br><span class="line">&#125;</span><br><span class="line">int pre[maxx];</span><br><span class="line">int n, r;</span><br><span class="line">void init()</span><br><span class="line">&#123;</span><br><span class="line">    for (int i &#x3D; 0; i &lt;&#x3D; n; i++)</span><br><span class="line">        pre[i] &#x3D; i;</span><br><span class="line">&#125;</span><br><span class="line">int getf(int a)</span><br><span class="line">&#123;</span><br><span class="line">    if (pre[a] &#x3D;&#x3D; a)</span><br><span class="line">        return a;</span><br><span class="line">    int tmp &#x3D; getf(pre[a]);</span><br><span class="line">    return pre[a] &#x3D; tmp;</span><br><span class="line">&#125;</span><br><span class="line">int Kruskal(int a, int b)</span><br><span class="line">&#123;</span><br><span class="line">    int fa &#x3D; getf(a);</span><br><span class="line">    int fb &#x3D; getf(b);</span><br><span class="line">    if (fa !&#x3D; fb)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[fa] &#x3D; fb;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">        return 0;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    while (~scanf(&quot;%d%d&quot;, &amp;n, &amp;r), n)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; r; i++)</span><br><span class="line">            scanf(&quot;%d%d%d&quot;, &amp;edge[i].s, &amp;edge[i].e, &amp;edge[i].v);</span><br><span class="line">        sort(edge + 1, edge + r + 1, cmp);</span><br><span class="line">        int ans &#x3D; 0;</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; r; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (Kruskal(edge[i].s, edge[i].e))</span><br><span class="line">                ans +&#x3D; edge[i].v;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%d\n&quot;, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prim算法详解及模板与例题"><a href="#Prim算法详解及模板与例题" class="headerlink" title="Prim算法详解及模板与例题"></a>Prim算法详解及模板与例题</h2><h3 id="Prim算法简介"><a href="#Prim算法简介" class="headerlink" title="Prim算法简介"></a>Prim算法简介</h3><p><strong>时间复杂度：O（N^2）（N为顶点数）<br>prim算法又称“加点法”，用于边数较多的带权无向连通图<br>方法：每次找与之连线权值最小的顶点，将该点加入最小生成树集合中<br>注意：相同权值任选其中一个即可，但是不允许出现闭合回路的情况。</strong></p><h3 id="Prim算法图解"><a href="#Prim算法图解" class="headerlink" title="Prim算法图解"></a>Prim算法图解</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODIwMTEzODU0ODA3?x-oss-process=image/format,png" alt="tupian1"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODIwMTEzOTA1MTQ0?x-oss-process=image/format,png" alt="tupian2"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODIwMTEzOTEzODk1?x-oss-process=image/format,png" alt="tupian3"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODIwMTEzOTIxMDQ3?x-oss-process=image/format,png" alt="tupian4"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODIwMTEzOTI5Mjcz?x-oss-process=image/format,png" alt="tupian5"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODIwMTEzOTM4NDI0?x-oss-process=image/format,png" alt="tupian6"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODIwMTEzOTQ2MTQx?x-oss-process=image/format,png" alt="tupian7"></p><h3 id="Prim算法代码详解及模板"><a href="#Prim算法代码详解及模板" class="headerlink" title="Prim算法代码详解及模板"></a>Prim算法代码详解及模板</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 210;</span><br><span class="line">const int mod &#x3D; 10007;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">const double eps &#x3D; 1e-8;</span><br><span class="line">using namespace std;</span><br><span class="line">int mapp[maxx][maxx]; &#x2F;&#x2F;存图</span><br><span class="line">int dis[maxx];        &#x2F;&#x2F;记录任意一点到这个点的最近距离</span><br><span class="line">bool vis[maxx];       &#x2F;&#x2F;用来标记0和1  表示这个点是否被选择过</span><br><span class="line">int n;</span><br><span class="line">void Prim()</span><br><span class="line">&#123;</span><br><span class="line">    int sum &#x3D; 0;</span><br><span class="line">    int now;</span><br><span class="line">    for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#x2F;&#x2F;初始化</span><br><span class="line">    &#123;</span><br><span class="line">        dis[i] &#x3D; inf;</span><br><span class="line">        vis[i] &#x3D; false;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#x2F;&#x2F;选择1为起始点，初始化</span><br><span class="line">        dis[i] &#x3D; mapp[1][i];</span><br><span class="line">    dis[1] &#x3D; 0;                 &#x2F;&#x2F;起点的上一个节点没有节点，所以为0</span><br><span class="line">    vis[1] &#x3D; true;              &#x2F;&#x2F;定义起点已经加入了最小生成树</span><br><span class="line">    for (int i &#x3D; 1; i &lt; n; i++) &#x2F;&#x2F;循环找最小边，循环n-1次</span><br><span class="line">    &#123;</span><br><span class="line">        now &#x3D; inf;</span><br><span class="line">        int minn &#x3D; inf;</span><br><span class="line">        for (int j &#x3D; 1; j &lt;&#x3D; n; j++) &#x2F;&#x2F;找dis最小的节点并加入最小生成树</span><br><span class="line">        &#123;</span><br><span class="line">            if (!vis[j] &amp;&amp; dis[j] &lt; minn)</span><br><span class="line">            &#123;</span><br><span class="line">                now &#x3D; j;&#x2F;&#x2F;找出最小的顶点</span><br><span class="line">                minn &#x3D; dis[j];&#x2F;&#x2F;找出权值最短的路径长度</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (now &#x3D;&#x3D; inf)</span><br><span class="line">            break; &#x2F;&#x2F;防止不成图</span><br><span class="line">        vis[now] &#x3D; true;</span><br><span class="line">        sum +&#x3D; minn;&#x2F;&#x2F;求和</span><br><span class="line">        for (int j &#x3D; 1; j &lt;&#x3D; n; j++) &#x2F;&#x2F;添入新点后更新最小距离</span><br><span class="line">        &#123;</span><br><span class="line">            if (!vis[j] &amp;&amp; dis[j] &gt; mapp[now][j])</span><br><span class="line">                dis[j] &#x3D; mapp[now][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d\n&quot;, sum);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    while (~scanf(&quot;%d&quot;, &amp;n), n)</span><br><span class="line">    &#123;</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#x2F;&#x2F;初始化邻接矩阵</span><br><span class="line">            for (int j &#x3D; 1; j &lt;&#x3D; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                if (i &#x3D;&#x3D; j)</span><br><span class="line">                    mapp[i][j] &#x3D; 0;</span><br><span class="line">                else</span><br><span class="line">                    mapp[i][j] &#x3D; inf;</span><br><span class="line">            &#125;</span><br><span class="line">        int a,b,c;</span><br><span class="line">        for (int i &#x3D; 1; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%d%d%d&quot;,&amp;a,&amp;b,&amp;c);</span><br><span class="line">            mapp[a][b] &#x3D; mapp[b][a] &#x3D; c;</span><br><span class="line">        &#125;</span><br><span class="line">        Prim();</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Prim算法例题"><a href="#Prim算法例题" class="headerlink" title="Prim算法例题"></a>Prim算法例题</h3><p><strong>例题一：POJ-1251</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 210;</span><br><span class="line">const int mod &#x3D; 10007;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">const double eps &#x3D; 1e-8;</span><br><span class="line">using namespace std;</span><br><span class="line">int mapp[maxx][maxx];</span><br><span class="line">int dis[maxx];</span><br><span class="line">bool vis[maxx];</span><br><span class="line">int n;</span><br><span class="line">void Prim()</span><br><span class="line">&#123;</span><br><span class="line">    int sum &#x3D; 0;</span><br><span class="line">    int now;</span><br><span class="line">    for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dis[i] &#x3D; inf;</span><br><span class="line">        vis[i] &#x3D; false;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">        dis[i] &#x3D; mapp[1][i];</span><br><span class="line">    dis[1] &#x3D; 0;</span><br><span class="line">    vis[1] &#x3D; true;</span><br><span class="line">    for (int i &#x3D; 1; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        now &#x3D; inf;</span><br><span class="line">        int minn &#x3D; inf;</span><br><span class="line">        for (int j &#x3D; 1; j &lt;&#x3D; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (!vis[j] &amp;&amp; dis[j] &lt; minn)</span><br><span class="line">            &#123;</span><br><span class="line">                now &#x3D; j;</span><br><span class="line">                minn &#x3D; dis[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (now &#x3D;&#x3D; inf)</span><br><span class="line">            break;</span><br><span class="line">        vis[now] &#x3D; true;</span><br><span class="line">        sum +&#x3D; minn;</span><br><span class="line">        for (int j &#x3D; 1; j &lt;&#x3D; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (!vis[j] &amp;&amp; dis[j] &gt; mapp[now][j])</span><br><span class="line">                dis[j] &#x3D; mapp[now][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d\n&quot;, sum);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char a, b;</span><br><span class="line">    int num1, num2;</span><br><span class="line">    int x, y;</span><br><span class="line">    while (~scanf(&quot;%d&quot;, &amp;n), n)</span><br><span class="line">    &#123;</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">            for (int j &#x3D; 1; j &lt;&#x3D; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                if (i &#x3D;&#x3D; j)</span><br><span class="line">                    mapp[i][j] &#x3D; 0;</span><br><span class="line">                else</span><br><span class="line">                    mapp[i][j] &#x3D; inf;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        for (int i &#x3D; 1; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; a &gt;&gt; num1;</span><br><span class="line">            for (int j &#x3D; 1; j &lt;&#x3D; num1; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                cin &gt;&gt; b &gt;&gt; num2;</span><br><span class="line">                x &#x3D; a - 64;</span><br><span class="line">                y &#x3D; b - 64;</span><br><span class="line">                mapp[x][y] &#x3D; mapp[y][x] &#x3D; num2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Prim();</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>例题二：Hihocoder-1097</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 10010;</span><br><span class="line">const int mod &#x3D; 10007;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">const double eps &#x3D; 1e-8;</span><br><span class="line">using namespace std;</span><br><span class="line">int mapp[maxx][maxx];</span><br><span class="line">int dis[maxx];</span><br><span class="line">bool vis[maxx];</span><br><span class="line">int n;</span><br><span class="line">void Prim()</span><br><span class="line">&#123;</span><br><span class="line">    int sum &#x3D; 0;</span><br><span class="line">    int now;</span><br><span class="line">    for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dis[i] &#x3D; inf;</span><br><span class="line">        vis[i] &#x3D; false;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">        dis[i] &#x3D; mapp[1][i];</span><br><span class="line">    dis[1] &#x3D; 0;</span><br><span class="line">    vis[1] &#x3D; true;</span><br><span class="line">    for (int i &#x3D; 1; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        now &#x3D; inf;</span><br><span class="line">        int minn &#x3D; inf;</span><br><span class="line">        for (int j &#x3D; 1; j &lt;&#x3D; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (!vis[j] &amp;&amp; dis[j] &lt; minn)</span><br><span class="line">            &#123;</span><br><span class="line">                now &#x3D; j;</span><br><span class="line">                minn &#x3D; dis[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (now &#x3D;&#x3D; inf)</span><br><span class="line">            break;</span><br><span class="line">        vis[now] &#x3D; true;</span><br><span class="line">        sum +&#x3D; minn;</span><br><span class="line">        for (int j &#x3D; 1; j &lt;&#x3D; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (!vis[j] &amp;&amp; dis[j] &gt; mapp[now][j])</span><br><span class="line">                dis[j] &#x3D; mapp[now][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d\n&quot;, sum);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    while (~scanf(&quot;%d&quot;, &amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">            for (int j &#x3D; 1; j &lt;&#x3D; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                if (i &#x3D;&#x3D; j)</span><br><span class="line">                    mapp[i][j] &#x3D; 0;</span><br><span class="line">                else</span><br><span class="line">                    mapp[i][j] &#x3D; inf;</span><br><span class="line">            &#125;</span><br><span class="line">        int a;</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">            for (int j &#x3D; 1; j &lt;&#x3D; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                scanf(&quot;%d&quot;, &amp;a);</span><br><span class="line">                if (a &lt; mapp[i][j])</span><br><span class="line">                    mapp[i][j] &#x3D; mapp[j][i] &#x3D; a;</span><br><span class="line">            &#125;</span><br><span class="line">        Prim();</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;因为之前4月份打了将近一个月的个人赛，有些以前学习过的算法已经忘了，所以重新再温习一遍。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法重温" scheme="https://stephencurry6666.github.io/categories/%E7%AE%97%E6%B3%95%E9%87%8D%E6%B8%A9/"/>
    
    
      <category term="最小生成树再温" scheme="https://stephencurry6666.github.io/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E5%86%8D%E6%B8%A9/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 625(Div.2)</title>
    <link href="https://stephencurry6666.github.io/2020/05/11/Codeforces%20625(Div.2)/"/>
    <id>https://stephencurry6666.github.io/2020/05/11/Codeforces%20625(Div.2)/</id>
    <published>2020-05-11T12:28:49.376Z</published>
    <updated>2020-05-11T12:59:49.089Z</updated>
    
    <content type="html"><![CDATA[<p><strong>A题</strong></p><p>题意：输入两组数，为1表示有该任务，0表示没有，现在由你定义每个任务的分数，使得最高分最小的情况下，第一个人的总分大于第二个人，如果无法满足，输出-1。</p><a id="more"></a><p>思路：这道题的话，先处理两个人的特有任务，如果第一个人特有的任务第二个人都有，那么一定无法满足，因为两个人任务的分数是相同的，第二个人特有的任务按照题目要求，应当为1分，第一个人的特有任务，按照第二个人特有任务的数量，平均分配即可。</p><p>AC代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 100010;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">using namespace std;</span><br><span class="line">int a[maxx];</span><br><span class="line">int b[maxx];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n;</span><br><span class="line">    while (cin &gt;&gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">            cin &gt;&gt; b[i];</span><br><span class="line">        int ans1 &#x3D; 0, ans2 &#x3D; 0;</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (a[i] + b[i] &#x3D;&#x3D; 1)</span><br><span class="line">            &#123;</span><br><span class="line">                ans1 +&#x3D; a[i];</span><br><span class="line">                ans2 +&#x3D; b[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (ans1 &#x3D;&#x3D; 0)</span><br><span class="line">            cout &lt;&lt; &quot;-1&quot; &lt;&lt; endl;</span><br><span class="line">        else</span><br><span class="line">            cout &lt;&lt; (ans1 + ans2) &#x2F; ans1 &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>B题</strong></p><p>题意 ：有n个数，对于Ai和Aj这两个数，如果满足Ai-Aj=i-j，那么两个数就可以求和，输出整个数组能够求和的最大值。</p><p>思路：这道题的话，因为每个城市有beauty值b，可以相互连通的城市i和j之间 i-j==b[i]-b[j]，所以i-b[i]==j-b[j]，所以可以连通的所有城市i-b[i]都是相等的，所以我们记录可以给到每一个差值的beauty值之和再取max就可以了。</p><p>AC代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 200010;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">using namespace std;</span><br><span class="line">unordered_map&lt;ll, ll&gt; mp;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    ll a;</span><br><span class="line">    ll ans &#x3D; -1;</span><br><span class="line">    for (ll i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a;</span><br><span class="line">        mp[a - i] +&#x3D; a;</span><br><span class="line">        ans &#x3D; max(ans, mp[a - i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>C题</strong></p><p>题意：一个字符串，如果与某个位置相邻的字母，至少有一个比该位置的字母小1，那么该位置的字母就可以删掉，剩下的字母接上来，输出对于整个字符串，最多可以删多少个字母。</p><p>思路：这道题的话，直接暴力，不难想到先删字母大的，然后再删小的可以保证删的最多，所以就从 ‘z’ 遍历到 ‘a’， 一个一个删，当前字母不能删就往前循环。</p><p>AC代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 200010;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">using namespace std;</span><br><span class="line">string s;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n;</span><br><span class="line">    while (cin &gt;&gt; n &gt;&gt; s)</span><br><span class="line">    &#123;</span><br><span class="line">        for (char i &#x3D; &#39;z&#39;; i &gt;&#x3D; &#39;b&#39;; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            if (s.size() &#x3D;&#x3D; 1)</span><br><span class="line">                break;</span><br><span class="line">            while (1)</span><br><span class="line">            &#123;</span><br><span class="line">                if (s.size() &#x3D;&#x3D; 1)</span><br><span class="line">                    break;</span><br><span class="line">                int flag &#x3D; 1;</span><br><span class="line">                for (int j &#x3D; 0; j &lt; s.size(); j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    if (s[j] !&#x3D; i)</span><br><span class="line">                        continue;</span><br><span class="line">                    if (j &#x3D;&#x3D; 0)</span><br><span class="line">                    &#123;</span><br><span class="line">                        if (s[j + 1] &#x3D;&#x3D; i - 1)</span><br><span class="line">                        &#123;</span><br><span class="line">                            flag &#x3D; 0;</span><br><span class="line">                            s.erase(s.begin() + j, s.begin() + j + 1);</span><br><span class="line">                            break;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    else if (j &#x3D;&#x3D; s.size() - 1)</span><br><span class="line">                    &#123;</span><br><span class="line">                        if (s[j - 1] &#x3D;&#x3D; i - 1)</span><br><span class="line">                        &#123;</span><br><span class="line">                            flag &#x3D; 0;</span><br><span class="line">                            s.erase(s.begin() + j, s.begin() + j + 1);</span><br><span class="line">                            break;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    else</span><br><span class="line">                    &#123;</span><br><span class="line">                        if (s[j - 1] &#x3D;&#x3D; i - 1 || s[j + 1] &#x3D;&#x3D; i - 1)</span><br><span class="line">                        &#123;</span><br><span class="line">                            flag &#x3D; 0;</span><br><span class="line">                            s.erase(s.begin() + j, s.begin() + j + 1);</span><br><span class="line">                            break;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                if (flag)</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; n - s.size() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;A题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;题意：输入两组数，为1表示有该任务，0表示没有，现在由你定义每个任务的分数，使得最高分最小的情况下，第一个人的总分大于第二个人，如果无法满足，输出-1。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CF" scheme="https://stephencurry6666.github.io/categories/CF/"/>
    
    
      <category term="CF" scheme="https://stephencurry6666.github.io/tags/CF/"/>
    
  </entry>
  
  <entry>
    <title>再次温习并查集的一些思路</title>
    <link href="https://stephencurry6666.github.io/2020/05/08/%E5%86%8D%E6%AC%A1%E6%B8%A9%E4%B9%A0%E5%B9%B6%E6%9F%A5%E9%9B%86%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%B7%AF/"/>
    <id>https://stephencurry6666.github.io/2020/05/08/%E5%86%8D%E6%AC%A1%E6%B8%A9%E4%B9%A0%E5%B9%B6%E6%9F%A5%E9%9B%86%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%B7%AF/</id>
    <published>2020-05-08T07:20:46.538Z</published>
    <updated>2020-05-11T12:48:04.355Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>因为之前4月份打了将近一个月的个人赛，有些以前学习过的算法已经忘了，所以重新再温习一遍。</p><a id="more"></a><h2 id="普通并查集"><a href="#普通并查集" class="headerlink" title="普通并查集"></a>普通并查集</h2><p><strong>并查集（Union Find）是一种树型的数据结构，用于处理一些不相交集合（Disjoint Sets）的合并及查询问题。在一些有N个元素的集合应用问题中，我们通常是在开始时让每个元素构成一个单元素的集合，然后按一定顺序将属于同一组的元素所在的集合合并，其间要反复查找一个元素在哪个集合中。</strong></p><p><strong>对于并查集的理解</strong></p><p>首先并查集是一种树型结构，树型结构，顾名思义就是存在着子节点和父节点。</p><p>所以我们先设一个数组pre[]，这个数组里面存放每个元素的父节点。然后这里借鉴大佬的例子来解释并查集的作用。</p><p>例：话说江湖上散落着各式各样的大侠，有上千个之多。他们没有什么正当职业，整天背着剑在外面走来走去，碰到和自己不是一路人的，就免不了要打一架。但大侠们有一个优点就是讲义气，绝对不打自己的朋友。而且他们信奉“朋友的朋友就是我的朋友”，只要是能通过朋友关系串联起来的，不管拐了多少个弯，都认为是自己人。这样一来，江湖上就形成了一个一个的帮派，通过两两之间的朋友关系串联起来。而不在同一个帮派的人，无论如何都无法通过朋友关系连起来，于是就可以放心往死了打。但是两个原本互不相识的人，如何判断是否属于一个朋友圈呢？</p><p>我们可以在每个朋友圈内推举出一个比较有名望的人，作为该圈子的代表人物。这样，每个圈子就可以这样命名“中国同胞队”美国同胞队”……两人只要互相对一下自己的队长是不是同一个人，就可以确定敌友关系了。</p><p>但是还有问题啊，大侠们只知道自己直接的朋友是谁，很多人压根就不认识队长要判断自己的队长是谁，只能漫无目的的通过朋友的朋友关系问下去：“你是不是队长？你是不是队长？”这样，想打一架得先问个几十年，饿都饿死了，受不了。这样一来，队长面子上也挂不住了，不仅效率太低，还有可能陷入无限循环中。于是队长下令，重新组队。队内所有人实行分等级制度，形成树状结构，我队长就是根节点，下面分别是二级队员、三级队员。每个人只要记住自己的上级是谁就行了。遇到判断敌友的时候，只要一层层向上问，直到最高层，就可以在短时间内确定队长是谁了。由于我们关心的只是两个人之间是否是一个帮派的，至于他们是如何通过朋友关系相关联的，以及每个圈子内部的结构是怎样的，甚至队长是谁，都不重要了。所以我们可以放任队长随意重新组队，只要不搞错敌友关系就好了。于是，门派产生了。</p><p><img src="https://img-blog.csdnimg.cn/20190301210948491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg0NjEzOQ==,size_16,color_FFFFFF,t_70" alt="bcj"></p><p>下面我们来看并查集的实现。 int pre[1000]; 这个数组，记录了每个大侠的上级是谁。大侠们从1或者0开始编号（依据题意而定），pre[15]=3就表示15号大侠的上级是3号大侠。如果一个人的上级就是他自己，那说明他就是掌门人了，查找到此为止。也有孤家寡人自成一派的，比如欧阳锋，那么他的上级就是他自己。每个人都只认自己的上级。比如胡青牛同学只知道自己的上级是杨左使。张无忌是谁？不认识！要想知道自己的掌门是谁，只能一级级查上去。<br>getf这个函数就是找掌门用的，意义再清楚不过了（路径压缩算法先不论，后面再说）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int getf(int a)&#x2F;&#x2F;查找根节点</span><br><span class="line">&#123;</span><br><span class="line">    if (pre[a] &#x3D;&#x3D; a)&#x2F;&#x2F;我的上级不是掌门</span><br><span class="line">        return a;</span><br><span class="line">    int tmp &#x3D; getf(pre[a]);&#x2F;&#x2F;我就找他的上级，直到掌门出现</span><br><span class="line">    return pre[a] &#x3D; tmp;&#x2F;&#x2F;掌门出现</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来看看mer函数，就是在两个点之间连一条线，这样一来，原先它们所在的两个板块的所有点就都可以互通了。这在图上很好办，画条线就行了。但我们现在是用并查集来描述武林中的状况的，一共只有一个pre[]数组，该如何实现呢？ 还是举江湖的例子，假设现在武林中的形势如图所示。虚竹帅锅与周芷若MM是我非常喜欢的两个人物，他们的终极boss分别是玄慈方丈和灭绝师太，那明显就是两个阵营了。我不希望他们互相打架，就对他俩说：“你们两位拉拉勾，做好朋友吧。”他们看在我的面子上，同意了。这一同意可非同小可，整个少林和峨眉派的人就不能打架了。这么重大的变化，可如何实现呀，要改动多少地方？其实非常简单，我对玄慈方丈说：“大师，麻烦你把你的上级改为灭绝师太吧。这样一来，两派原先的所有人员的终极boss都是师太，那还打个球啊！反正我们关心的只是连通性，门派内部的结构不要紧的。”玄慈一听肯定火大了：“我靠，凭什么是我变成她手下呀，怎么不反过来？我抗议！”于是，两人相约一战，杀的是天昏地暗，风云为之变色啊，但是啊，这场战争终究会有胜负，胜者为王。弱者就被吞并了。反正谁加入谁效果是一样的，门派就由两个变成一个了。这段函数的意思明白了吧？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void mer(int a, int b)&#x2F;&#x2F;虚竹和周芷若做朋友</span><br><span class="line">&#123;</span><br><span class="line">    int fa &#x3D; getf(a);&#x2F;&#x2F;我老大是玄慈</span><br><span class="line">    int fb &#x3D; getf(b);&#x2F;&#x2F;我老大是灭绝</span><br><span class="line">    if (fa !&#x3D; fb)</span><br><span class="line">        pre[fa] &#x3D; fb;&#x2F;&#x2F;打一仗，谁赢就当对方老大</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来看看路径压缩算法。建立门派的过程是用mer函数两个人两个人地连接起来的，谁当谁的手下完全随机。最后的树状结构会变成什么样，我也无法预知，一字长蛇阵也有可能。这样查找的效率就会比较低下。最理想的情况就是所有人的直接上级都是掌门，一共就两级结构，只要找一次就找到掌门了。哪怕不能完全做到，也最好尽量接近。这样就产生了路径压缩算法。<br>设想这样一个场景：两个互不相识的大侠碰面了，想知道能不能干一场。 于是赶紧打电话问自己的上级：“你是不是掌门？” 上级说：“我不是呀，我的上级是谁谁谁，你问问他看看。” 一路问下去，原来两人的最终boss都是东厂曹公公。 “哎呀呀，原来是自己人，有礼有礼，在下三营六组白面葫芦娃!” “幸会幸会，在下九营十八组仙子狗尾巴花！” 两人高高兴兴地手拉手喝酒去了。 “等等等等，两位大侠请留步，还有事情没完成呢！”我叫住他俩。 “哦，对了，还要做路径压缩。”两人醒悟。 白面葫芦娃打电话给他的上级六组长：“组长啊，我查过了，其实偶们的掌门是曹公公。不如偶们一起结拜在曹公公手下吧，省得级别太低，以后查找掌门麻烦。” “唔，有道理。” 白面葫芦娃接着打电话给刚才拜访过的三营长……仙子狗尾巴花也做了同样的事情。 这样，查询中所有涉及到的人物都聚集在曹公公的直接领导下。每次查询都做了优化处理，所以整个门派树的层数都会维持在比较低的水平上。路径压缩的代码，看得懂很好，看不懂可以自己模拟一下，很简单的一个递归而已。总之它所实现的功能就是这么个意思。</p><p><img src="https://img-blog.csdnimg.cn/20190301211224963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg0NjEzOQ==,size_16,color_FFFFFF,t_70" alt="aa"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int tmp &#x3D; getf(pre[a]);&#x2F;&#x2F;路径压缩</span><br><span class="line">    return pre[a] &#x3D; tmp;</span><br></pre></td></tr></table></figure><p><strong>要实现这个例子的代码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 10010;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">using namespace std;</span><br><span class="line">int pre[maxx];</span><br><span class="line">int n, m, ans;</span><br><span class="line">void init()</span><br><span class="line">&#123;</span><br><span class="line">    for (int i &#x3D; 0; i &lt;&#x3D; n; i++)</span><br><span class="line">        pre[i] &#x3D; i;</span><br><span class="line">&#125;</span><br><span class="line">int getf(int a)</span><br><span class="line">&#123;</span><br><span class="line">    if (a &#x3D;&#x3D; pre[a])</span><br><span class="line">        return a;</span><br><span class="line">    return pre[a] &#x3D; getf(pre[a]);</span><br><span class="line">&#125;</span><br><span class="line">int mer(int a, int b)</span><br><span class="line">&#123;</span><br><span class="line">    int fa &#x3D; getf(a);</span><br><span class="line">    int fb &#x3D; getf(b);</span><br><span class="line">    if (fa !&#x3D; fb)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[fa] &#x3D; fb;</span><br><span class="line">        ans--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    while (~scanf(&quot;%d%d&quot;, &amp;n, &amp;m), n)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        int a, b;</span><br><span class="line">        ans &#x3D; n - 1;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%d%d&quot;, &amp;a, &amp;b);</span><br><span class="line">            mer(a, b);</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%d\n&quot;, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="带权并查集"><a href="#带权并查集" class="headerlink" title="带权并查集"></a>带权并查集</h2><p><strong>就像名字一样，带权并查集就是要多维护一个权值数组;和普通的并查集大同小异,用pre[]数组存父节点，v存当前结点到父亲结点的权值。</strong></p><p>首先是初始化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">void init()</span><br><span class="line">&#123;</span><br><span class="line">    for (int i &#x3D; 0; i &lt;&#x3D; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[i] &#x3D; i;</span><br><span class="line">        v[i] &#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191012205623707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDc3NDU1,size_16,color_FFFFFF,t_70" alt="tu"></p><p>没有进行状态压缩的时候可以知道，pre[3]=2,pre[2]=1,pre[1]=1;v[3]=4;v[2]=3;v[1]=0;</p><p><img src="https://img-blog.csdnimg.cn/20191012205953664.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDc3NDU1,size_16,color_FFFFFF,t_70" alt="tu"></p><p>状态压缩后，pre[3]=1;v[3]=7;其他不变;所以可以得出代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int getf(int a)</span><br><span class="line">&#123;</span><br><span class="line">    if(pre[a]&#x3D;&#x3D;a)</span><br><span class="line">        return a;</span><br><span class="line">    int tmp&#x3D;getf(pre[a]);  &#x2F;&#x2F;这里不能够没有，因为在递归的过程中pre[a]的值会被改变，会影响v[a]的更新</span><br><span class="line">    v[a]&#x3D;v[a]+v[pre[a]];</span><br><span class="line">    return pre[a]&#x3D;tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而对于合并两个集合，是将元素间关系看成向量<br>我们可以列出向量图:</p><p><img src="https://img-blog.csdnimg.cn/20191012211424881.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDc3NDU1,size_16,color_FFFFFF,t_70" alt="tu"></p><p>我们假设上图中2-&gt;1表示1比2大3，同理得其他的，一开始1，2处于一个集合,3,处于另一个集合，现在要将这两个集合合并,那么1-&gt;4得权值就可以得出，根据平行四边形法则,v[1]=(-v[2]+v+v[3])=8(其中v表示3比2大多少有，也就是2-&gt;3)，就是说4比1大8，由此我们便得到了如何将两个带权集合合并。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void mer(int a, int b, int s)</span><br><span class="line">&#123;</span><br><span class="line">    int fa &#x3D; getf(a);</span><br><span class="line">    int fb &#x3D; getf(b);</span><br><span class="line">    if (fa !&#x3D; fb)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[fa] &#x3D; fb;</span><br><span class="line">        v[fa] &#x3D; -v[a] + s + v[b];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>例题一：HihoCoder-1515</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 100010;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">using namespace std;</span><br><span class="line">int pre[maxx], v[maxx];</span><br><span class="line">int n, m, q;</span><br><span class="line">int x, y, s;</span><br><span class="line">int ans;</span><br><span class="line">void init()</span><br><span class="line">&#123;</span><br><span class="line">    for (int i &#x3D; 0; i &lt;&#x3D; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[i] &#x3D; i;</span><br><span class="line">        v[i] &#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int getf(int a)</span><br><span class="line">&#123;</span><br><span class="line">    if (pre[a] &#x3D;&#x3D; a)</span><br><span class="line">        return a;</span><br><span class="line">    int tmp &#x3D; getf(pre[a]);</span><br><span class="line">    v[a] &#x3D; v[a] + v[pre[a]];</span><br><span class="line">    return pre[a] &#x3D; tmp;</span><br><span class="line">&#125;</span><br><span class="line">void mer(int a, int b, int s)</span><br><span class="line">&#123;</span><br><span class="line">    int fa &#x3D; getf(a);</span><br><span class="line">    int fb &#x3D; getf(b);</span><br><span class="line">    if (fa !&#x3D; fb)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[fa] &#x3D; fb;</span><br><span class="line">        v[fa] &#x3D; -v[a] + s + v[b];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">inline void read(T &amp;res) &#x2F;&#x2F;快速读入模板</span><br><span class="line">&#123;</span><br><span class="line">    char c;</span><br><span class="line">    T flag &#x3D; 1;</span><br><span class="line">    while ((c &#x3D; getchar()) &lt; &#39;0&#39; || c &gt; &#39;9&#39;)</span><br><span class="line">        if (c &#x3D;&#x3D; &#39;-&#39;)</span><br><span class="line">            flag &#x3D; -1;</span><br><span class="line">    res &#x3D; c - &#39;0&#39;;</span><br><span class="line">    while ((c &#x3D; getchar()) &gt;&#x3D; &#39;0&#39; &amp;&amp; c &lt;&#x3D; &#39;9&#39;)</span><br><span class="line">        res &#x3D; res * 10 + c - &#39;0&#39;;</span><br><span class="line">    res *&#x3D; flag;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    read(n), read(m), read(q);</span><br><span class="line">    init();</span><br><span class="line">    while (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        read(x), read(y), read(s);</span><br><span class="line">        mer(x, y, s);</span><br><span class="line">    &#125;</span><br><span class="line">    while (q--)</span><br><span class="line">    &#123;</span><br><span class="line">        read(x), read(y);</span><br><span class="line">        if (getf(x) &#x3D;&#x3D; getf(y))</span><br><span class="line">            printf(&quot;%d\n&quot;, v[x] - v[y]);</span><br><span class="line">        else</span><br><span class="line">            printf(&quot;-1\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>例题二：HDU-3038</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 200010;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">using namespace std;</span><br><span class="line">int pre[maxx], v[maxx];</span><br><span class="line">int n, m;</span><br><span class="line">int x, y, s;</span><br><span class="line">void init()</span><br><span class="line">&#123;</span><br><span class="line">    for (int i &#x3D; 0; i &lt;&#x3D; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[i] &#x3D; i;</span><br><span class="line">        v[i] &#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int getf(int a)</span><br><span class="line">&#123;</span><br><span class="line">    if (pre[a] &#x3D;&#x3D; a)</span><br><span class="line">        return a;</span><br><span class="line">    int tmp &#x3D; getf(pre[a]);</span><br><span class="line">    v[a] &#x3D; v[a] + v[pre[a]];</span><br><span class="line">    return pre[a] &#x3D; tmp;</span><br><span class="line">&#125;</span><br><span class="line">int mer(int a, int b, int s)</span><br><span class="line">&#123;</span><br><span class="line">    int fa &#x3D; getf(a);</span><br><span class="line">    int fb &#x3D; getf(b);</span><br><span class="line">    if (fa &#x3D;&#x3D; fb)</span><br><span class="line">        return v[a] !&#x3D; v[b] + s;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        pre[fa] &#x3D; fb;</span><br><span class="line">        v[fa] &#x3D; -v[a] + v[b] + s;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    while (~scanf(&quot;%d%d&quot;, &amp;n, &amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        int ans &#x3D; 0;</span><br><span class="line">        while (m--)</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%d%d%d&quot;, &amp;x, &amp;y, &amp;s);</span><br><span class="line">            y++;</span><br><span class="line">            if (mer(x, y, s))</span><br><span class="line">                ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%d\n&quot;, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="种类并查集"><a href="#种类并查集" class="headerlink" title="种类并查集"></a>种类并查集</h2><p><strong>种类并查集，顾名思义，在所给数据中或多或少会带有种类的区别。</strong></p><p>种类并查集延用了带权并查集的特性,还是相当于维护了一个权值，只不过这个权值带有一定的意义，拿例题“食物链”来说，我们指定x-&gt;y表示与y是x的父节点，即pre[x]=y;我们用rela[i]来表示节点i和它的父节点之间的关系，规定rela[x]=0表示x,y是同类，rela[x]=1表示y吃x，rela[x]=2表示x吃y，那么我们可以根据这些权值推断出两个结点之间实际的关系。</p><p><img src="https://img-blog.csdnimg.cn/20191022194850194.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDc3NDU1,size_16,color_FFFFFF,t_70" alt="tu"></p><p>比如现在告诉你3-&gt;1的值为1（1吃3），而2-&gt;1的值为2（2吃1），那么我们根据题意就可以得出3吃2，即2-&gt;3为1,也就得到了上图的关系。假设现在再来一句话说2吃3那么就是错的。问题是如何得到这样的关系。对于给定的x,y和它们之间的关系,我们分两种情况<br>1.假设pre[x]==pre[y]，就是说它们是一个集合的，现在的任务就是把它们推出它们之间的关系，也就是上图的情况，1为父节点，先开始的条件有3-&gt;1的为1,2-&gt;1=2，如何得到2-&gt;3=1呢？同样我们可以用向量的方法：2-&gt;3=2-&gt;1 - 1-&gt;3(添负号，箭头反向)=2-1=1；这样我们得到了2-&gt;3的值为1（这里在想一下，如果我们想得到假设之前我们已经建立了2-&gt;1的关系，现在又给出2-&gt;1的关系，如何得到到给出的关系对不对呢；我们只需要把上图的3换成1就可以了，同时3-&gt;1=1就变成了1-&gt;1=0同样的方法）<br>2.假设pre[x]!=pre[y]，x,y不在同一个集合也就是要联合x,y两个集合,已知y-&gt;x=1,x-&gt;fx=1,y-&gt;fy=0</p><p><img src="https://img-blog.csdnimg.cn/20191022200751469.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDc3NDU1,size_16,color_FFFFFF,t_70" alt="tu"></p><p>同样的用向量就可以了fy-&gt;fx=-(y-&gt;fy)+y-&gt;x+x-&gt;fx=1+1=2;(已知fx吃x，x吃y，y和fy是同类，所以由题意可知fy吃fx),这样我们就可以将两个集合联合在一起并且维护好关系。<br>值得注意的是，这些操作对向量方向的要求很高，不能弄错方向，比如联合两个集合的时候,我们求的是fy-&gt;fx，也就是fy是儿子，fx是父亲,那么我们就应该pre[fy]=fx；而不是pre[fx]=fy;同样我们求的关系是rela[fy]的值，而不是rela[fx]，如果箭头反向，这些操作都要变.</p><p><strong>给出食物链这题的代码(POJ-1182)：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 100010;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">using namespace std;</span><br><span class="line">int pre[maxx], rela[maxx];</span><br><span class="line">int n, k;</span><br><span class="line">void init()</span><br><span class="line">&#123;</span><br><span class="line">    for (int i &#x3D; 0; i &lt;&#x3D; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[i] &#x3D; i;</span><br><span class="line">        rela[i] &#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int getf(int a)</span><br><span class="line">&#123;</span><br><span class="line">    if (pre[a] &#x3D;&#x3D; a)</span><br><span class="line">        return a;</span><br><span class="line">    int tmp &#x3D; getf(pre[a]);</span><br><span class="line">    rela[a] &#x3D; (rela[a] + rela[pre[a]] + 3) % 3;</span><br><span class="line">    return pre[a] &#x3D; tmp;</span><br><span class="line">&#125;</span><br><span class="line">int mer(int c, int a, int b)</span><br><span class="line">&#123;</span><br><span class="line">    int fa &#x3D; getf(a);</span><br><span class="line">    int fb &#x3D; getf(b);</span><br><span class="line">    if (fa &#x3D;&#x3D; fb)</span><br><span class="line">    &#123;</span><br><span class="line">        if (c &#x3D;&#x3D; 1 &amp;&amp; rela[a] &#x3D;&#x3D; rela[b])</span><br><span class="line">            return 1;</span><br><span class="line">        else if (c &#x3D;&#x3D; 2 &amp;&amp; (rela[a] - rela[b] + 3) % 3 &#x3D;&#x3D; c - 1)</span><br><span class="line">            return 1;</span><br><span class="line">        else</span><br><span class="line">            return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        pre[fb] &#x3D; fa;</span><br><span class="line">        rela[fb] &#x3D; (-rela[b] + rela[a] - c + 1 + 3) % 3;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    scanf(&quot;%d%d&quot;, &amp;n, &amp;k);</span><br><span class="line">    init();</span><br><span class="line">    int d, x, y;</span><br><span class="line">    int sum &#x3D; 0;</span><br><span class="line">    while (k--)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf(&quot;%d%d%d&quot;, &amp;d, &amp;x, &amp;y);</span><br><span class="line">        if (x &gt; n || y &gt; n)</span><br><span class="line">            sum++;</span><br><span class="line">        else if (d &#x3D;&#x3D; 2 &amp;&amp; x &#x3D;&#x3D; y)</span><br><span class="line">            sum++;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            if (!mer(d, x, y))</span><br><span class="line">                sum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d\n&quot;, sum);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>例题二：POJ-1703</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 100010;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">using namespace std;</span><br><span class="line">int pre[maxx * 2];</span><br><span class="line">int n, m;</span><br><span class="line">void init()</span><br><span class="line">&#123;</span><br><span class="line">    for (int i &#x3D; 0; i &lt;&#x3D; 2 * n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[i] &#x3D; i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int getf(int a)</span><br><span class="line">&#123;</span><br><span class="line">    if (pre[a] &#x3D;&#x3D; a)</span><br><span class="line">        return a;</span><br><span class="line">    int tmp &#x3D; getf(pre[a]);</span><br><span class="line">    return pre[a] &#x3D; tmp;</span><br><span class="line">&#125;</span><br><span class="line">void mer(int a, int b)</span><br><span class="line">&#123;</span><br><span class="line">    int fa &#x3D; getf(a);</span><br><span class="line">    int fb &#x3D; getf(b);</span><br><span class="line">    if (fa !&#x3D; fb)</span><br><span class="line">        pre[fa] &#x3D; fb;</span><br><span class="line">&#125;</span><br><span class="line">int same(int a, int b)</span><br><span class="line">&#123;</span><br><span class="line">    return getf(a) &#x3D;&#x3D; getf(b);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int t;</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;t);</span><br><span class="line">    while (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf(&quot;%d%d&quot;, &amp;n, &amp;m);</span><br><span class="line">        init();</span><br><span class="line">        char s;</span><br><span class="line">        int a, b;</span><br><span class="line">        while (m--)</span><br><span class="line">        &#123;</span><br><span class="line">            getchar();</span><br><span class="line">            scanf(&quot;%c%d%d&quot;, &amp;s, &amp;a, &amp;b);</span><br><span class="line">            if (s &#x3D;&#x3D; &#39;D&#39;)</span><br><span class="line">            &#123;</span><br><span class="line">                mer(a, b + n);</span><br><span class="line">                mer(b, a + n);</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                if (same(a, b))</span><br><span class="line">                &#123;</span><br><span class="line">                    printf(&quot;In the same gang.\n&quot;);</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                else if (same(a, b + n))</span><br><span class="line">                &#123;</span><br><span class="line">                    printf(&quot;In different gangs.\n&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                else</span><br><span class="line">                &#123;</span><br><span class="line">                    printf(&quot;Not sure yet.\n&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;因为之前4月份打了将近一个月的个人赛，有些以前学习过的算法已经忘了，所以重新再温习一遍。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法重温" scheme="https://stephencurry6666.github.io/categories/%E7%AE%97%E6%B3%95%E9%87%8D%E6%B8%A9/"/>
    
    
      <category term="并查集再温" scheme="https://stephencurry6666.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%86%8D%E6%B8%A9/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE篇-Day2笔记</title>
    <link href="https://stephencurry6666.github.io/2020/05/05/JavaSE-Day(2)%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://stephencurry6666.github.io/2020/05/05/JavaSE-Day(2)%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-05-05T07:12:42.825Z</published>
    <updated>2020-05-06T08:20:56.884Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java语言基础"><a href="#Java语言基础" class="headerlink" title="Java语言基础"></a>Java语言基础</h1><h2 id="Java基础语法"><a href="#Java基础语法" class="headerlink" title="Java基础语法"></a>Java基础语法</h2><h3 id="1-关键字"><a href="#1-关键字" class="headerlink" title="1.关键字"></a>1.关键字</h3><a id="more"></a><p><strong>关键字概述：</strong><br>被Java语言赋予特定含义的单词。</p><p><strong>关键字特点：</strong><br>组成关键字的字母全部小写。</p><p><strong>注意事项：</strong><br>goto和const是保留字，在一般的高级Java编译器中，针对关键字都有特殊的颜色标记。</p><ul><li><strong>Java关键字</strong></li></ul><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1588673781789&amp;di=405fa28b84d8a8b0464f054e43655198&amp;imgtype=0&amp;src=http%3A%2F%2Fpic4.zhimg.com%2Fv2-b1d047a34f15efeabd5211fd54f73b0b_b.jpg" alt="Java关键字"></p><h3 id="2-标识符"><a href="#2-标识符" class="headerlink" title="2.标识符"></a>2.标识符</h3><p><strong>标识符概述：</strong><br>就是给类，接口，方法，变量等起名字时使用的字符序列</p><p><strong>组成规则：</strong></p><ul><li><strong>英文大小写字母</strong></li><li><strong>数字字符</strong></li><li><strong>$和_</strong></li></ul><p><strong>注意事项：</strong></p><ul><li><strong>不能以数字开头</strong></li><li><strong>不能是Java中的关键字</strong></li><li><strong>区分大小写</strong></li></ul><h3 id="3-标识符的常见命名规则"><a href="#3-标识符的常见命名规则" class="headerlink" title="3.标识符的常见命名规则"></a>3.标识符的常见命名规则</h3><p><strong>注意事项：</strong><br>见名知意</p><ul><li><strong>举例：我要定义一个学生类</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class Student &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>包：</strong><br>其实就是文件夹，用于把相同的类名进行区分，全部小写</p><ul><li><strong>单级：liuyi</strong></li><li><strong>多级：cn.itcast</strong></li></ul><p><strong>类或者接口：</strong></p><ul><li><strong>一个单词：单词的首字母必须大写,举例：Student，Dog</strong></li><li><strong>多个单词：每个单词的首字母必须大写，举例：HelloWorld，StudentName</strong></li></ul><p><strong>方法或者变量：</strong></p><ul><li><strong>一个单词：单词的首字母小写，举例：main，age</strong></li><li><strong>多个单词：从第二个单词开始，每个单词的首字母大写，举例：studentAge,showAllNames</strong></li></ul><p><strong>常量：</strong></p><ul><li><strong>一个单词组成：全部大写，举例：PI</strong></li><li><strong>多个单词组成：每个字母都大写，用_隔开，举例：STUDENT_MAX_AGE</strong></li></ul><h3 id="4-注释概述及其分类"><a href="#4-注释概述及其分类" class="headerlink" title="4.注释概述及其分类"></a>4.注释概述及其分类</h3><p><strong>注释概述：</strong><br>用于解释说明的文字</p><p><strong>Java中注释分类格式：</strong></p><ul><li><strong>单行注释：格式：//注释文字</strong></li><li><strong>多行注释：格式：/星 注释文字 星/，注意：多行不可以嵌套使用，而单行是可以的</strong></li><li><strong>文档注释：格式：/星星 注释文字 星/</strong></li></ul><h3 id="5-HelloWorld案例加入注释"><a href="#5-HelloWorld案例加入注释" class="headerlink" title="5.HelloWorld案例加入注释"></a>5.HelloWorld案例加入注释</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line"> 需求：我准备写一个java程序，把&quot;HelloWorld&quot;这句话输出在控制台</span><br><span class="line"></span><br><span class="line">分析：</span><br><span class="line">A:要写一个Java程序，必须定义类</span><br><span class="line">B:把数据能够输出，说明我们的程序是可以独立运行的，而程序要独立运行，必须定义main方法</span><br><span class="line">C:把数据输出在控制台，必须使用输出语句</span><br><span class="line">实现：</span><br><span class="line">A:java语言提供了一个关键字：class用来定义类，后面跟的是类名</span><br><span class="line">B:main方法的格式是固定的：</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">C:输出语句的格式是固定的：</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">&quot;HelloWorld&quot;这个内容是可以改变的</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;这是我的HelloWorld案例</span><br><span class="line">class HelloWorld &#123;</span><br><span class="line">&#x2F;*</span><br><span class="line">为了程序能够独立运行，定义main方法</span><br><span class="line">main方法是程序的入口</span><br><span class="line">被jvm自动调用</span><br><span class="line">*&#x2F;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">  &#x2F;&#x2F;为了把数据显示在控制台，我们就使用了输出语句</span><br><span class="line"> System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-注释的作用"><a href="#6-注释的作用" class="headerlink" title="6.注释的作用"></a>6.注释的作用</h3><p>略过，在Eclipse Jee 2018-12程序中编写Java代码时，有错误的话，编译器会提示。</p><h3 id="7-常量的概述和使用"><a href="#7-常量的概述和使用" class="headerlink" title="7.常量的概述和使用"></a>7.常量的概述和使用</h3><p><strong>常量概述：</strong><br>在程序执行的过程中其值不可以发生改变</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">    常量：</span><br><span class="line">        在程序执行过程中，其值不发生改变的量。</span><br><span class="line"></span><br><span class="line">    分类：</span><br><span class="line">        A:字面值常量</span><br><span class="line">        B:自定义常量(后面讲)</span><br><span class="line"></span><br><span class="line">    字面值常量</span><br><span class="line">        A:字符串常量  用双引号括起来的内容。</span><br><span class="line">            举例：&quot;hello&quot;,&quot;world&quot;,&quot;HelloWorld&quot;</span><br><span class="line">        B:整数常量   所有的整数</span><br><span class="line">            举例：100,200</span><br><span class="line">        C:小数常量   所有的小数</span><br><span class="line">            举例：10.23,110.11</span><br><span class="line">D:字符常量用单引号括起来的内容</span><br><span class="line">举例：&#39;a&#39;,&#39;A&#39;,&#39;0&#39;</span><br><span class="line">错误的：&#39;ab&#39;</span><br><span class="line">E:布尔常量比较特殊</span><br><span class="line">举例：true,false</span><br><span class="line">F:空常量后面讲</span><br><span class="line">举例：null</span><br><span class="line">*&#x2F;</span><br><span class="line">class ConstantDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;字符串常量的输出</span><br><span class="line">System.out.println(&quot;hello&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;整数常量的输出</span><br><span class="line">System.out.println(100);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;小数常量的输出</span><br><span class="line">System.out.println(100.10);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;字符常量的输出</span><br><span class="line">System.out.println(&#39;a&#39;);</span><br><span class="line">System.out.println(&#39;A&#39;);</span><br><span class="line">System.out.println(&#39;0&#39;);</span><br><span class="line">&#x2F;&#x2F;这个是有问题的</span><br><span class="line">&#x2F;&#x2F;System.out.println(&#39;ab&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;布尔常量的输出</span><br><span class="line">System.out.println(true);</span><br><span class="line">System.out.println(false);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-进制概述以及二进制、八进制、十六进制图解"><a href="#8-进制概述以及二进制、八进制、十六进制图解" class="headerlink" title="8.进制概述以及二进制、八进制、十六进制图解"></a>8.进制概述以及二进制、八进制、十六进制图解</h3><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1588680207620&amp;di=5dc7fbed0760175d40d1bbb10baa7b8d&amp;imgtype=0&amp;src=http%3A%2F%2Fgss0.baidu.com%2F9fo3dSag_xI4khGko9WTAnF6hhy%2Fzhidao%2Fpic%2Fitem%2Fd439b6003af33a87736ff400c45c10385343b5ae.jpg" alt="进制"></p><p><strong>二进制-&gt;八进制：</strong><br>把二进制的数据，从右开始，每三位一组合，最左边不够的时候，补0。然后，分别计算出对应的十进制数值，最后，再把每个十进制的数据组合起来，就是一个八进制数据。</p><p><strong>二进制-&gt;十六进制：</strong><br>把二进制的数据，从右开始，每四位一组合，最左边不够的时候，补0。然后，分别计算出对应的十进制数值，最后，再把每个十进制的数据组合起来，就是一个十六进制数据。</p><p><strong>规则：进制越大，表现形式越短</strong></p><h3 id="9-不同进制数据的表现形式"><a href="#9-不同进制数据的表现形式" class="headerlink" title="9.不同进制数据的表现形式"></a>9.不同进制数据的表现形式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">不同进制的数据表现：</span><br><span class="line">二进制：由0，1组成。以0b开头。</span><br><span class="line">八进制：由0,1,...7组成。以0开头。</span><br><span class="line">十进制：由0,1,...9组成。默认整数是十进制。</span><br><span class="line">十六进制：由0,1,...9,a,b,c,d,e,f(大小写均可)组成。以0x开头。</span><br><span class="line">*&#x2F;</span><br><span class="line">class JinZhiDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">System.out.println(100); &#x2F;&#x2F;十进制</span><br><span class="line"></span><br><span class="line">System.out.println(0b100); &#x2F;&#x2F;二进制</span><br><span class="line">System.out.println(0100); &#x2F;&#x2F;八进制</span><br><span class="line">System.out.println(0x100); &#x2F;&#x2F;十六进制</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-任意进制到十进制的转换"><a href="#10-任意进制到十进制的转换" class="headerlink" title="10.任意进制到十进制的转换"></a>10.任意进制到十进制的转换</h3><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1588680802524&amp;di=c3fd9ec5b2d6bae9fefda7479f3c2742&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.myexception.cn%2Fimg%2F2015%2F07%2F11%2F060509721.png" alt="转换"></p><p><strong>系数：每一个位上的数据值本身就是系数。</strong></p><p><strong>基数：x进制的基数就是x。</strong></p><p><strong>权：我们针对每一个位上的数据进行编号，从右边，并且是从0开始编号，这个编号就是该位上数据的权值。</strong></p><p><strong>PS：每一个位上的系数x基数^权次幂相加。</strong></p><h3 id="11-十进制到任意进制的转换"><a href="#11-十进制到任意进制的转换" class="headerlink" title="11.十进制到任意进制的转换"></a>11.十进制到任意进制的转换</h3><p><strong>方法：这个数对基数依次取余，将余数倒序输出，在倒序输出余数之前正序输出最后一次的商。（这个方法是很简单的一种方式，可以大大的节省时间）。</strong></p><p><strong>将十进制转成八进制：</strong><br>579 / 8 = 72　．．．3<br>72 / 8 =9　．．．0<br>9 / 8 =1　．．．1</p><p>先输出最后一次计算的商，然后倒序从下到上输出余数<br>八进制的 576 为　1103</p><h3 id="12-快速的进制转换法"><a href="#12-快速的进制转换法" class="headerlink" title="12.快速的进制转换法"></a>12.快速的进制转换法</h3><p><strong>8421码</strong></p><p><img src="https://img-blog.csdnimg.cn/20181213115022126.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjUxODA2Mg==,size_16,color_FFFFFF,t_70" alt="8421"></p><h3 id="13-原码、反码、补码的讲解"><a href="#13-原码、反码、补码的讲解" class="headerlink" title="13.原码、反码、补码的讲解"></a>13.原码、反码、补码的讲解</h3><p><strong>在探求为何机器要使用补码之前, 让我们先了解原码, 反码和补码的概念.对于一个数, 计算机要使用一定的编码方式进行存储. 原码, 反码, 补码是机器存储一个具体数字的编码方式。</strong></p><p><strong>原码：</strong><br>原码就是符号位加上真值的绝对值, 即用第一位表示符号, 其余位表示值. 比如如果是8位二进制:</p><p>[+1]原 = 0000 0001</p><p>[-1]原 = 1000 0001</p><p>第一位是符号位. 因为第一位是符号位, 所以8位二进制数的取值范围就是:[1111 1111 , 0111 1111]即[-127 , 127]，原码是人脑最容易理解和计算的表示方式。</p><p><strong>反码：</strong><br>反码的表示方法是:正数的反码是其本身；负数的反码是在其原码的基础上, 符号位不变，其余各个位取反。</p><p>[+1] = [00000001]原 = [00000001]反</p><p>[-1] = [10000001]原 = [11111110]反</p><p>可见如果一个反码表示的是负数, 人脑无法直观的看出来它的数值. 通常要将其转换成原码再计算。</p><p><strong>补码：</strong><br>补码的表示方法是:正数的补码就是其本身；负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后+1. (即在反码的基础上+1)。</p><p>[+1] = [00000001]原 = [00000001]反 = [00000001]补</p><p>[-1] = [10000001]原 = [11111110]反 = [11111111]补</p><p>对于负数, 补码表示方式也是人脑无法直观看出其数值的. 通常也需要转换成原码在计算其数值。</p><h3 id="14-变量的概述及格式"><a href="#14-变量的概述及格式" class="headerlink" title="14.变量的概述及格式"></a>14.变量的概述及格式</h3><p><strong>变量的概念：</strong></p><ul><li><p><strong>在程序执行的过程中，在某个范围内其值可以发生改变的量</strong></p></li><li><p><strong>从本质上讲，变量其实是内存中的一小块区域，使用变量名来访问这块区域，因此，每一个变量使用前必须要先申请（声明），然后必须进行赋值（填充内容），才能使用。</strong></p></li></ul><p><strong>变量定义格式：</strong></p><ul><li><strong>数据类型 变量名 = 初始化值;</strong></li></ul><p>注意：格式是固定的，记住格式，以不变应万变</p><h3 id="15-数据类型的概述和分类和定义不同数据类型的变量"><a href="#15-数据类型的概述和分类和定义不同数据类型的变量" class="headerlink" title="15.数据类型的概述和分类和定义不同数据类型的变量"></a>15.数据类型的概述和分类和定义不同数据类型的变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">数据类型：Java是一种强类型的语言，针对每一种数据都定义了明确的数据类型。</span><br><span class="line"></span><br><span class="line">数据类型分类：</span><br><span class="line">A:基本数据类型</span><br><span class="line">B:引用数据类型(类,接口,数值)</span><br><span class="line"></span><br><span class="line">基本数据类型:4类8种</span><br><span class="line">A:整数占用字节数</span><br><span class="line">byte1</span><br><span class="line">short2</span><br><span class="line">int4</span><br><span class="line">long8</span><br><span class="line"></span><br><span class="line">B:浮点数</span><br><span class="line">float 4</span><br><span class="line">double 8</span><br><span class="line"></span><br><span class="line">C:字符</span><br><span class="line">char2</span><br><span class="line">D:布尔</span><br><span class="line">boolean1</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">整数默认是int类型</span><br><span class="line">浮点数默认是double类型。</span><br><span class="line"></span><br><span class="line">长整型后缀用L或者l标记。建议使用L。</span><br><span class="line">单精度浮点数用F或者f标记。建议使用F。</span><br><span class="line">*&#x2F;</span><br><span class="line">class DataTypeDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;定义变量的格式：</span><br><span class="line">&#x2F;&#x2F;数据类型 变量名 &#x3D; 初始化值;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义一个字节变量</span><br><span class="line">byte b &#x3D; 10;</span><br><span class="line">System.out.println(10);</span><br><span class="line">System.out.println(b);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义一个短整型变量</span><br><span class="line">short s &#x3D; 100;</span><br><span class="line">System.out.println(s);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义一个整型变量</span><br><span class="line">int i &#x3D; 1000;</span><br><span class="line">System.out.println(i);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;超过了int的范围</span><br><span class="line">&#x2F;&#x2F;int j &#x3D; 1000000000000;</span><br><span class="line">long j &#x3D; 1000000000000L;</span><br><span class="line">&#x2F;&#x2F;long j &#x3D; 100L;</span><br><span class="line">System.out.println(j);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义浮点数据变量</span><br><span class="line">float f &#x3D; 12.345F;</span><br><span class="line">System.out.println(f);</span><br><span class="line"></span><br><span class="line">double d &#x3D; 12.345;</span><br><span class="line">System.out.println(d);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义字符变量</span><br><span class="line">char ch &#x3D; &#39;a&#39;;</span><br><span class="line">System.out.println(ch);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义布尔变量</span><br><span class="line">boolean flag &#x3D; true;</span><br><span class="line">System.out.println(flag);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="16-使用变量的注意事项"><a href="#16-使用变量的注意事项" class="headerlink" title="16.使用变量的注意事项"></a>16.使用变量的注意事项</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">使用变量的时候要注意的问题：</span><br><span class="line">A:作用域</span><br><span class="line">变量定义在哪个大括号内，它就在这个大括号内有效。</span><br><span class="line">并且，在同一个大括号内不能同时定义同名的变量。</span><br><span class="line"></span><br><span class="line">B:初始化值</span><br><span class="line">没有初始化值的变量不能直接使用。</span><br><span class="line">你只要在使用前给值就行，不一定非要在定义的时候立即给值。</span><br><span class="line">推荐在定义的时候给值。</span><br><span class="line"></span><br><span class="line">定义变量的格式：</span><br><span class="line">a:数据类型 变量名 &#x3D; 初始化值;</span><br><span class="line">b:数据类型 变量名;</span><br><span class="line">  变量名 &#x3D; 初始化值;</span><br><span class="line"></span><br><span class="line">C:在一行上建议只定义一个变量</span><br><span class="line">可以定义多个，但是不建议</span><br><span class="line">*&#x2F;</span><br><span class="line">class DataTypeDemo2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;定义变量</span><br><span class="line">int x &#x3D; 100;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;错误，不能有同名的</span><br><span class="line">&#x2F;&#x2F;int x &#x3D; 200;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义变量必须给值</span><br><span class="line">&#x2F;&#x2F;int y;</span><br><span class="line">&#x2F;&#x2F;System.out.println(y);</span><br><span class="line"></span><br><span class="line">int z;</span><br><span class="line">z &#x3D; 100;</span><br><span class="line">System.out.println(z);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;在一行上定义多个变量</span><br><span class="line">&#x2F;&#x2F;int a &#x3D; 10; int b &#x3D; 20; int c  &#x3D; 30;</span><br><span class="line">&#x2F;&#x2F;上面的写法可以，但是不建议。</span><br><span class="line">int a &#x3D; 10;</span><br><span class="line">int b &#x3D; 20;</span><br><span class="line">int c  &#x3D; 30;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;int d, e;</span><br><span class="line">&#x2F;&#x2F;d &#x3D; 40;</span><br><span class="line">&#x2F;&#x2F;e &#x3D; 50;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;int f,int g; &#x2F;&#x2F;错误</span><br><span class="line">&#x2F;&#x2F;int h; int i; &#x2F;&#x2F;正确</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="17-数据类型转换默认转换"><a href="#17-数据类型转换默认转换" class="headerlink" title="17.数据类型转换默认转换"></a>17.数据类型转换默认转换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">+是一个运算符(我们等会讲解)。做加法运算的。</span><br><span class="line"></span><br><span class="line">一般来说，我们在运算的时候，要求参与运算的数据类型必须一致。</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">boolean类型不能转换为其他的数据类型</span><br><span class="line"></span><br><span class="line">默认转换(从小到大的转换)</span><br><span class="line">A:byte,short,char—int—long—float—double</span><br><span class="line">B:byte,short,char相互之间不转换，他们参与运算首先转换为int类型</span><br><span class="line">*&#x2F;</span><br><span class="line">class DataTypeDemo3 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;直接输出的方式做加法</span><br><span class="line">&#x2F;&#x2F;System.out.println(3 + 4);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;两个int类型做加法</span><br><span class="line">int x &#x3D; 3;</span><br><span class="line">int y &#x3D; 4;</span><br><span class="line">int z &#x3D; x + y;</span><br><span class="line">System.out.println(z);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义一个byte类型，一个int类型，做加法</span><br><span class="line">byte a &#x3D; 3;</span><br><span class="line">int b &#x3D; 4;</span><br><span class="line">System.out.println(a + b);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;可能损失精度</span><br><span class="line">&#x2F;&#x2F;byte c &#x3D;  a + b;</span><br><span class="line">int c &#x3D; a + b;</span><br><span class="line">System.out.println(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="18-数据类型转换强制转换"><a href="#18-数据类型转换强制转换" class="headerlink" title="18.数据类型转换强制转换"></a>18.数据类型转换强制转换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">强制转换：</span><br><span class="line">从大的数据类型到小的数据类型。</span><br><span class="line"></span><br><span class="line">格式：</span><br><span class="line">目标数据类型 变量 &#x3D; (目标数据类型) (被转换的数据);</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">不要随意的去使用强制转换，因为它隐含了精度损失问题。</span><br><span class="line">*&#x2F;</span><br><span class="line">class DataTypeDemo4 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">byte a &#x3D; 3;</span><br><span class="line">int b &#x3D; 4;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;这个肯定没有问题</span><br><span class="line">&#x2F;&#x2F;int c &#x3D; a + b;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;byte c &#x3D; 7;</span><br><span class="line">&#x2F;&#x2F;这个是有问题的</span><br><span class="line">&#x2F;&#x2F;byte c &#x3D; a + b; </span><br><span class="line">&#x2F;&#x2F;用强制类型转换改进</span><br><span class="line">byte c &#x3D; (byte) (a + b);</span><br><span class="line">System.out.println(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="19-强制转换的思考题"><a href="#19-强制转换的思考题" class="headerlink" title="19.强制转换的思考题"></a>19.强制转换的思考题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">思考题1：请问下面这个有没有问题</span><br><span class="line">double d &#x3D; 12.345;</span><br><span class="line">float f &#x3D; d;</span><br><span class="line"></span><br><span class="line">思考题2：看看下面两个定义有没有区别呢?</span><br><span class="line">float f1 &#x3D; (float)12.345;</span><br><span class="line">float f2 &#x3D; 12.345f;</span><br><span class="line"></span><br><span class="line">f1其实是通过一个double类型转换过来的。</span><br><span class="line">而f2本身就是一个float类型。</span><br><span class="line">*&#x2F;</span><br><span class="line">class DataTypeDemo5 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;把double赋值给float，加了强制类型转换</span><br><span class="line">double d &#x3D; 12.345;</span><br><span class="line">float f &#x3D; (float)d;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;看看下面两个定义有没有区别呢?</span><br><span class="line">float f1 &#x3D; (float)12.345;</span><br><span class="line">float f2 &#x3D; 12.345F;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="20-变量相加和常量相加的面试题"><a href="#20-变量相加和常量相加的面试题" class="headerlink" title="20.变量相加和常量相加的面试题"></a>20.变量相加和常量相加的面试题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">面试题：</span><br><span class="line">byte b1&#x3D;3,b2&#x3D;4,b;</span><br><span class="line">b&#x3D;b1+b2;</span><br><span class="line">b&#x3D;3+4;</span><br><span class="line">哪句是编译失败的呢？为什么呢？</span><br><span class="line">b &#x3D; b1 + b2;是有问题的。</span><br><span class="line">因为变量相加，会首先看类型问题，最终把结果赋值的也会考虑类型问题。</span><br><span class="line">常量相加，首先做加法，然后看结果是否在赋值的数据类型范围内，如果不是，才报错。</span><br><span class="line">*&#x2F;</span><br><span class="line">class DataTypeDemo6 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;定义了三个byte类型的变量，b1，b2，b3</span><br><span class="line">&#x2F;&#x2F;b1的值是3，b2的值是4，b没有值</span><br><span class="line">byte b1 &#x3D; 3,b2 &#x3D; 4,b;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;b &#x3D; b1 + b2; &#x2F;&#x2F;这个是类型提升，所以有问题</span><br><span class="line"></span><br><span class="line">b &#x3D; 3 + 4; &#x2F;&#x2F;常量，先把结果计算出来，然后看是否在byte的范围内，如果在就不报错。</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="21-强制转换数据溢出后的结果怎么算"><a href="#21-强制转换数据溢出后的结果怎么算" class="headerlink" title="21.强制转换数据溢出后的结果怎么算"></a>21.强制转换数据溢出后的结果怎么算</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">byte b &#x3D; 130;有没有问题?如果我想让赋值正确，可以怎么做?结果是多少呢?</span><br><span class="line"></span><br><span class="line">练习：byte b &#x3D; (byte)300;</span><br><span class="line">*&#x2F;</span><br><span class="line">class DataTypeDemo7 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;因为byte的范围是：-128到127。</span><br><span class="line">&#x2F;&#x2F;而130不在此范围内，所以报错。</span><br><span class="line">&#x2F;&#x2F;byte b &#x3D; 130; </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;我们可以使用强制类型转换</span><br><span class="line">byte b &#x3D; (byte) 130;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;结果是多少呢?</span><br><span class="line">System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">分析过程：</span><br><span class="line">我们要想知道结果是什么，就应该知道是如何进行计算的。</span><br><span class="line">而我们又知道计算机中数据的运算都是补码进行的。</span><br><span class="line">而要得到补码，首先要计算出数据的二进制。</span><br><span class="line"></span><br><span class="line">A:获取130这个数据的二进制。</span><br><span class="line">00000000 00000000 00000000 10000010</span><br><span class="line">这是130的原码，也是反码，还是补码。</span><br><span class="line">B:做截取操作，截成byte类型的了。</span><br><span class="line">10000010 </span><br><span class="line">这个结果是补码。</span><br><span class="line">C:已知补码求原码。</span><br><span class="line">符号位数值位</span><br><span class="line">补码：10000010</span><br><span class="line"></span><br><span class="line">反码：10000001</span><br><span class="line"></span><br><span class="line">原码：11111110</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="22-字符数据参与运算"><a href="#22-字符数据参与运算" class="headerlink" title="22.字符数据参与运算"></a>22.字符数据参与运算</h3><p><strong>常用字符与ASCII代码对照表</strong></p><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1588762945712&amp;di=15da2d4da03c11464b6f7ef905bd8194&amp;imgtype=0&amp;src=http%3A%2F%2Faliyunzixunbucket.oss-cn-beijing.aliyuncs.com%2Fjpg%2F5802ba54ea55b831c41d5a4b5b13e641.jpg%3Fx-oss-process%3Dimage%2Fresize%2Cp_100%2Fauto-orient%2C1%2Fquality%2Cq_90%2Fformat%2Cjpg%2Fwatermark%2Cimage_eXVuY2VzaGk%3D%2Ct_100" alt="ACSII"></p><h3 id="23-字符串参与运算"><a href="#23-字符串参与运算" class="headerlink" title="23.字符串参与运算"></a>23.字符串参与运算</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">看程序写结果</span><br><span class="line">字符串数据和其他数据做+，结果是字符串类型。</span><br><span class="line">这里的+不是加法运算，而是字符串连接符。</span><br><span class="line">*&#x2F;</span><br><span class="line">class DataTypeDemo9 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">System.out.println(&quot;hello&quot;+&#39;a&#39;+1); &#x2F;&#x2F;helloa1，因为有优先级</span><br><span class="line">System.out.println(&#39;a&#39;+1+&quot;hello&quot;); &#x2F;&#x2F;98hello</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;5+5&#x3D;&quot;+5+5); &#x2F;&#x2F;5+5&#x3D;55</span><br><span class="line">System.out.println(5+5+&quot;&#x3D;5+5&quot;); &#x2F;&#x2F;10&#x3D;5+5</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运算符优先级</strong></p><p><img src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=807700448,2127105133&amp;fm=26&amp;gp=0.jpg" alt="运算符优先级"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java语言基础&quot;&gt;&lt;a href=&quot;#Java语言基础&quot; class=&quot;headerlink&quot; title=&quot;Java语言基础&quot;&gt;&lt;/a&gt;Java语言基础&lt;/h1&gt;&lt;h2 id=&quot;Java基础语法&quot;&gt;&lt;a href=&quot;#Java基础语法&quot; class=&quot;headerlink&quot; title=&quot;Java基础语法&quot;&gt;&lt;/a&gt;Java基础语法&lt;/h2&gt;&lt;h3 id=&quot;1-关键字&quot;&gt;&lt;a href=&quot;#1-关键字&quot; class=&quot;headerlink&quot; title=&quot;1.关键字&quot;&gt;&lt;/a&gt;1.关键字&lt;/h3&gt;
    
    </summary>
    
    
      <category term="Java系统学习-JavaSE篇" scheme="https://stephencurry6666.github.io/categories/Java%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0-JavaSE%E7%AF%87/"/>
    
    
      <category term="Java系统学习" scheme="https://stephencurry6666.github.io/tags/Java%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE篇-Day1笔记</title>
    <link href="https://stephencurry6666.github.io/2020/05/04/JavaSE-Day(1)%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://stephencurry6666.github.io/2020/05/04/JavaSE-Day(1)%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-05-04T13:40:32.213Z</published>
    <updated>2020-05-04T14:04:49.354Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、计算机基础"><a href="#一、计算机基础" class="headerlink" title="一、计算机基础"></a>一、计算机基础</h2><h3 id="1-计算机概述"><a href="#1-计算机概述" class="headerlink" title="1.计算机概述"></a>1.计算机概述</h3><p>  <strong>计算机全称为：电子计算机，俗称电脑</strong></p><a id="more"></a><h3 id="2-计算机硬件和软件概述"><a href="#2-计算机硬件和软件概述" class="headerlink" title="2.计算机硬件和软件概述"></a>2.计算机硬件和软件概述</h3><ul><li><strong>计算机硬件是指计算机系统中由电子，机械和光电元件等组成的各种物理装置的总称。</strong></li><li><strong>计算机软件是指使用计算机过程中必不可少的东西，计算机软件可以使家算计按照事先预定好的顺序完成特定的功能，计算机软件按照其功能划分为系统软件和应用软件。</strong></li></ul><h3 id="3-软件开发和计算机语言概述"><a href="#3-软件开发和计算机语言概述" class="headerlink" title="3.软件开发和计算机语言概述"></a>3.软件开发和计算机语言概述</h3><ul><li><strong>软件开发：借助开发工具与计算机语言制作软件。</strong></li><li><strong>计算机语言：人与计算机之间进行信息交流沟通的一种特殊语言。</strong></li><li><strong>常见的计算机语言如C，C++，C#，JAVA，python。</strong></li></ul><h3 id="4-人机交互"><a href="#4-人机交互" class="headerlink" title="4.人机交互"></a>4.人机交互</h3><p>   <strong>交互方式：</strong></p><ul><li><strong>图形化界面：这种方式简单直观，使用者易于接受，容易操作上手。</strong></li><li><strong>命令性方式：需要一个控制台，输入特定的指令，让计算机完成一些操作。较为麻烦。需要记录住一些命令。</strong></li></ul><h3 id="5-键盘功能键和快捷键"><a href="#5-键盘功能键和快捷键" class="headerlink" title="5.键盘功能键和快捷键"></a>5.键盘功能键和快捷键</h3><p>   <strong>应该记住一些简单的功能键和快捷键</strong></p><ul><li><strong>Tab 缩进空格</strong></li><li><strong>Enter 回车</strong></li><li><strong>Window键</strong></li><li><strong>Ctrl+A全选 Ctrl+C 复制 Ctrl+V 粘贴 Ctrl+X剪切 Ctrl+Z 撤销 Ctrl+S 保存</strong></li></ul><h3 id="6-如何打开DOS控制台"><a href="#6-如何打开DOS控制台" class="headerlink" title="6.如何打开DOS控制台"></a>6.如何打开DOS控制台</h3><p>   <strong>Windows+R -&gt; cmd -&gt; 回车</strong></p><h3 id="7-常见的DOS讲解"><a href="#7-常见的DOS讲解" class="headerlink" title="7.常见的DOS讲解"></a>7.常见的DOS讲解</h3><ul><li><strong>d: +回车   盘符切换</strong></li><li><strong>dir(directory):   列出当前目录下的文件以及文件夹</strong></li><li><strong>md(make directory):    创建目录</strong></li><li><strong>rd(remove directory):   删除目录</strong></li><li><strong>cd(change directory):   改变指定目录（进入指定目录）</strong></li><li><strong>cd..:     退回上级目录</strong></li><li><strong>cd\:     退回根目录</strong></li><li><strong>exit:     推出dos命令行</strong></li><li><strong>cls(clear screen):    清屏</strong></li><li><strong>del(delete):   删除文件，删除一堆后缀名一样的文件，例如.txt</strong></li></ul><h2 id="二、Java语言基础"><a href="#二、Java语言基础" class="headerlink" title="二、Java语言基础"></a>二、Java语言基础</h2><h3 id="1-Java语言概述"><a href="#1-Java语言概述" class="headerlink" title="1.Java语言概述"></a>1.Java语言概述</h3><p><strong>Java语言由詹姆斯.高斯林发明</strong></p><h3 id="2-Java语言跨平台原理"><a href="#2-Java语言跨平台原理" class="headerlink" title="2.Java语言跨平台原理"></a>2.Java语言跨平台原理</h3><p><strong>Java是面向对象的语言，其重点特点是开源和跨平台</strong></p><p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=52291647,1781400255&amp;fm=15&amp;gp=0.jpg" alt="Java语言的跨平台性"></p><h3 id="3-JDK与JRE的概述"><a href="#3-JDK与JRE的概述" class="headerlink" title="3.JDK与JRE的概述"></a>3.JDK与JRE的概述</h3><p><strong>JRE -&gt; Java运行环境</strong></p><p><strong>JDK -&gt; Java开发工具包，其中包含了JRE</strong></p><p><strong>简单而言：使用JDK开发完成的java程序，交给JRE去运行</strong></p><h3 id="4-JDK的下载、安装和卸载"><a href="#4-JDK的下载、安装和卸载" class="headerlink" title="4.JDK的下载、安装和卸载"></a>4.JDK的下载、安装和卸载</h3><p><strong>详情请看：<a href="https://blog.csdn.net/nuoyanli/article/details/86513950" target="_blank" rel="noopener">https://blog.csdn.net/nuoyanli/article/details/86513950</a></strong></p><h3 id="5-Java环境变量的配置"><a href="#5-Java环境变量的配置" class="headerlink" title="5.Java环境变量的配置"></a>5.Java环境变量的配置</h3><p><strong>详情请看：<a href="https://blog.csdn.net/nuoyanli/article/details/86513950" target="_blank" rel="noopener">https://blog.csdn.net/nuoyanli/article/details/86513950</a></strong></p><h3 id="6-第一个Java案例的编写和运行"><a href="#6-第一个Java案例的编写和运行" class="headerlink" title="6.第一个Java案例的编写和运行"></a>6.第一个Java案例的编写和运行</h3><p><strong>视频里老师用的是记事本进行编写和运行，而我用的是Eclipse Jee 2018-12</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import java.util.*;</span><br><span class="line">import java.math.*;</span><br><span class="line">import java.io.*;</span><br><span class="line">public class Main &#123;</span><br><span class="line"></span><br><span class="line"> public static void main(String[] args) &#123;</span><br><span class="line">  &#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">        System.out.println(&quot;Hello world&quot;);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、计算机基础&quot;&gt;&lt;a href=&quot;#一、计算机基础&quot; class=&quot;headerlink&quot; title=&quot;一、计算机基础&quot;&gt;&lt;/a&gt;一、计算机基础&lt;/h2&gt;&lt;h3 id=&quot;1-计算机概述&quot;&gt;&lt;a href=&quot;#1-计算机概述&quot; class=&quot;headerlink&quot; title=&quot;1.计算机概述&quot;&gt;&lt;/a&gt;1.计算机概述&lt;/h3&gt;&lt;p&gt;  &lt;strong&gt;计算机全称为：电子计算机，俗称电脑&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java系统学习-JavaSE篇" scheme="https://stephencurry6666.github.io/categories/Java%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0-JavaSE%E7%AF%87/"/>
    
    
      <category term="Java系统学习" scheme="https://stephencurry6666.github.io/tags/Java%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Java系统学习规划(1)——JavaSE篇</title>
    <link href="https://stephencurry6666.github.io/2020/05/04/Java%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%92(1)%E2%80%94JavaSE%E7%AF%87/"/>
    <id>https://stephencurry6666.github.io/2020/05/04/Java%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%92(1)%E2%80%94JavaSE%E7%AF%87/</id>
    <published>2020-05-04T09:55:56.852Z</published>
    <updated>2020-05-04T13:44:29.027Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p><strong>关于为什么要在现在系统的学习Java，是因为我觉得去年暑假学习的一些Java知识基本都忘记了(<del>其实是因为今年疫情影响，很大概率原地退役，所以也算为以后做做准备</del>)</strong></p><a id="more"></a><h2 id="Java系统学习规划-1"><a href="#Java系统学习规划-1" class="headerlink" title="Java系统学习规划(1)"></a>Java系统学习规划(1)</h2><h3 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h3><p><strong>选择什么课程：这里的话我是选择了刘意老师的深入浅出精华版为主，毕向东老师的Java基础教程为辅来进行学习。</strong></p><p>这里给出刘意老师视频的B站地址：<a href="https://www.bilibili.com/video/BV1Jt411w7fR?from=search&amp;seid=5273427619493979344" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1Jt411w7fR?from=search&amp;seid=5273427619493979344</a></p><p>这里给出毕向东老师视频的B站地址：<a href="https://www.bilibili.com/video/BV1pt41127na?from=search&amp;seid=9126689322584219690" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1pt41127na?from=search&amp;seid=9126689322584219690</a></p><h3 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h3><p><strong>学习重点参考</strong> </p><p>初学者也容易想走捷径。我相信很多人都会有这个想法：能不能只学工作上要用的？根本原因是知识点真的太多了。以刘意老师视频为例，面向对象（封装，继承，多态），异常，多线程，集合框架，IO，网络编程都挺难的。其中面向对象是JavaSE的重中之重，里面的知识点个人认为是最难的。后面的知识点都是建立在这之上展开的，没学好面向对象，后面就会稀里糊涂。当然，也不是真的一点都不能跳，但最好完整地学下来。按照后面JavaWeb的学习来看，我的建议是：</p><ul><li><strong>面向对象是基石，JavaSE中最重要的一是集合，二是IO，</strong> 希望大家学习这两个知识点时认真对待，多敲代码，多思考。</li><li><strong>常用API里，String及其相关类StringBuilder, StringBuffer</strong> 等必须熟悉，后面会不断用到。不学好的话，后面怎么死都不知道！</li><li><strong>泛型一般只出现在集合中</strong> ，个人觉得如果一时无法掌握，那么<strong>暂时会在集合中使用泛型就行了。</strong></li><li>反射对于初学者来说是<strong>非常抽象的！！</strong> 但它又无比重要。它虽然不是JavaSE的重点，但是<strong>它是JavaWeb很多难点的底层支撑，不懂反射，寸步难行。</strong></li></ul><p><strong>重点</strong></p><ul><li>面向对象☆☆☆☆☆</li><li>集合☆☆☆☆☆</li><li>IO ☆☆☆☆☆</li><li>String/StringBuffer/StringBuilder ☆☆☆☆☆</li><li>反射☆☆☆☆☆</li><li>泛型☆☆☆☆</li></ul><p><strong>熟悉</strong></p><ul><li>异常</li><li>多线程</li></ul><p><strong>先过一遍</strong></p><ul><li>网络编程</li><li>正则表达式</li></ul><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p><strong>这里给出刘意老师视频的配套资料</strong></p><p>2015年版本刘意Java基础配套资料：<a href="https://pan.baidu.com/s/13slfA9U23PiXca_ROPC0ww" target="_blank" rel="noopener">https://pan.baidu.com/s/13slfA9U23PiXca_ROPC0ww</a>   提取码：rmkv</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;关于为什么要在现在系统的学习Java，是因为我觉得去年暑假学习的一些Java知识基本都忘记了(&lt;del&gt;其实是因为今年疫情影响，很大概率原地退役，所以也算为以后做做准备&lt;/del&gt;)&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java系统学习-JavaSE篇" scheme="https://stephencurry6666.github.io/categories/Java%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0-JavaSE%E7%AF%87/"/>
    
    
      <category term="Java系统学习" scheme="https://stephencurry6666.github.io/tags/Java%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="https://stephencurry6666.github.io/2020/04/30/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>https://stephencurry6666.github.io/2020/04/30/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-04-30T10:50:48.798Z</published>
    <updated>2020-05-01T01:56:59.839Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hexo的一些语法"><a href="#Hexo的一些语法" class="headerlink" title="Hexo的一些语法"></a>Hexo的一些语法</h2><h3 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">**hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&#39;ctrl + c&#39;关闭server）</span><br><span class="line">hexo deploy #部署到GitHub</span><br><span class="line">hexo help  # 查看帮助</span><br><span class="line">hexo version  #查看Hexo的版本**</span><br><span class="line">hexo clean  #清除缓存文件和静态文件</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n &#x3D;&#x3D; hexo new</span><br><span class="line">hexo g &#x3D;&#x3D; hexo generate</span><br><span class="line">hexo s &#x3D;&#x3D; hexo server</span><br><span class="line">hexo d &#x3D;&#x3D; hexo deploy</span><br></pre></td></tr></table></figure><h3 id="组合命令"><a href="#组合命令" class="headerlink" title="组合命令"></a>组合命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo s -g #生成并本地预览</span><br><span class="line">hexo d -g #生成并上传</span><br></pre></td></tr></table></figure><h3 id="在生成一篇新的博客的一些操作"><a href="#在生成一篇新的博客的一些操作" class="headerlink" title="在生成一篇新的博客的一些操作"></a>在生成一篇新的博客的一些操作</h3><p><strong>首先：hexo new/n + 博客标题(标题需加双引号)<br>然后：运行后会自动生成markdown格式的文章<br>然后：按创建成功后的提示信息（路径）进入到该文件所在的目录中，将md后缀的文件在Visual Studio Code中打开，可以在Visual Studio Code中下载一个markdownlint插件进行编辑。<br>最后：编辑完成后返回主目录blog(cd … 返回上一层目录)<br>运行 hexo clean 清除缓存文件和静态文件（非必要）<br>运行 hexo generate/g 生成静态博客文件<br>运行 hexo server/s 启动博客</strong></p><h3 id="如何把个人博客部署到远端"><a href="#如何把个人博客部署到远端" class="headerlink" title="如何把个人博客部署到远端"></a>如何把个人博客部署到远端</h3><p><strong>在blog目录下运行命令 hexo deploy/d 将本地博客部署到github<br>部署过程中按要求输入 github 的账号和密码<br>完成后就可直接通过该仓库名（username.github.io）访问博客了</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hexo的一些语法&quot;&gt;&lt;a href=&quot;#Hexo的一些语法&quot; class=&quot;headerlink&quot; title=&quot;Hexo的一些语法&quot;&gt;&lt;/a&gt;Hexo的一些语法&lt;/h2&gt;&lt;h3 id=&quot;常见命令&quot;&gt;&lt;a href=&quot;#常见命令&quot; class=&quot;headerlink&quot; title=&quot;常见命令&quot;&gt;&lt;/a&gt;常见命令&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;**hexo new &amp;quot;postName&amp;quot; #新建文章&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo new page &amp;quot;pageName&amp;quot; #新建页面&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo generate #生成静态页面至public目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo server #开启预览访问端口（默认端口4000，&amp;#39;ctrl + c&amp;#39;关闭server）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo deploy #部署到GitHub&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo help  # 查看帮助&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo version  #查看Hexo的版本**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo clean  #清除缓存文件和静态文件&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="Hexo的一些基本用法和编写博客的一些注意事项" scheme="https://stephencurry6666.github.io/tags/Hexo%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95%E5%92%8C%E7%BC%96%E5%86%99%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>Hello Stephencurry6666</title>
    <link href="https://stephencurry6666.github.io/2020/04/30/hello-world/"/>
    <id>https://stephencurry6666.github.io/2020/04/30/hello-world/</id>
    <published>2020-04-30T03:20:40.007Z</published>
    <updated>2020-05-02T09:44:29.808Z</updated>
    
    <content type="html"><![CDATA[<h3 id="科学公式-TeX-KaTeX"><a href="#科学公式-TeX-KaTeX" class="headerlink" title="科学公式 TeX(KaTeX)"></a>科学公式 TeX(KaTeX)</h3><script type="math/tex; mode=display">E=mc^2</script><p>行内的公式<script type="math/tex">E=mc^2</script>行内的公式，行内的<script type="math/tex">E=mc^2</script>公式。</p><script type="math/tex; mode=display">x > y</script><script type="math/tex; mode=display">(\sqrt{3x-1}+(1+x)^2)</script><script type="math/tex; mode=display">\sin(\alpha)^{\theta}=\sum_{i=0}^{n}(x^i + \cos(f))</script><script type="math/tex; mode=display">\iint_{a}^{b}\frac{\mathrm{3} }{\mathrm{3} x}</script><a id="more"></a><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><!--more--><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;科学公式-TeX-KaTeX&quot;&gt;&lt;a href=&quot;#科学公式-TeX-KaTeX&quot; class=&quot;headerlink&quot; title=&quot;科学公式 TeX(KaTeX)&quot;&gt;&lt;/a&gt;科学公式 TeX(KaTeX)&lt;/h3&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;E=mc^2&lt;/script&gt;&lt;p&gt;行内的公式&lt;script type=&quot;math/tex&quot;&gt;E=mc^2&lt;/script&gt;行内的公式，行内的&lt;script type=&quot;math/tex&quot;&gt;E=mc^2&lt;/script&gt;公式。&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;x &gt; y&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;(\sqrt{3x-1}+(1+x)^2)&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;\sin(\alpha)^{\theta}=\sum_{i=0}^{n}(x^i + \cos(f))&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;\iint_{a}^{b}\frac{\mathrm{3} }{\mathrm{3} x}&lt;/script&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
