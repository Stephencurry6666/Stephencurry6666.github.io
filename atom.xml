<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>愿你出走半生，归来仍是少年</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://stephencurry6666.github.io/"/>
  <updated>2020-06-02T12:18:55.537Z</updated>
  <id>https://stephencurry6666.github.io/</id>
  
  <author>
    <name>Stephencurry6666</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计算机网络实验项目一</title>
    <link href="https://stephencurry6666.github.io/2020/06/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E9%AA%8C%E4%B8%80/"/>
    <id>https://stephencurry6666.github.io/2020/06/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E9%AA%8C%E4%B8%80/</id>
    <published>2020-06-02T12:00:16.496Z</published>
    <updated>2020-06-02T12:18:55.537Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实验名称：实验项目1-交换式局域网的构建与交换机的工作原理"><a href="#实验名称：实验项目1-交换式局域网的构建与交换机的工作原理" class="headerlink" title="实验名称：实验项目1 交换式局域网的构建与交换机的工作原理"></a>实验名称：实验项目1 交换式局域网的构建与交换机的工作原理</h2><a id="more"></a><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p><strong>掌握在Packet Tracer软件中搭建实验平台，配置基本的网络参数，测试网络的连通性。 理解交换机的交换原理对不同类型数据帧的处理方式。</strong></p><h2 id="实验步骤与调试过程-请用简单的文字描述"><a href="#实验步骤与调试过程-请用简单的文字描述" class="headerlink" title="实验步骤与调试过程(请用简单的文字描述)"></a>实验步骤与调试过程(请用简单的文字描述)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（1）利用Packet Tracer仿真软件搭建一个局域网，主要由交换机和若干台计算机组成。</span><br><span class="line">（2）配置基本的网络参数，测试网络的连通性。</span><br><span class="line">（3）查看交换机的MAC地址映射表并记录相关数据。</span><br></pre></td></tr></table></figure><h2 id="实验结果-上传实验结果截图或者简单文字描述"><a href="#实验结果-上传实验结果截图或者简单文字描述" class="headerlink" title="实验结果(上传实验结果截图或者简单文字描述)"></a>实验结果(上传实验结果截图或者简单文字描述)</h2><p><strong>1.先利用Packet Tracer仿真软件搭建一个局域网，主要由一个交换机和四台计算机组成。</strong></p><p><img src="http://61.163.231.201:8000/Lab//ueditor/jsp/upload/image/20200601/1591004844833082829.png" alt="tupian1"></p><p><strong>2.按照所给IP地址以及掩码表给每一台PC配上IP地址以及掩码。</strong></p><p><img src="http://61.163.231.201:8000/Lab//ueditor/jsp/upload/image/20200601/1591005082068066465.png" alt="tupian2"></p><p><strong>3.发送报文（PC0-&gt;PC1）。</strong></p><p><img src="http://61.163.231.201:8000/Lab//ueditor/jsp/upload/image/20200601/1591005158146044811.png" alt="tupian3"></p><p><strong>4.观察MAC表变化。</strong></p><p><img src="http://61.163.231.201:8000/Lab//ueditor/jsp/upload/image/20200601/1591005223005003171.png" alt="tupian4"></p><p><img src="http://61.163.231.201:8000/Lab//ueditor/jsp/upload/image/20200601/1591005240802072987.png" alt="tupian5"></p><p><img src="http://61.163.231.201:8000/Lab//ueditor/jsp/upload/image/20200601/1591005257771047365.png" alt="tupian6"></p><p><img src="http://61.163.231.201:8000/Lab//ueditor/jsp/upload/image/20200601/1591005266974083309.png" alt="tupian7"></p><p><strong>5.切换到模拟器/simulation模式下，然后打开PC机的命令行界面，输入 ping 目标ip地址（PC2-&gt;PC3）。</strong></p><p><img src="http://61.163.231.201:8000/Lab//ueditor/jsp/upload/image/20200601/1591005322630062107.png" alt="tupian8"></p><p><img src="http://61.163.231.201:8000/Lab//ueditor/jsp/upload/image/20200601/1591005342786085722.png" alt="tupian9"></p><p><strong>6.记录在表。</strong></p><p><img src="https://img-blog.csdnimg.cn/20200602201747501.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg0NjEzOQ==,size_16,color_FFFFFF,t_70" alt="tupian10"></p><p><strong>7.通过实验可以验证交换机的工作原理。</strong></p><p>交换机并不会把收到每个数据信息都以广播的方式发给客户端，是由于交换机可以根据MAC地址智能的转发数据帧。交换机存储的MAC地址表将MAC地址和交换机的接口编号对应在一起，每当交换机收到客户端发送来的数据帧时，它就会根据MAC地址表的信息判断该如何转发。</p><h2 id="疑难小结-总结个人在实验中遇到的问题或者心得体会"><a href="#疑难小结-总结个人在实验中遇到的问题或者心得体会" class="headerlink" title="疑难小结(总结个人在实验中遇到的问题或者心得体会)"></a>疑难小结(总结个人在实验中遇到的问题或者心得体会)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.刚开始下载好Packet Tracer仿真软件时，不知道怎么去使用它，看了老师发的使用说明才知道大概的使用方法。</span><br><span class="line">2.在建立拓扑结构图时，连好PC端和交换机之间的连线时，并不是两头都闪绿，靠近交换机那一头闪红，以为连接错了，结果发现原来需要一段时间去连接。</span><br><span class="line">3.由于刚刚接触这个软件来做计算机网路的实验，还有很多地方感觉到吃力。</span><br></pre></td></tr></table></figure><h2 id="实验详细操作步骤或程序清单"><a href="#实验详细操作步骤或程序清单" class="headerlink" title="实验详细操作步骤或程序清单"></a>实验详细操作步骤或程序清单</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.先利用Packet Tracer仿真软件搭建一个局域网，主要由一个交换机和四台计算机组成。</span><br><span class="line"></span><br><span class="line">2.按照所给IP地址以及掩码表给每一台PC配上IP地址以及掩码。</span><br><span class="line"></span><br><span class="line">3.发送报文（PC0-&gt;PC1）。</span><br><span class="line"></span><br><span class="line">4.观察MAC表变化。</span><br><span class="line"></span><br><span class="line">5.切换到模拟器&#x2F;simulation模式下，然后打开PC机的命令行界面，输入 ping 目标ip地址（PC2-&gt;PC3）。</span><br><span class="line"></span><br><span class="line">6.记录在表。</span><br><span class="line"></span><br><span class="line">7.通过实验可以验证交换机的工作原理。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;实验名称：实验项目1-交换式局域网的构建与交换机的工作原理&quot;&gt;&lt;a href=&quot;#实验名称：实验项目1-交换式局域网的构建与交换机的工作原理&quot; class=&quot;headerlink&quot; title=&quot;实验名称：实验项目1 交换式局域网的构建与交换机的工作原理&quot;&gt;&lt;/a&gt;实验名称：实验项目1 交换式局域网的构建与交换机的工作原理&lt;/h2&gt;
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://stephencurry6666.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络上机实验" scheme="https://stephencurry6666.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>数据库原理及应用上机实验三</title>
    <link href="https://stephencurry6666.github.io/2020/06/02/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C%E4%B8%89/"/>
    <id>https://stephencurry6666.github.io/2020/06/02/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C%E4%B8%89/</id>
    <published>2020-06-02T11:42:47.576Z</published>
    <updated>2020-06-02T11:54:51.397Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实验名称：实验三-数据高级查询"><a href="#实验名称：实验三-数据高级查询" class="headerlink" title="实验名称：实验三 数据高级查询"></a>实验名称：实验三 数据高级查询</h2><a id="more"></a><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p><strong>掌握复杂数据查询操作。</strong></p><h2 id="实验步骤与调试过程-请用简单的文字描述"><a href="#实验步骤与调试过程-请用简单的文字描述" class="headerlink" title="实验步骤与调试过程(请用简单的文字描述)"></a>实验步骤与调试过程(请用简单的文字描述)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">对各表中的数据进行不同条件的连接查询和嵌套查询；</span><br><span class="line">（1）查询每个学生及其选课情况；</span><br><span class="line">（2）查询每门课的间接先修课</span><br><span class="line">（3）将STUDENT,SC进行右连接</span><br><span class="line">（4）查询既选修了2号课程又选修了3号课程的学生姓名、学号；</span><br><span class="line">（5）查询和刘晨同一年龄的学生</span><br><span class="line">（6）选修了课程名为“数据库”的学生姓名和年龄</span><br><span class="line">（7）查询其他系比IS系任一学生年龄小的学生名单</span><br><span class="line">（8）查询其他系中比IS系所有学生年龄都小的学生名单</span><br><span class="line">（9）查询选修了全部课程的学生姓名</span><br><span class="line">（10）查询计算机系学生及其性别是男的学生</span><br><span class="line">（11）查询选修课程1的学生集合和选修2号课程学生集合的差集</span><br><span class="line">（12）查询李丽同学不学的课程的课程号</span><br><span class="line">（13）查询选修了3号课程的学生平均年龄</span><br><span class="line">（14）求每门课程学生的平均成绩</span><br><span class="line">（15）统计每门课程的学生选修人数（超过3人的才统计）。要求输出课程号和选修人数，结果按人数降序排列，若人数相同，按课程号升序排列</span><br><span class="line">（16）查询学号比刘晨大，而年龄比他小的学生姓名。</span><br><span class="line">（17）求年龄大于所有女同学年龄的男同学姓名和年龄</span><br></pre></td></tr></table></figure><h2 id="实验结果-上传实验结果截图或者简单文字描述"><a href="#实验结果-上传实验结果截图或者简单文字描述" class="headerlink" title="实验结果(上传实验结果截图或者简单文字描述)"></a>实验结果(上传实验结果截图或者简单文字描述)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.经过实验可以知道求总数时可以用count（）函数。</span><br><span class="line">2.在进行分组操作时，用group by 时要用having来限制条件。</span><br><span class="line">3.order by是排序要求 desc是降序 ，asc是升序。</span><br><span class="line">4.any（）函数是任意的意思，all（）是所有。</span><br></pre></td></tr></table></figure><h2 id="疑难小结-总结个人在实验中遇到的问题或者心得体会"><a href="#疑难小结-总结个人在实验中遇到的问题或者心得体会" class="headerlink" title="疑难小结(总结个人在实验中遇到的问题或者心得体会)"></a>疑难小结(总结个人在实验中遇到的问题或者心得体会)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.在进行求总数操作时，由于一开始我不知道有count函数，很是迷茫，后来查阅了资料之后，才得知。</span><br><span class="line">2.在进行将STUDENT,SC进行右连接的操作时，由于少打了一个关键字，总是报错，后来检查了几遍之后才找到问题。</span><br><span class="line">3.我对SQL语言还有很多地方不是很熟练，需要勤加练习。</span><br></pre></td></tr></table></figure><h2 id="实验详细操作步骤或程序清单"><a href="#实验详细操作步骤或程序清单" class="headerlink" title="实验详细操作步骤或程序清单"></a>实验详细操作步骤或程序清单</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">（1） 查询每个学生及其选课情况</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> student.sno,sname,ssex,sage,sdept,cno,grade</span><br><span class="line"><span class="keyword">from</span> student,sc</span><br><span class="line"><span class="keyword">where</span> student.sno=sc.sno</span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>） 查询每门课的间接先修课</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> first.cno,second.cpno</span><br><span class="line"><span class="keyword">from</span> course <span class="keyword">first</span>,course <span class="keyword">second</span></span><br><span class="line"><span class="keyword">where</span> first.cpno=second.cno</span><br><span class="line"></span><br><span class="line">（<span class="number">3</span>） 将STUDENT,SC进行右连接</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> student.sno,sname,ssex,sage,sdept,cno,grade</span><br><span class="line"><span class="keyword">from</span> student <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> sc <span class="keyword">on</span> student.sno=sc.sno</span><br><span class="line">（<span class="number">4</span>） 查询既选修了<span class="number">2</span>号课程又选修了<span class="number">3</span>号课程的学生姓名、学号</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> student.sno,sname</span><br><span class="line"><span class="keyword">from</span> student <span class="keyword">inner</span> <span class="keyword">join</span> sc <span class="keyword">on</span> student.sno=sc.sno</span><br><span class="line"><span class="keyword">where</span> cno=<span class="string">'3'</span> <span class="keyword">and</span> sc.sno <span class="keyword">in</span></span><br><span class="line">(<span class="keyword">select</span> sno</span><br><span class="line"><span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">where</span> cno=<span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line">（<span class="number">5</span>）查询和刘晨同一年龄的学生</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> student.sno,sname</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> sname!=<span class="string">'刘晨'</span> <span class="keyword">and</span> sage=</span><br><span class="line">(<span class="keyword">select</span> sage </span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> sname=<span class="string">'刘晨'</span>)</span><br><span class="line"></span><br><span class="line">（<span class="number">6</span>）选修了课程名为“数据库”的学生姓名和年龄</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> sname,sage</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> sno <span class="keyword">in</span></span><br><span class="line">(<span class="keyword">select</span> sno</span><br><span class="line"><span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">where</span> cno <span class="keyword">in</span></span><br><span class="line">(<span class="keyword">select</span> cno</span><br><span class="line"><span class="keyword">from</span> course </span><br><span class="line"><span class="keyword">where</span> cname=<span class="string">'数据库'</span>))</span><br><span class="line"></span><br><span class="line">（<span class="number">7</span>）查询其他系比<span class="keyword">IS</span>系任一学生年龄小的学生名单</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> student.sno,sname</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> sdept&lt;&gt;<span class="string">'IS'</span> <span class="keyword">and</span></span><br><span class="line">sage&lt;<span class="keyword">any</span></span><br><span class="line">(<span class="keyword">select</span> sage </span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> sdept=<span class="string">'IS'</span>)</span><br><span class="line"></span><br><span class="line">（<span class="number">8</span>）查询其他系中比<span class="keyword">IS</span>系所有学生年龄都小的学生名单</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> student.sno,sname</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> sdept&lt;&gt;<span class="string">'IS'</span> <span class="keyword">and</span> </span><br><span class="line">sage&lt;<span class="keyword">all</span></span><br><span class="line">(<span class="keyword">select</span> sage </span><br><span class="line"><span class="keyword">from</span> student </span><br><span class="line"><span class="keyword">where</span> sdept=<span class="string">'IS'</span>)</span><br><span class="line"></span><br><span class="line">（<span class="number">9</span>）查询选修了全部课程的学生姓名</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> sname</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> Sno <span class="keyword">in</span></span><br><span class="line">(<span class="keyword">select</span> Sno <span class="keyword">from</span> SC</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> Sno</span><br><span class="line"><span class="keyword">having</span> <span class="keyword">count</span>(*) = (<span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> course ))</span><br><span class="line"></span><br><span class="line">（<span class="number">10</span>）查询计算机系学生及其性别是男的学生</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> student.sno,sname</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> sdept=<span class="string">'IS'</span> <span class="keyword">and</span> ssex=<span class="string">'男'</span></span><br><span class="line"></span><br><span class="line">（<span class="number">11</span>）查询选修课程<span class="number">1</span>的学生集合和选修<span class="number">2</span>号课程学生集合的差集</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> sno</span><br><span class="line"><span class="keyword">from</span> sc </span><br><span class="line"><span class="keyword">where</span> cno=<span class="string">'1'</span> <span class="keyword">except</span> </span><br><span class="line"><span class="keyword">select</span> sno</span><br><span class="line"><span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">where</span> cno=<span class="string">'2'</span></span><br><span class="line"></span><br><span class="line">（<span class="number">12</span>）查询李丽同学不学的课程的课程号</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> cno</span><br><span class="line"><span class="keyword">from</span> course</span><br><span class="line"><span class="keyword">where</span> cno <span class="keyword">not</span> <span class="keyword">in</span></span><br><span class="line">(<span class="keyword">select</span> cno</span><br><span class="line"><span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">where</span> sno <span class="keyword">in</span></span><br><span class="line">(<span class="keyword">select</span> sno</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> sname=<span class="string">'李丽'</span>))</span><br><span class="line"></span><br><span class="line">（<span class="number">13</span>）查询选修了<span class="number">3</span>号课程的学生平均年龄</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">AVG</span>(sage) <span class="keyword">as</span> avgsage</span><br><span class="line"><span class="keyword">from</span> student <span class="keyword">inner</span> <span class="keyword">join</span> sc <span class="keyword">on</span> student.sno=sc.sno</span><br><span class="line"><span class="keyword">where</span> cno=<span class="string">'3'</span></span><br><span class="line"></span><br><span class="line">（<span class="number">14</span>）求每门课程学生的平均成绩</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> cno,<span class="keyword">AVG</span>(grade) <span class="keyword">as</span> avggrade</span><br><span class="line"><span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> cno</span><br><span class="line"></span><br><span class="line">（<span class="number">15</span>）统计每门课程的学生选修人数（超过<span class="number">3</span>人的才统计）。要求输出课程号和选修人数，结果按人数降序排列，若人数相同，按课程号升序排列</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> course.cno <span class="string">'课程号'</span>, <span class="keyword">count</span>(sc.sno) <span class="string">'人数'</span></span><br><span class="line"><span class="keyword">from</span> course,sc </span><br><span class="line"><span class="keyword">where</span> course.cno=sc.cno </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> course.cno <span class="keyword">having</span> <span class="keyword">count</span>(sc.sno)&gt;<span class="number">3</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">COUNT</span>(sc.sno) <span class="keyword">desc</span>,course.cno <span class="keyword">asc</span></span><br><span class="line"></span><br><span class="line">（<span class="number">16</span>）查询学号比刘晨大，而年龄比他小的学生姓名</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> sname</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> sno&gt;</span><br><span class="line">(<span class="keyword">select</span> sno <span class="keyword">from</span> student <span class="keyword">where</span> sname=<span class="string">'刘晨'</span>)<span class="keyword">and</span></span><br><span class="line">sage&lt;(<span class="keyword">select</span> sage <span class="keyword">from</span> student <span class="keyword">where</span> sname=<span class="string">'刘晨'</span>)</span><br><span class="line"></span><br><span class="line">（<span class="number">17</span>）求年龄大于所有女同学年龄的男同学姓名和年龄</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> sname,sage</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> ssex=<span class="string">'男'</span><span class="keyword">and</span> sage&gt;</span><br><span class="line">(<span class="keyword">select</span> <span class="keyword">MAX</span>(sage) <span class="keyword">from</span> student <span class="keyword">where</span> ssex=<span class="string">'女'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;实验名称：实验三-数据高级查询&quot;&gt;&lt;a href=&quot;#实验名称：实验三-数据高级查询&quot; class=&quot;headerlink&quot; title=&quot;实验名称：实验三 数据高级查询&quot;&gt;&lt;/a&gt;实验名称：实验三 数据高级查询&lt;/h2&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://stephencurry6666.github.io/categories/SQL/"/>
    
    
      <category term="SQL上机实验" scheme="https://stephencurry6666.github.io/tags/SQL%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>数据库原理及应用上机实验四</title>
    <link href="https://stephencurry6666.github.io/2020/06/02/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C%E5%9B%9B/"/>
    <id>https://stephencurry6666.github.io/2020/06/02/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C%E5%9B%9B/</id>
    <published>2020-06-02T11:42:47.576Z</published>
    <updated>2020-06-02T11:54:15.447Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实验名称：实验四-数据更新和视图"><a href="#实验名称：实验四-数据更新和视图" class="headerlink" title="实验名称：实验四 数据更新和视图"></a>实验名称：实验四 数据更新和视图</h2><a id="more"></a><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p>1.熟练掌握SQL的常用数据更新操作。</p><p>2.熟练应用INSERT,UPDATE,DELETE语句。</p><p>3.掌握更新操作的各种格式。</p><p>4.掌握视图的创建、更新、删除和查询</p><h2 id="实验步骤与调试过程-请用简单的文字描述"><a href="#实验步骤与调试过程-请用简单的文字描述" class="headerlink" title="实验步骤与调试过程(请用简单的文字描述)"></a>实验步骤与调试过程(请用简单的文字描述)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">（1）插入如下学生记录（学号：95030，姓名：李莉，年龄：18）；</span><br><span class="line">（2）插入如下选课记录（95030，1）；</span><br><span class="line">（3）计算机系学生年龄改成20；</span><br><span class="line">（4）数学系所有学生成绩改成0；</span><br><span class="line">（5）把低于总平均成绩的女同学成绩提高5分；</span><br><span class="line">（6）修改2号课程的成绩，若成绩小于75分提高5％，成绩大于75时提高4％（两个语句实现，注意顺序）；</span><br><span class="line">（7）删除95030学生信息；</span><br><span class="line">（8）删除SC表中无成绩的记录；</span><br><span class="line">（9）删除张娜的选课记录；</span><br><span class="line">（10）删除数学系所有学生选课记录；</span><br><span class="line">（11）删除不及格的学生选课记录；</span><br><span class="line">（12）查询每一门课程成绩都大于等于80分的学生学号、姓名和性别，把值送往另一个已经存在的基本表STU(SNO,SNAME,SSEX)中；</span><br><span class="line">（13）把所有学生学号和课程号连接追加到新表中；</span><br><span class="line">（14）所有学生年龄增1；</span><br><span class="line">（15）统计3门以上课程不及格的学生把相应的学生姓名、系别追加到另外一个表中。</span><br><span class="line">（16）将学生学号、总成绩、平均成绩定义成一个视图，以便于查询。</span><br><span class="line">（17）将Student表中所有女生记录定义为一个视图F_STU，并限制对视图的更新操作不能超过视图条件限制。</span><br><span class="line">（18）将上一题建立的F_STU视图，更改为给所有男生记录定义的视图，属性包括学号、性别、年龄、所选课程号。</span><br><span class="line">（19）在上一题的视图中找出选修了3号课程的学生。</span><br><span class="line">（20）删除视图F_STU。</span><br></pre></td></tr></table></figure><h2 id="实验结果-上传实验结果截图或者简单文字描述"><a href="#实验结果-上传实验结果截图或者简单文字描述" class="headerlink" title="实验结果(上传实验结果截图或者简单文字描述)"></a>实验结果(上传实验结果截图或者简单文字描述)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. 删除主键表数据如果有外键约束就会报错。</span><br><span class="line"></span><br><span class="line">2. 插入数据用<span class="keyword">insert</span> <span class="keyword">into</span> 表直接+表。</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 更新用<span class="keyword">update</span>。</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 删除直接用<span class="keyword">delete</span> 可以直接删除一行数据。</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>操作视图的时候要用到<span class="keyword">create</span> <span class="keyword">view</span>。</span><br></pre></td></tr></table></figure><h2 id="疑难小结-总结个人在实验中遇到的问题或者心得体会"><a href="#疑难小结-总结个人在实验中遇到的问题或者心得体会" class="headerlink" title="疑难小结(总结个人在实验中遇到的问题或者心得体会)"></a>疑难小结(总结个人在实验中遇到的问题或者心得体会)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.修改数据时，如果省略where自子句，则表示要修改表中的所有元组，一开始不知道这个地方，错了好几次。</span><br><span class="line">2.带子查询的修改语句，因为有<span class="keyword">update</span>有<span class="keyword">where</span>语句，而<span class="keyword">where</span>子句后面可以跟子查询，所以子查询也可以嵌套在<span class="keyword">update</span>语句中，用以构造执行修改操作的条件。</span><br><span class="line"><span class="number">3.</span>进行视图操作的时候，一开始不是很熟悉过程，然后看了老师发的课件。课件里面有讲解，然后才做的实验。</span><br></pre></td></tr></table></figure><h2 id="实验详细操作过程或程序清单"><a href="#实验详细操作过程或程序清单" class="headerlink" title="实验详细操作过程或程序清单"></a>实验详细操作过程或程序清单</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line">（1）插入如下学生记录（学号：95030，姓名：李莉，年龄：18）</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(sno,sname,sage)</span><br><span class="line"><span class="keyword">values</span> (<span class="string">'95030'</span>,<span class="string">'李莉'</span>,<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）插入如下选课记录（<span class="number">95030</span>，<span class="number">1</span>）</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> sc(sno,cno)</span><br><span class="line"><span class="keyword">values</span>(<span class="string">'95030'</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">（<span class="number">3</span>）计算机系学生年龄改成<span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> student</span><br><span class="line"><span class="keyword">set</span> sage=<span class="number">20</span></span><br><span class="line"><span class="keyword">where</span> sdept=<span class="string">'CS'</span></span><br><span class="line"></span><br><span class="line">（<span class="number">4</span>）把数学系所有学生成绩改成<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> sc</span><br><span class="line"><span class="keyword">set</span> grade=<span class="number">0</span></span><br><span class="line"><span class="keyword">where</span> <span class="string">'MA'</span>=</span><br><span class="line">(<span class="keyword">select</span> sdept</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> student.sno=sc.sno)</span><br><span class="line"></span><br><span class="line">（<span class="number">5</span>）把低于总平均成绩的女同学成绩提高<span class="number">5</span>分</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> sc</span><br><span class="line"><span class="keyword">set</span> grade+=<span class="number">5</span></span><br><span class="line"><span class="keyword">where</span> grade&lt;</span><br><span class="line">(<span class="keyword">select</span> <span class="keyword">avg</span>(grade)</span><br><span class="line"><span class="keyword">from</span> sc <span class="keyword">inner</span> <span class="keyword">join</span> student</span><br><span class="line"><span class="keyword">on</span> student.sno=sc.sno</span><br><span class="line"><span class="keyword">where</span> ssex=<span class="string">'女'</span>)</span><br><span class="line"></span><br><span class="line">（<span class="number">6</span>）修改<span class="number">2</span>号课程的成绩，若成绩小于<span class="number">75</span>分提高<span class="number">5</span>％，成绩大于<span class="number">75</span>时提高<span class="number">4</span>％（两个语句实现，注意顺序）</span><br><span class="line"><span class="keyword">update</span> sc</span><br><span class="line"><span class="keyword">set</span> grade=grade*(<span class="number">1</span>+<span class="number">0.05</span>)</span><br><span class="line"><span class="keyword">where</span> cno=<span class="string">'002'</span> <span class="keyword">and</span> grade&lt;<span class="number">75</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> sc</span><br><span class="line"><span class="keyword">set</span> grade=grade*(<span class="number">1</span>+<span class="number">0.04</span>)</span><br><span class="line"><span class="keyword">where</span> cno=<span class="string">'002'</span> <span class="keyword">and</span> grade&gt;<span class="number">75</span>;</span><br><span class="line"></span><br><span class="line">（7）删除95030学生信息</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span></span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> sno=<span class="string">'95030'</span></span><br><span class="line"></span><br><span class="line">（<span class="number">8</span>）删除SC表中无成绩的记录</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span></span><br><span class="line"><span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">where</span> grade <span class="keyword">is</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">（9）删除张娜的选课记录</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span></span><br><span class="line"><span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">where</span> sno=(<span class="keyword">select</span> sno <span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> sname=<span class="string">'张娜'</span>)</span><br><span class="line"></span><br><span class="line">（<span class="number">10</span>）删除数学系所有学生选课记录</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span></span><br><span class="line"><span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">where</span> sno <span class="keyword">in</span> (<span class="keyword">select</span> sno <span class="keyword">from</span> student <span class="keyword">where</span> sdept=<span class="string">'MA'</span>)</span><br><span class="line"></span><br><span class="line">（<span class="number">11</span>）删除不及格的学生选课记录</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span></span><br><span class="line"><span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">where</span> grade&lt;<span class="number">60</span></span><br><span class="line"></span><br><span class="line">（<span class="number">12</span>）查询每一门课程成绩都大于等于<span class="number">80</span>分的学生学号、姓名和性别，把值送往另一个已经存在的基本表STU(SNO,SNAME,SSEX)中</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> STU</span><br><span class="line">(sno <span class="built_in">char</span>(<span class="number">8</span>),</span><br><span class="line">sname <span class="built_in">char</span>(<span class="number">8</span>),</span><br><span class="line">ssex <span class="built_in">char</span>(<span class="number">2</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> STU(sno,sname,ssex)</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> student.sno,sname,ssex</span><br><span class="line"><span class="keyword">from</span> student,sc</span><br><span class="line"><span class="keyword">where</span> student.sno <span class="keyword">not</span> <span class="keyword">in</span></span><br><span class="line">(<span class="keyword">select</span> sno <span class="keyword">from</span> sc <span class="keyword">where</span> grade&lt;<span class="number">80</span>) <span class="keyword">and</span> student.sno=sc.sno</span><br><span class="line"></span><br><span class="line">（<span class="number">13</span>）把所有学生学号和课程号连接追加到新表中</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu1</span><br><span class="line">(</span><br><span class="line">sno <span class="built_in">char</span>(<span class="number">8</span>),</span><br><span class="line">cno <span class="built_in">char</span>(<span class="number">3</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stu1(sno,cno)</span><br><span class="line"><span class="keyword">select</span> sno,cno</span><br><span class="line"><span class="keyword">from</span> sc;</span><br><span class="line"></span><br><span class="line">（14）所有学生年龄增1</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> student</span><br><span class="line"><span class="keyword">set</span> sage=sage+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">（15）统计3门以上课程不及格的学生把相应的学生姓名、系别追加到另外一个表中</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu2</span><br><span class="line">(</span><br><span class="line">sname <span class="built_in">char</span>(<span class="number">8</span>),</span><br><span class="line">sdept <span class="built_in">char</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stu2(sname,sdept)</span><br><span class="line"><span class="keyword">select</span> sname,sdept</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> sno <span class="keyword">in</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> sno</span><br><span class="line"><span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">where</span> grade&lt;<span class="number">60</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> sno</span><br><span class="line"><span class="keyword">having</span> <span class="keyword">count</span>(grade)&gt;=<span class="number">3</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">（16）将学生学号、总成绩、平均成绩定义成一个视图，以便于查询。</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> grade_sum_avg</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"> <span class="keyword">select</span> sno,<span class="keyword">sum</span>(grade) <span class="keyword">as</span> totalgrade,<span class="keyword">avg</span>(grade) <span class="keyword">as</span> avg_grade</span><br><span class="line"> <span class="keyword">from</span>  sc</span><br><span class="line"> <span class="keyword">group</span> <span class="keyword">by</span> sno;</span><br><span class="line"></span><br><span class="line">（17）将Student表中所有女生记录定义为一个视图F_STU，并限制对视图的更新操作不能超过视图条件限制。</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> F_STU(sno,<span class="keyword">name</span>,dept,sex,age)</span><br><span class="line">    <span class="keyword">as</span></span><br><span class="line">        <span class="keyword">select</span> *</span><br><span class="line">        <span class="keyword">from</span> student</span><br><span class="line">        <span class="keyword">where</span> ssex=<span class="string">'女'</span>;</span><br><span class="line">        <span class="keyword">with</span> <span class="keyword">check</span> <span class="keyword">option</span>;</span><br><span class="line"></span><br><span class="line">（18）将上一题建立的F_STU视图，更改为给所有男生记录定义的视图，属性包括学号、性别、年龄、所选课程号。</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">view</span> F_STU(sno,ssex,sage,cno)</span><br><span class="line">   <span class="keyword">as</span></span><br><span class="line">     <span class="keyword">select</span> student.sno,ssex,sage,cno <span class="keyword">from</span> student,sc</span><br><span class="line">     <span class="keyword">where</span> student.sno=sc.sno <span class="keyword">and</span> ssex=<span class="string">'男'</span></span><br><span class="line"></span><br><span class="line">（<span class="number">19</span>）在上一题的视图中找出选修了<span class="number">3</span>号课程的学生。</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span>    F_STU.sno,sname,cno</span><br><span class="line"><span class="keyword">from</span>      F_STU,sc</span><br><span class="line"><span class="keyword">where</span>     F_STU.sno=sc.sno <span class="keyword">and</span></span><br><span class="line">          sc.cno=<span class="string">'3'</span>;</span><br><span class="line"></span><br><span class="line">（20）删除视图F_STU</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> F_STU;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;实验名称：实验四-数据更新和视图&quot;&gt;&lt;a href=&quot;#实验名称：实验四-数据更新和视图&quot; class=&quot;headerlink&quot; title=&quot;实验名称：实验四 数据更新和视图&quot;&gt;&lt;/a&gt;实验名称：实验四 数据更新和视图&lt;/h2&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://stephencurry6666.github.io/categories/SQL/"/>
    
    
      <category term="SQL上机实验" scheme="https://stephencurry6666.github.io/tags/SQL%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE-Day(7)学习笔记</title>
    <link href="https://stephencurry6666.github.io/2020/05/26/JavaSE-Day(7)%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://stephencurry6666.github.io/2020/05/26/JavaSE-Day(7)%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-05-26T07:24:36.845Z</published>
    <updated>2020-05-26T12:49:31.631Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><a id="more"></a><h3 id="成员变量和局部变量的区别"><a href="#成员变量和局部变量的区别" class="headerlink" title="成员变量和局部变量的区别"></a>成员变量和局部变量的区别</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">成员变量和局部变量的区别?</span></span><br><span class="line"><span class="comment">A:在类中的位置不同</span></span><br><span class="line"><span class="comment">成员变量：在类中方法外</span></span><br><span class="line"><span class="comment">局部变量：在方法定义中或者方法声明上</span></span><br><span class="line"><span class="comment">B:在内存中的位置不同</span></span><br><span class="line"><span class="comment">成员变量：在堆内存</span></span><br><span class="line"><span class="comment">局部变量：在栈内存</span></span><br><span class="line"><span class="comment">C:生命周期不同</span></span><br><span class="line"><span class="comment">成员变量：随着对象的创建而存在，随着对象的消失而消失</span></span><br><span class="line"><span class="comment">局部变量：随着方法的调用而存在，随着方法的调用完毕而消失</span></span><br><span class="line"><span class="comment">D:初始化值不同</span></span><br><span class="line"><span class="comment">成员变量：有默认初始化值</span></span><br><span class="line"><span class="comment">局部变量：没有默认初始化值，必须定义，赋值，然后才能使用。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意事项：</span></span><br><span class="line"><span class="comment">局部变量名称可以和成员变量名称一样，在方法中使用的时候，采用的是就近原则。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Varialbe</span> </span>&#123;</span><br><span class="line"><span class="comment">//成员变量</span></span><br><span class="line"><span class="comment">//int num = 10;</span></span><br><span class="line">int num; <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line">public <span class="keyword">void</span> show() &#123;</span><br><span class="line"><span class="comment">//int num2 = 20; //局部变量</span></span><br><span class="line"><span class="comment">//可能尚未初始化变量num2</span></span><br><span class="line"><span class="comment">//int num2; //没有默认值</span></span><br><span class="line">int num2 = <span class="number">20</span>;</span><br><span class="line">System.out.println(num2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//int num = 100;</span></span><br><span class="line">System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VariableDemo</span> </span>&#123;</span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">Varialbe v = <span class="keyword">new</span> Varialbe();</span><br><span class="line"></span><br><span class="line">System.out.println(v.num); <span class="comment">//访问成员变量</span></span><br><span class="line"></span><br><span class="line">v.show();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法的形式参数是类名的时候如何调用"><a href="#方法的形式参数是类名的时候如何调用" class="headerlink" title="方法的形式参数是类名的时候如何调用"></a>方法的形式参数是类名的时候如何调用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">形式参数的问题：</span></span><br><span class="line"><span class="comment">基本类型：形式参数的改变不影响实际参数</span></span><br><span class="line"><span class="comment">引用类型：形式参数的改变直接影响实际参数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//形式参数是基本类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">public int sum(int a,int b) &#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//形式参数是引用类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">public <span class="keyword">void</span> show() &#123;</span><br><span class="line">System.out.println(<span class="string">"我爱学习"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line"><span class="comment">//如果你看到了一个方法的形式参数是一个类类型(引用类型)，这里其实需要的是该类的对象。</span></span><br><span class="line">public <span class="keyword">void</span> method(Student s) &#123; <span class="comment">//调用的时候，把main方法中的s的地址传递到了这里 Student s = new Student();</span></span><br><span class="line">s.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArgsTest</span> </span>&#123;</span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line"><span class="comment">//形式参数是基本类型的调用</span></span><br><span class="line">Demo d = <span class="keyword">new</span> Demo();</span><br><span class="line">int result = d.sum(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line">System.out.println(<span class="string">"result:"</span>+result);</span><br><span class="line">System.out.println(<span class="string">"--------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//形式参数是引用类型的调用</span></span><br><span class="line"><span class="comment">//需求：我要调用StudentDemo类中的method()方法</span></span><br><span class="line">StudentDemo sd = <span class="keyword">new</span> StudentDemo();</span><br><span class="line"><span class="comment">//创建学生对象</span></span><br><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line">sd.method(s); <span class="comment">//把s的地址给到了这里</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匿名对象的概述和应用"><a href="#匿名对象的概述和应用" class="headerlink" title="匿名对象的概述和应用"></a>匿名对象的概述和应用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">匿名对象：就是没有名字的对象。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">匿名对象的应用场景：</span></span><br><span class="line"><span class="comment">A:调用方法，仅仅只调用一次的时候。</span></span><br><span class="line"><span class="comment">注意：调用多次的时候，不适合。</span></span><br><span class="line"><span class="comment">那么，这种匿名调用有什么好处吗?</span></span><br><span class="line"><span class="comment">有，匿名对象调用完毕就是垃圾。可以被垃圾回收器回收。</span></span><br><span class="line"><span class="comment">B:匿名对象可以作为实际参数传递</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">public <span class="keyword">void</span> show() &#123;</span><br><span class="line">System.out.println(<span class="string">"我爱学习"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line">public <span class="keyword">void</span> method(Student s) &#123;</span><br><span class="line">s.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoNameDemo</span> </span>&#123;</span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line"><span class="comment">//带名字的调用</span></span><br><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line">s.show();</span><br><span class="line">s.show();</span><br><span class="line">System.out.println(<span class="string">"--------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//匿名对象</span></span><br><span class="line"><span class="comment">//new Student();</span></span><br><span class="line"><span class="comment">//匿名对象调用方法</span></span><br><span class="line"><span class="keyword">new</span> Student().show();</span><br><span class="line"><span class="keyword">new</span> Student().show(); <span class="comment">//这里其实是重新创建了一个新的对象</span></span><br><span class="line">System.out.println(<span class="string">"--------------"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//匿名对象作为实际参数传递</span></span><br><span class="line">StudentDemo sd = <span class="keyword">new</span> StudentDemo();</span><br><span class="line"><span class="comment">//Student ss = new Student();</span></span><br><span class="line"><span class="comment">//sd.method(ss); //这里的s是一个实际参数</span></span><br><span class="line"><span class="comment">//匿名对象</span></span><br><span class="line">sd.method(<span class="keyword">new</span> Student());</span><br><span class="line"></span><br><span class="line"><span class="comment">//在来一个</span></span><br><span class="line"><span class="keyword">new</span> StudentDemo().method(<span class="keyword">new</span> Student());</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="封装和private"><a href="#封装和private" class="headerlink" title="封装和private"></a>封装和private</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">封装(理解)</span><br><span class="line">    (<span class="number">1</span>)隐藏实现细节，提供公共的访问方式</span><br><span class="line">    (<span class="number">2</span>)好处：</span><br><span class="line">        A:隐藏实现细节，提供公共的访问方式</span><br><span class="line">        B:提高代码的复用性</span><br><span class="line">        C:提高代码的安全性</span><br><span class="line">    (<span class="number">3</span>)设计原则</span><br><span class="line">        把不想让外界知道的实现细节给隐藏起来，提供公共的访问方式</span><br><span class="line">    (<span class="number">4</span>)private是封装的一种体现。</span><br><span class="line">        封装：类，方法，private修饰成员变量</span><br><span class="line"></span><br><span class="line">private关键字(掌握)</span><br><span class="line">    (<span class="number">1</span>)私有的意义，可以修饰成员变量和成员方法</span><br><span class="line">    (<span class="number">2</span>)特点：</span><br><span class="line">        被private修饰的后的成员只能在本类中被访问</span><br><span class="line">    (<span class="number">3</span>)private的应用：</span><br><span class="line">        以后再写一个类的时候：</span><br><span class="line">            把所有的成员变量给private了</span><br><span class="line">            提供对应的getXxx()/setXxx()方法</span><br></pre></td></tr></table></figure><h3 id="private的引出"><a href="#private的引出" class="headerlink" title="private的引出"></a>private的引出</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">定义一个学生类：</span></span><br><span class="line"><span class="comment">成员变量：name，age</span></span><br><span class="line"><span class="comment">成员方法：show()方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">我们在使用这个案例的过程中，发现了一个问题：</span></span><br><span class="line"><span class="comment">通过对象去给成员变量赋值，可以赋值一些非法的数据。</span></span><br><span class="line"><span class="comment">这是不合理的。</span></span><br><span class="line"><span class="comment">应该是这个样子的：在赋值之前，先对数据进行判断。</span></span><br><span class="line"><span class="comment">判断到底在哪里做比较合适呢?</span></span><br><span class="line"><span class="comment">StudentDemo类是一个测试类，测试类一般只创建对象，调用方法。</span></span><br><span class="line"><span class="comment">所以，这个判断应该定义在Student类中。</span></span><br><span class="line"><span class="comment">而我们在成员变量的位置可不可以进行数据判断呢?</span></span><br><span class="line"><span class="comment">是不可以的，因为做数据校验，必须要依靠一些逻辑语句。</span></span><br><span class="line"><span class="comment">逻辑语句是应该定义在方法中的，所以，我们最终决定在Student类中提供一个方法</span></span><br><span class="line"><span class="comment">来对数据进行校验。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">按照我们前面的分析，我们给出了一个方法进行校验。</span></span><br><span class="line"><span class="comment">但是呢，它偏偏不调用方法来赋值，还是直接赋值了，</span></span><br><span class="line"><span class="comment">这样我们的方法就没有起到作用。</span></span><br><span class="line"><span class="comment">我就应该要求你必须使用我的方法，而不能直接调用成员变量赋值。</span></span><br><span class="line"><span class="comment">怎么去强制要求不能直接使用成员变量呢?</span></span><br><span class="line"><span class="comment">针对这种情况，Java就提供了一个关键字 private</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">private:私有的。可以修饰成员变量和成员方法。</span></span><br><span class="line"><span class="comment">注意：被private修饰的成员只能在本类中访问。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">其实我讲到现在讲解的是一个封装的思想。</span></span><br><span class="line"><span class="comment">封装：是指隐藏对象的属性和实现细节，仅对外提供公共访问方式。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="comment">//姓名</span></span><br><span class="line"><span class="built_in">String</span> name;</span><br><span class="line"><span class="comment">//年龄</span></span><br><span class="line">private int age;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写一个方法对数据进行校验</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">返回值类型：void</span></span><br><span class="line"><span class="comment">参数列表：int a</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">public <span class="keyword">void</span> setAge(int a) &#123;</span><br><span class="line"><span class="keyword">if</span>(a &lt; <span class="number">0</span> || a &gt; <span class="number">120</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"你给的年龄有问题"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">age = a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//show()方法,显示所有成员变量值</span></span><br><span class="line">public <span class="keyword">void</span> show() &#123;</span><br><span class="line">System.out.println(<span class="string">"姓名："</span>+name);</span><br><span class="line">System.out.println(<span class="string">"年龄："</span>+age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line"><span class="comment">//创建学生对象</span></span><br><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line">s.show();</span><br><span class="line">System.out.println(<span class="string">"--------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//给成员变量赋值</span></span><br><span class="line">s.name = <span class="string">"林青霞"</span>;</span><br><span class="line"><span class="comment">//s.age = 27;</span></span><br><span class="line">s.setAge(<span class="number">27</span>);</span><br><span class="line">s.show();</span><br><span class="line">System.out.println(<span class="string">"--------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//给age赋值</span></span><br><span class="line"><span class="comment">//s.age = -27; //这个数据是不合理的</span></span><br><span class="line"><span class="comment">//通过方法给值</span></span><br><span class="line">s.setAge(<span class="number">-27</span>);</span><br><span class="line">s.show();</span><br><span class="line">System.out.println(<span class="string">"--------------"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="private关键字的概述和特点"><a href="#private关键字的概述和特点" class="headerlink" title="private关键字的概述和特点"></a>private关键字的概述和特点</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">private:</span></span><br><span class="line"><span class="comment">是一个权限修饰符</span></span><br><span class="line"><span class="comment">可以修饰成员变量和成员方法</span></span><br><span class="line"><span class="comment">被其修饰的成员只能在本类中被访问</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="comment">//int num = 10;</span></span><br><span class="line"><span class="comment">//用private修饰</span></span><br><span class="line">private int num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">void</span> show() &#123;</span><br><span class="line">System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private <span class="keyword">void</span> method() &#123;</span><br><span class="line">System.out.println(<span class="string">"method"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">void</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">method();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrivateDemo</span> </span>&#123;</span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">Demo d = <span class="keyword">new</span> Demo();</span><br><span class="line"><span class="comment">//不能方法私有的成员变量</span></span><br><span class="line"><span class="comment">//System.out.println(d.num);</span></span><br><span class="line">d.show();</span><br><span class="line"><span class="comment">//不能访问私有的成员方法</span></span><br><span class="line"><span class="comment">//d.method();</span></span><br><span class="line">d<span class="function">.<span class="keyword">function</span>(<span class="params"></span>);</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="private的应用标准案例"><a href="#private的应用标准案例" class="headerlink" title="private的应用标准案例"></a>private的应用标准案例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">封装和private的应用：</span></span><br><span class="line"><span class="comment">A:把成员变量用private修饰</span></span><br><span class="line"><span class="comment">B:提高对应的getXxx()和setXxx()方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//定义学生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="comment">//姓名</span></span><br><span class="line">private <span class="built_in">String</span> name;</span><br><span class="line"><span class="comment">//年龄</span></span><br><span class="line">private int age;</span><br><span class="line"></span><br><span class="line"><span class="comment">//姓名获取值</span></span><br><span class="line">public <span class="built_in">String</span> getName() &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//姓名设置值</span></span><br><span class="line">public <span class="keyword">void</span> setName(<span class="built_in">String</span> n) &#123;</span><br><span class="line">name = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//年龄获取值</span></span><br><span class="line">public int getAge() &#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//年龄赋值</span></span><br><span class="line">public <span class="keyword">void</span> setAge(int a) &#123;</span><br><span class="line">age = a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentTest</span> </span>&#123;</span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line"><span class="comment">//创建学生对象</span></span><br><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用成员变量</span></span><br><span class="line"><span class="comment">//错误：被私有修饰了，外界不能直接访问了</span></span><br><span class="line"><span class="comment">//System.out.println(s.name+"---"+s.age);</span></span><br><span class="line">System.out.println(s.getName()+<span class="string">"---"</span>+s.getAge());</span><br><span class="line"></span><br><span class="line"><span class="comment">//给成员变量赋值</span></span><br><span class="line"><span class="comment">//s.name = "林青霞";</span></span><br><span class="line"><span class="comment">//s.age = 27;</span></span><br><span class="line"><span class="comment">//通过方法给赋值</span></span><br><span class="line">s.setName(<span class="string">"林青霞"</span>);</span><br><span class="line">s.setAge(<span class="number">27</span>);</span><br><span class="line">System.out.println(s.getName()+<span class="string">"---"</span>+s.getAge());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="this关键字的概述和应用"><a href="#this关键字的概述和应用" class="headerlink" title="this关键字的概述和应用"></a>this关键字的概述和应用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">我们曾经曰：起名字要做到见名知意。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">this:是当前类的对象引用。简单的记，它就代表当前类的一个对象。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意：谁调用这个方法，在该方法内部的this就代表谁。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">this的场景：</span></span><br><span class="line"><span class="comment">解决局部变量隐藏成员变量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//定义学生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="comment">//姓名</span></span><br><span class="line">private <span class="built_in">String</span> name;</span><br><span class="line"><span class="comment">//年龄</span></span><br><span class="line">private int age;</span><br><span class="line"></span><br><span class="line"><span class="comment">//姓名获取值</span></span><br><span class="line">public <span class="built_in">String</span> getName() &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//姓名设置值</span></span><br><span class="line">public <span class="keyword">void</span> setName(<span class="built_in">String</span> name) &#123; <span class="comment">//name = "林青霞";</span></span><br><span class="line"><span class="comment">//name = name; //变量的使用规则：就近原则</span></span><br><span class="line"><span class="comment">//这里是类名，目前还没有说过类似的用法，所以这个是有问题的</span></span><br><span class="line"><span class="comment">//这里的调用只能通过对象名</span></span><br><span class="line"><span class="comment">//这个对象如果存在，它应该代表的是Student的一个对象。</span></span><br><span class="line"><span class="comment">//那么，谁能够代表当前类的对象呢? java就提供了一个关键字 this</span></span><br><span class="line"><span class="comment">//Student.name = name;</span></span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//年龄获取值</span></span><br><span class="line">public int getAge() &#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//年龄赋值</span></span><br><span class="line">public <span class="keyword">void</span> setAge(int age) &#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentTest</span> </span>&#123;</span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line"><span class="comment">//创建学生对象</span></span><br><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line"><span class="comment">//给成员变量赋值</span></span><br><span class="line">s.setName(<span class="string">"林青霞"</span>);</span><br><span class="line">s.setAge(<span class="number">27</span>);</span><br><span class="line"><span class="comment">//获取数据</span></span><br><span class="line">System.out.println(s.getName()+<span class="string">"---"</span>+s.getAge());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">标准的代码改进版</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">this:哪个对象调用那个方法，this就代表那个对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">private <span class="built_in">String</span> name;</span><br><span class="line">private int age;</span><br><span class="line"></span><br><span class="line">public <span class="built_in">String</span> getName() &#123;</span><br><span class="line"><span class="keyword">return</span> name; <span class="comment">//这里其实是隐含了this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">void</span> setName(<span class="built_in">String</span> name) &#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int getAge() &#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">void</span> setAge(int age) &#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentTest2</span> </span>&#123;</span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line"><span class="comment">//创建一个对象</span></span><br><span class="line">Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">s1.setName(<span class="string">"林青霞"</span>);</span><br><span class="line">s1.setAge(<span class="number">27</span>);</span><br><span class="line">System.out.println(s1.getName()+<span class="string">"---"</span>+s1.getAge());</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建第二个对象</span></span><br><span class="line">Student s2 = <span class="keyword">new</span> Student();</span><br><span class="line">s2.setName(<span class="string">"刘意"</span>);</span><br><span class="line">s2.setAge(<span class="number">30</span>);</span><br><span class="line">System.out.println(s2.getName()+<span class="string">"---"</span>+s2.getAge());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="this关键字的内存图解"><a href="#this关键字的内存图解" class="headerlink" title="this关键字的内存图解"></a>this关键字的内存图解</h3><p><img src="https://images2015.cnblogs.com/blog/1118847/201705/1118847-20170504162105445-1789978008.png" alt="tupian1"></p><h3 id="标准手机类代码及其测试"><a href="#标准手机类代码及其测试" class="headerlink" title="标准手机类代码及其测试"></a>标准手机类代码及其测试</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作业：请把手机类写成一个标准类，然后创建对象测试功能。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">手机类：</span></span><br><span class="line"><span class="comment">成员变量：</span></span><br><span class="line"><span class="comment">品牌：String brand;</span></span><br><span class="line"><span class="comment">价格：int price;</span></span><br><span class="line"><span class="comment">颜色：String color;</span></span><br><span class="line"><span class="comment">成员方法：</span></span><br><span class="line"><span class="comment">针对每一个成员变量给出对应的getXxx()/setXxx()方法。</span></span><br><span class="line"><span class="comment">最后定义测试：</span></span><br><span class="line"><span class="comment">创建一个对象，先通过getXxx()方法输出成员变量的值。这一次的结果是：null---0---null</span></span><br><span class="line"><span class="comment">然后通过setXxx()方法给成员变量赋值。再次输出结果。这一次的结果是：三星---2999---土豪金</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"><span class="comment">//品牌</span></span><br><span class="line">private <span class="built_in">String</span> brand;</span><br><span class="line"><span class="comment">//价格</span></span><br><span class="line">private int price;</span><br><span class="line"><span class="comment">//颜色</span></span><br><span class="line">private <span class="built_in">String</span> color;</span><br><span class="line"></span><br><span class="line"><span class="comment">//getXxx()和setXxx()方法</span></span><br><span class="line">public <span class="built_in">String</span> getBrand() &#123;</span><br><span class="line"><span class="keyword">return</span> brand;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">void</span> setBrand(<span class="built_in">String</span> brand) &#123;</span><br><span class="line"><span class="keyword">this</span>.brand = brand;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int getPrice() &#123;</span><br><span class="line"><span class="keyword">return</span> price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">void</span> setPrice(int price) &#123;</span><br><span class="line"><span class="keyword">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="built_in">String</span> getColor() &#123;</span><br><span class="line"><span class="keyword">return</span> color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">void</span> setColor(<span class="built_in">String</span> color) &#123;</span><br><span class="line"><span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneTest</span> </span>&#123;</span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line"><span class="comment">//创建手机对象</span></span><br><span class="line">Phone p = <span class="keyword">new</span> Phone();</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接输出默认值</span></span><br><span class="line">System.out.println(p.getBrand()+<span class="string">"---"</span>+p.getPrice()+<span class="string">"---"</span>+p.getColor());</span><br><span class="line"></span><br><span class="line"><span class="comment">//给成员变量赋值</span></span><br><span class="line">p.setBrand(<span class="string">"三星"</span>);</span><br><span class="line">p.setPrice(<span class="number">2999</span>);</span><br><span class="line">p.setColor(<span class="string">"土豪金"</span>);</span><br><span class="line"><span class="comment">//再次输出</span></span><br><span class="line">System.out.println(p.getBrand()+<span class="string">"---"</span>+p.getPrice()+<span class="string">"---"</span>+p.getColor());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造方法概述和格式"><a href="#构造方法概述和格式" class="headerlink" title="构造方法概述和格式"></a>构造方法概述和格式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造方法：</span></span><br><span class="line"><span class="comment">给对象的数据进行初始化</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">格式：</span></span><br><span class="line"><span class="comment">A:方法名与类名相同</span></span><br><span class="line"><span class="comment">B:没有返回值类型，连void都没有</span></span><br><span class="line"><span class="comment">C:没有具体的返回值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">private <span class="built_in">String</span> name; <span class="comment">//null</span></span><br><span class="line">private int age; <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line">public Student() &#123;</span><br><span class="line">System.out.println(<span class="string">"这是构造方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConstructDemo</span> </span>&#123;</span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line">System.out.println(s); <span class="comment">//Student@e5bbd6</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造方法的重载及注意事项"><a href="#构造方法的重载及注意事项" class="headerlink" title="构造方法的重载及注意事项"></a>构造方法的重载及注意事项</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">我们一直在使用构造方法，但是，我们确没有定义构造方法，用的是哪里来的呢?</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">构造方法的注意事项:</span></span><br><span class="line"><span class="comment">A:如果我们没有给出构造方法，系统将自动提供一个无参构造方法。</span></span><br><span class="line"><span class="comment">B:如果我们给出了构造方法，系统将不再提供默认的无参构造方法。</span></span><br><span class="line"><span class="comment">注意：这个时候，如果我们还想使用无参构造方法，就必须自己给出。建议永远自己给出无参构造方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">给成员变量赋值有两种方式：</span></span><br><span class="line"><span class="comment">A:setXxx()</span></span><br><span class="line"><span class="comment">B:构造方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">private <span class="built_in">String</span> name;</span><br><span class="line">private int age;</span><br><span class="line"></span><br><span class="line">public Student() &#123;</span><br><span class="line"><span class="comment">//System.out.println("我给了，你还给不");</span></span><br><span class="line">System.out.println(<span class="string">"这是无参构造方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造方法的重载格式</span></span><br><span class="line">public Student(<span class="built_in">String</span> name) &#123;</span><br><span class="line">System.out.println(<span class="string">"这是带一个String类型的构造方法"</span>);</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Student(int age) &#123;</span><br><span class="line">System.out.println(<span class="string">"这是带一个int类型的构造方法"</span>);</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Student(<span class="built_in">String</span> name,int age) &#123;</span><br><span class="line">System.out.println(<span class="string">"这是一个带多个参数的构造方法"</span>);</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">void</span> show() &#123;</span><br><span class="line">System.out.println(name+<span class="string">"---"</span>+age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConstructDemo2</span> </span>&#123;</span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line">s.show();</span><br><span class="line">System.out.println(<span class="string">"-------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建对象2</span></span><br><span class="line">Student s2 = <span class="keyword">new</span> Student(<span class="string">"林青霞"</span>);</span><br><span class="line">s2.show();</span><br><span class="line">System.out.println(<span class="string">"-------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建对象3</span></span><br><span class="line">Student s3 = <span class="keyword">new</span> Student(<span class="number">27</span>);</span><br><span class="line">s3.show();</span><br><span class="line">System.out.println(<span class="string">"-------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建对象4</span></span><br><span class="line">Student s4 = <span class="keyword">new</span> Student(<span class="string">"林青霞"</span>,<span class="number">27</span>);</span><br><span class="line">s4.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="成员方法的分类及使用"><a href="#成员方法的分类及使用" class="headerlink" title="成员方法的分类及使用"></a>成员方法的分类及使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    类的组成：成员变量，成员方法</span></span><br><span class="line"><span class="comment">    今天我们又加入了一个新的成员：构造方法。</span></span><br><span class="line"><span class="comment">    以后再提类的组成：</span></span><br><span class="line"><span class="comment">        1、成员变量</span></span><br><span class="line"><span class="comment">        2、构造方法</span></span><br><span class="line"><span class="comment">        3、成员方法</span></span><br><span class="line"><span class="comment">            根据返回值：</span></span><br><span class="line"><span class="comment">                void类型</span></span><br><span class="line"><span class="comment">                非void类型</span></span><br><span class="line"><span class="comment">            形式参数：</span></span><br><span class="line"><span class="comment">                空参方法</span></span><br><span class="line"><span class="comment">                非空参方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    public <span class="built_in">String</span> getString() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"helloworld"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">void</span> show() &#123;</span><br><span class="line">        System.out.println(<span class="string">"show"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public <span class="keyword">void</span> method(<span class="built_in">String</span> name) &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public <span class="built_in">String</span> <span class="function"><span class="keyword">function</span>(<span class="params">String s1,String s2</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s1+s2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用无参无返回值方法</span></span><br><span class="line">        s.show();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用无参有返回值方法</span></span><br><span class="line">        <span class="built_in">String</span> result = s.getString();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用带参无返回值的方法</span></span><br><span class="line">        s.method(<span class="string">"林青霞"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用带参带返回值的方法</span></span><br><span class="line">        <span class="built_in">String</span> result2 = s<span class="function">.<span class="keyword">function</span>(<span class="params"><span class="string">"hello"</span>,<span class="string">"world"</span></span>);</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span>(<span class="params">result2</span>);</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="一个标准学生类的代码及测试"><a href="#一个标准学生类的代码及测试" class="headerlink" title="一个标准学生类的代码及测试"></a>一个标准学生类的代码及测试</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一个标准代码的最终版。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">学生类：</span></span><br><span class="line"><span class="comment">成员变量：</span></span><br><span class="line"><span class="comment">name，age</span></span><br><span class="line"><span class="comment">构造方法：</span></span><br><span class="line"><span class="comment">无参，带两个参</span></span><br><span class="line"><span class="comment">成员方法：</span></span><br><span class="line"><span class="comment">getXxx()/setXxx()</span></span><br><span class="line"><span class="comment">show()：输出该类的所有成员变量值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">给成员变量赋值：</span></span><br><span class="line"><span class="comment">A:setXxx()方法</span></span><br><span class="line"><span class="comment">B:构造方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输出成员变量值的方式：</span></span><br><span class="line"><span class="comment">A:通过getXxx()分别获取然后拼接</span></span><br><span class="line"><span class="comment">B:通过调用show()方法搞定</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="comment">//姓名</span></span><br><span class="line">private <span class="built_in">String</span> name;</span><br><span class="line"><span class="comment">//年龄</span></span><br><span class="line">private int age;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造方法</span></span><br><span class="line">public Student() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Student(<span class="built_in">String</span> name,int age) &#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="built_in">String</span> getName() &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">void</span> setName(<span class="built_in">String</span> name) &#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int getAge() &#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">void</span> setAge(int age) &#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出所有的成员变量值</span></span><br><span class="line">public <span class="keyword">void</span> show() &#123;</span><br><span class="line">System.out.println(name+<span class="string">"---"</span>+age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentTest</span> </span>&#123;</span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line"><span class="comment">//方式1给成员变量赋值</span></span><br><span class="line"><span class="comment">//无参构造+setXxx()</span></span><br><span class="line">Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">s1.setName(<span class="string">"林青霞"</span>);</span><br><span class="line">s1.setAge(<span class="number">27</span>);</span><br><span class="line"><span class="comment">//输出值</span></span><br><span class="line">System.out.println(s1.getName()+<span class="string">"---"</span>+s1.getAge());</span><br><span class="line">s1.show();</span><br><span class="line">System.out.println(<span class="string">"----------------------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2给成员变量赋值</span></span><br><span class="line">Student s2 = <span class="keyword">new</span> Student(<span class="string">"刘意"</span>,<span class="number">30</span>);</span><br><span class="line">System.out.println(s2.getName()+<span class="string">"---"</span>+s2.getAge());</span><br><span class="line">s2.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一个标准手机类的代码及测试"><a href="#一个标准手机类的代码及测试" class="headerlink" title="一个标准手机类的代码及测试"></a>一个标准手机类的代码及测试</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">标准的手机类练习</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">手机类：</span></span><br><span class="line"><span class="comment">成员变量：brand,price,color</span></span><br><span class="line"><span class="comment">构造方法：无参构造</span></span><br><span class="line"><span class="comment">成员方法：getXxx()/setXxx()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//定义手机类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"><span class="comment">//品牌</span></span><br><span class="line">private <span class="built_in">String</span> brand;</span><br><span class="line"><span class="comment">//价格</span></span><br><span class="line">private int price;</span><br><span class="line"><span class="comment">//颜色</span></span><br><span class="line">private <span class="built_in">String</span> color;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无参构造方法</span></span><br><span class="line">public Phone() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//getXxx()和setXxx()方法</span></span><br><span class="line">public <span class="built_in">String</span> getBrand() &#123;</span><br><span class="line"><span class="keyword">return</span> brand;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">void</span> setBrand(<span class="built_in">String</span> brand) &#123;</span><br><span class="line"><span class="keyword">this</span>.brand = brand;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int getPrice() &#123;</span><br><span class="line"><span class="keyword">return</span> price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">void</span> setPrice(int price) &#123;</span><br><span class="line"><span class="keyword">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="built_in">String</span> getColor() &#123;</span><br><span class="line"><span class="keyword">return</span> color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">void</span> setColor(<span class="built_in">String</span> color) &#123;</span><br><span class="line"><span class="keyword">this</span>.color = color;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//手机测试类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneTest</span> </span>&#123;</span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">Phone p = <span class="keyword">new</span> Phone();</span><br><span class="line"></span><br><span class="line"><span class="comment">//给成员变量赋值</span></span><br><span class="line">p.setBrand(<span class="string">"诺基亚"</span>);</span><br><span class="line">p.setPrice(<span class="number">199</span>);</span><br><span class="line">p.setColor(<span class="string">"土豪金"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取值</span></span><br><span class="line">System.out.println(p.getBrand()+<span class="string">"---"</span>+p.getPrice()+<span class="string">"---"</span>+p.getColor());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建对象做了哪些事情"><a href="#创建对象做了哪些事情" class="headerlink" title="创建对象做了哪些事情"></a>创建对象做了哪些事情</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)把Student.class文件加载到内存</span><br><span class="line">    (<span class="number">2</span>)在栈内存为s开辟空间</span><br><span class="line">    (<span class="number">3</span>)在堆内存为学生对象申请空间</span><br><span class="line">    (<span class="number">4</span>)给学生的成员变量进行默认初始化。<span class="literal">null</span>,<span class="number">0</span></span><br><span class="line">    (<span class="number">5</span>)给学生的成员变量进行显示初始化。林青霞,<span class="number">27</span></span><br><span class="line">    (<span class="number">6</span>)通过构造方法给成员变量进行初始化。刘意,<span class="number">30</span></span><br><span class="line">    (<span class="number">7</span>)对象构造完毕，把地址赋值给s变量</span><br></pre></td></tr></table></figure><p><img src="https://images2015.cnblogs.com/blog/1118847/201705/1118847-20170504201143023-1077701906.png" alt="tupian111"></p><h3 id="什么时候定义成员变量"><a href="#什么时候定义成员变量" class="headerlink" title="什么时候定义成员变量"></a>什么时候定义成员变量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">定义一个类Demo,其中定义一个求两个数据和的方法，</span></span><br><span class="line"><span class="comment">定义一个测试了Test，进行测试。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">变量什么时候定义为成员变量：</span></span><br><span class="line"><span class="comment">如果这个变量是用来描述这个类的信息的，那么，该变量就应该定义为成员变量。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">变量到底定义在哪里好呢?</span></span><br><span class="line"><span class="comment">变量的范围是越小越好。因为能及时的被回收。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式1</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">class Demo &#123;</span></span><br><span class="line"><span class="comment">public int sum() &#123;</span></span><br><span class="line"><span class="comment">int a = 10;</span></span><br><span class="line"><span class="comment">int b = 20;</span></span><br><span class="line"><span class="comment">int c = a + b;</span></span><br><span class="line"><span class="comment">return c;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//方式1满足了我们的要求，但是不好。</span></span><br><span class="line"><span class="comment">//因为参与操作的数据现在是固定的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">class Demo &#123;</span></span><br><span class="line"><span class="comment">public int sum(int a,int b) &#123;</span></span><br><span class="line"><span class="comment">return a + b;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2可以满足我们的要求，但是呢我们学习过来面向对象的思想。</span></span><br><span class="line"><span class="comment">//我就再想，a，b可不可以定义为成员变量呢?</span></span><br><span class="line"><span class="comment">//如果可以，我们再改进一版</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">int a;</span><br><span class="line">int b;</span><br><span class="line"></span><br><span class="line">public int sum() &#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//虽然这种方式可以，并且好像是符合了面向对象的思想。</span></span><br><span class="line"><span class="comment">//但是不好。</span></span><br><span class="line"><span class="comment">//因为我们曾经说过：类是一组相关的属性和行为的集合。</span></span><br><span class="line"><span class="comment">//并且类是通过事物转换过来的</span></span><br><span class="line"><span class="comment">//而类中的成员变量就是事物的属性</span></span><br><span class="line"><span class="comment">//属性是用来描述事物的</span></span><br><span class="line"><span class="comment">//同理：成员变量其实是用来描述类的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line"><span class="comment">//方式1测试</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Demo d = new Demo();</span></span><br><span class="line"><span class="comment">System.out.println(d.sum());</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2测试</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Demo d = new Demo();</span></span><br><span class="line"><span class="comment">int a = 10;</span></span><br><span class="line"><span class="comment">int b = 20;</span></span><br><span class="line"><span class="comment">System.out.println(d.sum(a,b));</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式3测试</span></span><br><span class="line">Demo d = <span class="keyword">new</span> Demo();</span><br><span class="line">d.a = <span class="number">10</span>;</span><br><span class="line">d.b = <span class="number">20</span>;</span><br><span class="line">System.out.println(d.sum());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="长方形案例练习"><a href="#长方形案例练习" class="headerlink" title="长方形案例练习"></a>长方形案例练习</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">定义一个长方形类,定义 求周长和面积的方法，</span></span><br><span class="line"><span class="comment">然后定义一个测试了Test2，进行测试。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">长方形的类：</span></span><br><span class="line"><span class="comment">成员变量：</span></span><br><span class="line"><span class="comment">长，宽</span></span><br><span class="line"><span class="comment">成员方法：</span></span><br><span class="line"><span class="comment">求周长：(长+宽)*2;</span></span><br><span class="line"><span class="comment">求面积：长*宽</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意：</span></span><br><span class="line"><span class="comment">import必须出现在所有的class前面。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChangFangXing</span> </span>&#123;</span><br><span class="line"><span class="comment">//长方形的长</span></span><br><span class="line">private int length;</span><br><span class="line"><span class="comment">//长方形的宽</span></span><br><span class="line">private int width;</span><br><span class="line"></span><br><span class="line">public ChangFangXing()&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//仅仅提供setXxx()即可</span></span><br><span class="line">public <span class="keyword">void</span> setLength(int length) &#123;</span><br><span class="line"><span class="keyword">this</span>.length = length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">void</span> setWidth(int width) &#123;</span><br><span class="line"><span class="keyword">this</span>.width = width;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求周长</span></span><br><span class="line">public int getZhouChang() &#123;</span><br><span class="line"><span class="keyword">return</span> (length + width) * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求面积</span></span><br><span class="line">public int getArea() &#123;</span><br><span class="line"><span class="keyword">return</span> length * width;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line"><span class="comment">//创建键盘录入对象</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"请输入长方形的长："</span>);</span><br><span class="line">int length = sc.nextInt();</span><br><span class="line">System.out.println(<span class="string">"请输入长方形的宽："</span>);</span><br><span class="line">int width = sc.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">ChangFangXing cfx = <span class="keyword">new</span> ChangFangXing();</span><br><span class="line"><span class="comment">//先给成员变量赋值</span></span><br><span class="line">cfx.setLength(length);</span><br><span class="line">cfx.setWidth(width);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"周长是："</span>+cfx.getZhouChang());</span><br><span class="line">System.out.println(<span class="string">"面积是："</span>+cfx.getArea());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="员工类案例练习"><a href="#员工类案例练习" class="headerlink" title="员工类案例练习"></a>员工类案例练习</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">需求：</span></span><br><span class="line"><span class="comment">定义一个员工类,自己分析出几个成员，</span></span><br><span class="line"><span class="comment">然后给出成员变量，构造方法，getXxx()/setXxx()方法，</span></span><br><span class="line"><span class="comment">以及一个显示所有成员信息的方法。并测试。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分析：</span></span><br><span class="line"><span class="comment">员工</span></span><br><span class="line"><span class="comment">成员变量：</span></span><br><span class="line"><span class="comment">员工编号，姓名，年龄</span></span><br><span class="line"><span class="comment">构造方法：</span></span><br><span class="line"><span class="comment">无参构造方法</span></span><br><span class="line"><span class="comment">成员方法：</span></span><br><span class="line"><span class="comment">getXxx()/setXxx()</span></span><br><span class="line"><span class="comment">show();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"><span class="comment">//员工编号</span></span><br><span class="line">private <span class="built_in">String</span> employeeId;</span><br><span class="line"><span class="comment">//姓名</span></span><br><span class="line">private <span class="built_in">String</span> name;</span><br><span class="line"><span class="comment">//年龄</span></span><br><span class="line">private int age;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造方法</span></span><br><span class="line">public Employee() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//getXxx()/setXxx()</span></span><br><span class="line">public <span class="built_in">String</span> getEmployeeId() &#123;</span><br><span class="line"><span class="keyword">return</span> employeeId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">void</span> setEmployeeId(<span class="built_in">String</span> employeeId) &#123;</span><br><span class="line"><span class="keyword">this</span>.employeeId = employeeId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="built_in">String</span> getName() &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">void</span> setName(<span class="built_in">String</span> name) &#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int getAge() &#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">void</span> setAge(int age) &#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示所有成员信息的方法</span></span><br><span class="line">public <span class="keyword">void</span> show() &#123;</span><br><span class="line">System.out.println(<span class="string">"员工编号是："</span>+employeeId+<span class="string">"的这个人是："</span>+name+<span class="string">"的年龄是："</span>+age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmployeeTest</span> </span>&#123;</span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">Employee e = <span class="keyword">new</span> Employee();</span><br><span class="line"></span><br><span class="line"><span class="comment">//给成员变量赋值</span></span><br><span class="line">e.setEmployeeId(<span class="string">"czbk9527"</span>);</span><br><span class="line">e.setName(<span class="string">"唐伯虎"</span>);</span><br><span class="line">e.setAge(<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取数据</span></span><br><span class="line"><span class="comment">//System.out.println(e.getEmployeeId()+"---"+e.getName()+"---"+e.getAge());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//我们在Employee类中定义了一个show方法。所以，我们改进一下，使用show方法</span></span><br><span class="line">e.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自己实现加减乘除并测试"><a href="#自己实现加减乘除并测试" class="headerlink" title="自己实现加减乘除并测试"></a>自己实现加减乘除并测试</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">定义一个类MyMath,提供基本的加减乘除功能，然后进行测试。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMath</span> </span>&#123;</span><br><span class="line"><span class="comment">//加法功能</span></span><br><span class="line">public int add(int a,int b) &#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//减法功能</span></span><br><span class="line">public int sub(int a,int b) &#123;</span><br><span class="line"><span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//乘法功能</span></span><br><span class="line">public int mul(int a,int b)&#123;</span><br><span class="line"><span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//除法功能</span></span><br><span class="line">public int div(int a,int b) &#123;</span><br><span class="line"><span class="keyword">return</span> a / b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMathTest</span> </span>&#123;</span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line"><span class="comment">//创建键盘录入对象</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"请输入第一个操作数："</span>);</span><br><span class="line">int firstNumber = sc.nextInt();</span><br><span class="line">System.out.println(<span class="string">"请输入第二个操作数："</span>);</span><br><span class="line">int secondNumber = sc.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建MyMath对象，并使用</span></span><br><span class="line">MyMath mm = <span class="keyword">new</span> MyMath();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"加法结果："</span>+mm.add(firstNumber,secondNumber));</span><br><span class="line">System.out.println(<span class="string">"减法结果："</span>+mm.sub(firstNumber,secondNumber));</span><br><span class="line">System.out.println(<span class="string">"乘法结果："</span>+mm.mul(firstNumber,secondNumber));</span><br><span class="line">System.out.println(<span class="string">"除法结果："</span>+mm.div(firstNumber,secondNumber));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="static关键字的引入"><a href="#static关键字的引入" class="headerlink" title="static关键字的引入"></a>static关键字的引入</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span>关键字(理解)</span><br><span class="line">    (<span class="number">1</span>)静态的意思。可以修饰成员变量和成员方法。</span><br><span class="line">    (<span class="number">2</span>)静态的特点：</span><br><span class="line">        A:随着类的加载而加载</span><br><span class="line">        B:优先与对象存在</span><br><span class="line">        C:被类的所有对象共享</span><br><span class="line">            这其实也是我们判断该不该使用静态的依据。</span><br><span class="line">            举例：饮水机和水杯的问题思考</span><br><span class="line">        D:可以通过类名调用</span><br><span class="line">            既可以通过对象名调用，也可以通过类名调用，建议通过类名调用。</span><br><span class="line">    (<span class="number">3</span>)静态的内存图</span><br><span class="line">        静态的内容在方法区的静态区</span><br><span class="line">    (<span class="number">4</span>)静态的注意事项；</span><br><span class="line">        A:在静态方法中没有<span class="keyword">this</span>对象</span><br><span class="line">        B:静态只能访问静态(代码测试过)</span><br><span class="line">    (<span class="number">5</span>)静态变量和成员变量的区别</span><br><span class="line">        A:所属不同</span><br><span class="line">            静态变量：属于类，类变量</span><br><span class="line">            成员变量：属于对象，对象变量，实例变量</span><br><span class="line">        B:内存位置不同</span><br><span class="line">            静态变量：方法区的静态区</span><br><span class="line">            成员变量：堆内存</span><br><span class="line">        C:生命周期不同</span><br><span class="line">            静态变量：静态变量是随着类的加载而加载，随着类的消失而消失</span><br><span class="line">            成员变量：成员变量是随着对象的创建而存在，随着对象的消失而消失</span><br><span class="line">        D:调用不同</span><br><span class="line">            静态变量：可以通过对象名调用，也可以通过类名调用</span><br><span class="line">            成员变量：只能通过对象名调用</span><br><span class="line">    (<span class="number">6</span>)main方法是静态的</span><br><span class="line">        public:权限最大</span><br><span class="line">        <span class="keyword">static</span>:不用创建对象调用</span><br><span class="line">        <span class="keyword">void</span>:返回值给jvm没有意义</span><br><span class="line">        main:就是一个常见的名称。</span><br><span class="line">        <span class="built_in">String</span>[] args:可以接收数据，提供程序的灵活性</span><br><span class="line">            格式：java MainDemo hello world java</span><br><span class="line">                  java MainDemo <span class="number">10</span> <span class="number">20</span> <span class="number">30</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">定义一个人类</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">姓名和年龄都是变化的，这个我能接收，因为每个人的姓名和年龄是不同的。</span></span><br><span class="line"><span class="comment">但是，我们现在选取的几个人都是中国人，他们的国籍是一样的。</span></span><br><span class="line"><span class="comment">一样的国籍，我每次创建对象，在堆内存都要开辟这样的空间，</span></span><br><span class="line"><span class="comment">我就觉得有点浪费了。怎么办呢? </span></span><br><span class="line"><span class="comment">针对多个对象有共同的这样的成员变量值的时候，</span></span><br><span class="line"><span class="comment">Java就提高了一个关键字来修饰：static。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="comment">//姓名</span></span><br><span class="line"><span class="built_in">String</span> name;</span><br><span class="line"><span class="comment">//年龄</span></span><br><span class="line">int age;</span><br><span class="line"><span class="comment">//国籍</span></span><br><span class="line"><span class="comment">//String country;</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">String</span> country;</span><br><span class="line"></span><br><span class="line">public Person()&#123;&#125;</span><br><span class="line"></span><br><span class="line">public Person(<span class="built_in">String</span> name,int age) &#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Person(<span class="built_in">String</span> name,int age,<span class="built_in">String</span> country) &#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.country = country;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">void</span> show() &#123;</span><br><span class="line">System.out.println(<span class="string">"姓名："</span>+name+<span class="string">",年龄："</span>+age+<span class="string">",国籍："</span>+country);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonDemo</span> </span>&#123;</span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line"><span class="comment">//创建对象1</span></span><br><span class="line">Person p1 = <span class="keyword">new</span> Person(<span class="string">"邓丽君"</span>,<span class="number">16</span>,<span class="string">"中国"</span>);</span><br><span class="line">p1.show();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建对象2</span></span><br><span class="line"><span class="comment">//Person p2 = new Person("杨幂",22,"中国");</span></span><br><span class="line"><span class="comment">//p2.show();</span></span><br><span class="line">Person p2 = <span class="keyword">new</span> Person(<span class="string">"杨幂"</span>,<span class="number">22</span>);</span><br><span class="line">p2.show();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建对象3</span></span><br><span class="line"><span class="comment">//Person p3 = new Person("凤姐",20,"中国");</span></span><br><span class="line"><span class="comment">//p3.show();</span></span><br><span class="line">Person p3 = <span class="keyword">new</span> Person(<span class="string">"凤姐"</span>,<span class="number">20</span>);</span><br><span class="line">p3.show();</span><br><span class="line"></span><br><span class="line">p3.country = <span class="string">"美国"</span>;</span><br><span class="line">p3.show();</span><br><span class="line"></span><br><span class="line">p1.show();</span><br><span class="line">p2.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="static关键字的特点"><a href="#static关键字的特点" class="headerlink" title="static关键字的特点"></a>static关键字的特点</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">static的特点：(它可以修饰成员变量，还可以修饰成员方法)</span></span><br><span class="line"><span class="comment">A:随着类的加载而加载</span></span><br><span class="line"><span class="comment">回想main方法。</span></span><br><span class="line"><span class="comment">B:优先于对象存在</span></span><br><span class="line"><span class="comment">C:被类的所有对象共享</span></span><br><span class="line"><span class="comment">举例：咱们班级的学生应该共用同一个班级编号。</span></span><br><span class="line"><span class="comment">其实这个特点也是在告诉我们什么时候使用静态?</span></span><br><span class="line"><span class="comment">如果某个成员变量是被所有对象共享的，那么它就应该定义为静态的。</span></span><br><span class="line"><span class="comment">举例：</span></span><br><span class="line"><span class="comment">饮水机(用静态修饰)</span></span><br><span class="line"><span class="comment">水杯(不能用静态修饰)</span></span><br><span class="line"><span class="comment">D:可以通过类名调用</span></span><br><span class="line"><span class="comment">其实它本身也可以通过对象名调用。</span></span><br><span class="line"><span class="comment">推荐使用类名调用。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">静态修饰的内容一般我们称其为：与类相关的，类成员</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="comment">//非静态变量</span></span><br><span class="line">int num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态变量</span></span><br><span class="line"><span class="keyword">static</span> int num2 = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line">System.out.println(s.num);</span><br><span class="line"></span><br><span class="line">System.out.println(Student.num2);</span><br><span class="line">System.out.println(s.num2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="static关键字的内存图解"><a href="#static关键字的内存图解" class="headerlink" title="static关键字的内存图解"></a>static关键字的内存图解</h3><p><img src="https://images2015.cnblogs.com/blog/1118847/201705/1118847-20170504220820429-1391271611.png" alt="tupian2222"></p><h3 id="static关键字的注意事项"><a href="#static关键字的注意事项" class="headerlink" title="static关键字的注意事项"></a>static关键字的注意事项</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">static关键字注意事项</span></span><br><span class="line"><span class="comment">A:在静态方法中是没有this关键字的</span></span><br><span class="line"><span class="comment">如何理解呢?</span></span><br><span class="line"><span class="comment">静态是随着类的加载而加载，this是随着对象的创建而存在。</span></span><br><span class="line"><span class="comment">静态比对象先存在。</span></span><br><span class="line"><span class="comment">B:静态方法只能访问静态的成员变量和静态的成员方法</span></span><br><span class="line"><span class="comment">静态方法：</span></span><br><span class="line"><span class="comment">成员变量：只能访问静态变量</span></span><br><span class="line"><span class="comment">成员方法：只能访问静态成员方法</span></span><br><span class="line"><span class="comment">非静态方法：</span></span><br><span class="line"><span class="comment">成员变量：可以是静态的，也可以是非静态的</span></span><br><span class="line"><span class="comment">成员方法：可是是静态的成员方法，也可以是非静态的成员方法。</span></span><br><span class="line"><span class="comment">简单记：</span></span><br><span class="line"><span class="comment">静态只能访问静态。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">public int num = <span class="number">10</span>;</span><br><span class="line">public <span class="keyword">static</span> int num2 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">void</span> show() &#123;</span><br><span class="line">System.out.println(num); <span class="comment">//隐含的告诉你访问的是成员变量</span></span><br><span class="line">System.out.println(<span class="keyword">this</span>.num); <span class="comment">//明确的告诉你访问的是成员变量</span></span><br><span class="line">System.out.println(num2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//function();</span></span><br><span class="line"><span class="comment">//function2();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> method() &#123;</span><br><span class="line"><span class="comment">//无法从静态上下文中引用非静态 变量 num</span></span><br><span class="line"><span class="comment">//System.out.println(num);</span></span><br><span class="line">System.out.println(num2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//无法从静态上下文中引用非静态 方法 function()</span></span><br><span class="line"><span class="comment">//function();</span></span><br><span class="line">function2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">void</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> function2() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TeacherDemo</span> </span>&#123;</span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">Teacher t = <span class="keyword">new</span> Teacher();</span><br><span class="line">t.show();</span><br><span class="line">System.out.println(<span class="string">"------------"</span>);</span><br><span class="line">t.method();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main方法的格式详解"><a href="#main方法的格式详解" class="headerlink" title="main方法的格式详解"></a>main方法的格式详解</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">main方法的格式讲解：</span></span><br><span class="line"><span class="comment">public static void main(String[] args) &#123;...&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public:公共的，访问权限是最大的。由于main方法是被jvm调用，所以权限要够大。</span></span><br><span class="line"><span class="comment">static:静态的，不需要创建对象，通过类名就可以。方便jvm的调用。</span></span><br><span class="line"><span class="comment">void:因为我们曾经说过，方法的返回值是返回给调用者，而main方法是被jvm调用。你返回内容给jvm没有意义。</span></span><br><span class="line"><span class="comment">main:是一个常见的方法入口。我见过的语言都是以main作为入口。</span></span><br><span class="line"><span class="comment">String[] args:这是一个字符串数组。值去哪里了?</span></span><br><span class="line"><span class="comment">这个东西到底有什么用啊?怎么给值啊?</span></span><br><span class="line"><span class="comment">这个东西早期是为了接收键盘录入的数据的。</span></span><br><span class="line"><span class="comment">格式是：</span></span><br><span class="line"><span class="comment">java MainDemo hello world java</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainDemo</span> </span>&#123;</span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line"><span class="comment">//System.out.println(args); //[Ljava.lang.String;@175078b</span></span><br><span class="line"><span class="comment">//System.out.println(args.length); //0</span></span><br><span class="line"><span class="comment">//System.out.println(args[0]); //ArrayIndexOutOfBoundsException</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//接收数据后</span></span><br><span class="line">System.out.println(args); </span><br><span class="line">System.out.println(args.length); </span><br><span class="line"><span class="comment">//System.out.println(args[0]); </span></span><br><span class="line"><span class="keyword">for</span>(int x=<span class="number">0</span>; x&lt;args.length; x++) &#123;</span><br><span class="line">System.out.println(args[x]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;面向对象&quot;&gt;&lt;a href=&quot;#面向对象&quot; class=&quot;headerlink&quot; title=&quot;面向对象&quot;&gt;&lt;/a&gt;面向对象&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Java系统学习-JavaSE篇" scheme="https://stephencurry6666.github.io/categories/Java%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0-JavaSE%E7%AF%87/"/>
    
    
      <category term="Java系统学习" scheme="https://stephencurry6666.github.io/tags/Java%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE-Day(6)学习笔记</title>
    <link href="https://stephencurry6666.github.io/2020/05/25/JavaSE-Day(6)%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://stephencurry6666.github.io/2020/05/25/JavaSE-Day(6)%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-05-25T08:39:31.319Z</published>
    <updated>2020-05-26T03:54:54.798Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java语言基础"><a href="#Java语言基础" class="headerlink" title="Java语言基础"></a>Java语言基础</h2><a id="more"></a><h3 id="二维数组概述和格式1的讲解"><a href="#二维数组概述和格式1的讲解" class="headerlink" title="二维数组概述和格式1的讲解"></a>二维数组概述和格式1的讲解</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">二维数组：就是元素为一维数组的一个数组。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">格式1：</span></span><br><span class="line"><span class="comment">数据类型[][] 数组名 = new 数据类型[m][n];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">m:表示这个二维数组有多少个一维数组。</span></span><br><span class="line"><span class="comment">n:表示每一个一维数组的元素有多少个。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意：</span></span><br><span class="line"><span class="comment">A:以下格式也可以表示二维数组</span></span><br><span class="line"><span class="comment">a:数据类型 数组名[][] = new 数据类型[m][n];</span></span><br><span class="line"><span class="comment">b:数据类型[] 数组名[] = new 数据类型[m][n];</span></span><br><span class="line"><span class="comment">B:注意下面定义的区别</span></span><br><span class="line"><span class="comment">int x;</span></span><br><span class="line"><span class="comment">int y;</span></span><br><span class="line"><span class="comment">int x,y;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int[] x;</span></span><br><span class="line"><span class="comment">int[] y[];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int[] x,y[];</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Array2Demo</span> </span>&#123;</span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line"> <span class="comment">//定义一个二维数组</span></span><br><span class="line"> int[][] arr = <span class="keyword">new</span> int[<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line"> <span class="comment">//定义了一个二维数组arr</span></span><br><span class="line"> <span class="comment">//这个二维数组有3个一维数组的元素</span></span><br><span class="line"> <span class="comment">//每一个一维数组有2个元素</span></span><br><span class="line"> <span class="comment">//输出二维数组名称</span></span><br><span class="line"> System.out.println(arr); <span class="comment">//地址值[[I@175078b</span></span><br><span class="line"> <span class="comment">//输出二维数组的第一个元素一维数组的名称</span></span><br><span class="line"> System.out.println(arr[<span class="number">0</span>]); <span class="comment">//地址值[I@42552c</span></span><br><span class="line"> System.out.println(arr[<span class="number">1</span>]); <span class="comment">//地址值[I@e5bbd6</span></span><br><span class="line"> System.out.println(arr[<span class="number">2</span>]); <span class="comment">//地址值[I@8ee016</span></span><br><span class="line"> <span class="comment">//输出二维数组的元素</span></span><br><span class="line"> System.out.println(arr[<span class="number">0</span>][<span class="number">0</span>]); <span class="comment">//0</span></span><br><span class="line"> System.out.println(arr[<span class="number">0</span>][<span class="number">1</span>]); <span class="comment">//0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二维数组格式1的内存图解"><a href="#二维数组格式1的内存图解" class="headerlink" title="二维数组格式1的内存图解"></a>二维数组格式1的内存图解</h3><p><img src="https://images2015.cnblogs.com/blog/1118847/201705/1118847-20170504094130648-1700902522.png" alt="tupian1"></p><h3 id="二维数组格式2的讲解"><a href="#二维数组格式2的讲解" class="headerlink" title="二维数组格式2的讲解"></a>二维数组格式2的讲解</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">格式2：</span></span><br><span class="line"><span class="comment">数据类型[][] 数组名 = new 数据类型[m][];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">m:表示这个二维数组有多少个一维数组。</span></span><br><span class="line"><span class="comment">列数没有给出，可以动态的给。这一次是一个变化的列数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Array2Demo2</span> </span>&#123;</span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line"><span class="comment">//定义数组</span></span><br><span class="line">int[][] arr = <span class="keyword">new</span> int[<span class="number">3</span>][];</span><br><span class="line"></span><br><span class="line">System.out.println(arr);<span class="comment">//[[I@175078b</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>]); <span class="comment">//null</span></span><br><span class="line">System.out.println(arr[<span class="number">1</span>]); <span class="comment">//null</span></span><br><span class="line">System.out.println(arr[<span class="number">2</span>]); <span class="comment">//null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//动态的为每一个一维数组分配空间</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="keyword">new</span> int[<span class="number">2</span>];</span><br><span class="line">arr[<span class="number">1</span>] = <span class="keyword">new</span> int[<span class="number">3</span>];</span><br><span class="line">arr[<span class="number">2</span>] = <span class="keyword">new</span> int[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">System.out.println(arr[<span class="number">0</span>]); <span class="comment">//[I@42552c</span></span><br><span class="line">System.out.println(arr[<span class="number">1</span>]); <span class="comment">//[I@e5bbd6</span></span><br><span class="line">System.out.println(arr[<span class="number">2</span>]); <span class="comment">//[I@8ee016</span></span><br><span class="line"></span><br><span class="line">System.out.println(arr[<span class="number">0</span>][<span class="number">0</span>]); <span class="comment">//0</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>][<span class="number">1</span>]); <span class="comment">//0</span></span><br><span class="line"><span class="comment">//ArrayIndexOutOfBoundsException</span></span><br><span class="line"><span class="comment">//System.out.println(arr[0][2]); //错误</span></span><br><span class="line"></span><br><span class="line">arr[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">arr[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">200</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二维数组格式2的内存图解"><a href="#二维数组格式2的内存图解" class="headerlink" title="二维数组格式2的内存图解"></a>二维数组格式2的内存图解</h3><p><img src="https://images2015.cnblogs.com/blog/1118847/201705/1118847-20170504095839695-689195995.png" alt="tupian2"></p><h3 id="二维数组格式3的讲解"><a href="#二维数组格式3的讲解" class="headerlink" title="二维数组格式3的讲解"></a>二维数组格式3的讲解</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">格式3：</span></span><br><span class="line"><span class="comment">基本格式：</span></span><br><span class="line"><span class="comment">数据类型[][] 数组名 = new 数据类型[][]&#123;&#123;元素1,元素2...&#125;,&#123;元素1,元素2...&#125;,&#123;元素1,元素2...&#125;&#125;;</span></span><br><span class="line"><span class="comment">简化版格式：</span></span><br><span class="line"><span class="comment">数据类型[][] 数组名 = &#123;&#123;元素1,元素2...&#125;,&#123;元素1,元素2...&#125;,&#123;元素1,元素2...&#125;&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">举例：</span></span><br><span class="line"><span class="comment">int[][] arr = &#123;&#123;1,2,3&#125;,&#123;4,5,6&#125;,&#123;7,8,9&#125;&#125;;</span></span><br><span class="line"><span class="comment">int[][] arr = &#123;&#123;1,2,3&#125;,&#123;4,5&#125;,&#123;6&#125;&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Array2Demo3</span> </span>&#123;</span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line"><span class="comment">//定义数组</span></span><br><span class="line">int[][] arr = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">6</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(arr);</span><br><span class="line">System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">System.out.println(arr[<span class="number">0</span>][<span class="number">0</span>]); <span class="comment">//1</span></span><br><span class="line">System.out.println(arr[<span class="number">1</span>][<span class="number">0</span>]); <span class="comment">//4</span></span><br><span class="line">System.out.println(arr[<span class="number">2</span>][<span class="number">0</span>]); <span class="comment">//6</span></span><br><span class="line"></span><br><span class="line">System.out.println(arr[<span class="number">0</span>][<span class="number">1</span>]); <span class="comment">//2</span></span><br><span class="line">System.out.println(arr[<span class="number">1</span>][<span class="number">1</span>]); <span class="comment">//5</span></span><br><span class="line"><span class="comment">//越界</span></span><br><span class="line">System.out.println(arr[<span class="number">2</span>][<span class="number">1</span>]); <span class="comment">//错误</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二维数组格式3的内存图解"><a href="#二维数组格式3的内存图解" class="headerlink" title="二维数组格式3的内存图解"></a>二维数组格式3的内存图解</h3><p><img src="https://images2015.cnblogs.com/blog/1118847/201705/1118847-20170504100615382-311370368.png" alt="tupian4"></p><h3 id="二维数组练习1遍历"><a href="#二维数组练习1遍历" class="headerlink" title="二维数组练习1遍历"></a>二维数组练习1遍历</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">需求：二维数组遍历</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">外循环控制的是二维数组的长度，其实就是一维数组的个数。</span></span><br><span class="line"><span class="comment">内循环控制的是一维数组的长度。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Array2Test</span> </span>&#123;</span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line"><span class="comment">//定义一个二维数组</span></span><br><span class="line">int[][] arr = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//请问谁代表&#123;1,2,3&#125;</span></span><br><span class="line"><span class="comment">//arr[0]就是第一个数组</span></span><br><span class="line"><span class="comment">//arr[0] = &#123;1,2,3&#125;;</span></span><br><span class="line"><span class="keyword">for</span>(int x=<span class="number">0</span>; x&lt;arr[<span class="number">0</span>].length; x++) &#123;</span><br><span class="line">System.out.println(arr[<span class="number">0</span>][x]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"--------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(int x=<span class="number">0</span>; x&lt;arr[<span class="number">1</span>].length; x++) &#123;</span><br><span class="line">System.out.println(arr[<span class="number">1</span>][x]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"--------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(int x=<span class="number">0</span>; x&lt;arr[<span class="number">2</span>].length; x++) &#123;</span><br><span class="line">System.out.println(arr[<span class="number">2</span>][x]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"--------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//用循环改进</span></span><br><span class="line"><span class="keyword">for</span>(int x=<span class="number">0</span>; x&lt;<span class="number">3</span>; x++) &#123;</span><br><span class="line"><span class="keyword">for</span>(int y=<span class="number">0</span>; y&lt;arr[x].length; y++) &#123;</span><br><span class="line">System.out.print(arr[x][y]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"--------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个时候，注意了，3是我们根据上面的代码得出来的</span></span><br><span class="line"><span class="comment">//但是，它不能针对任何的数组都可以这样</span></span><br><span class="line"><span class="comment">//所以，我们应该想办法改进</span></span><br><span class="line"><span class="comment">//其实，外面的这个循环的长度就是二维数组的长度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(int x=<span class="number">0</span>; x&lt;arr.length; x++) &#123;</span><br><span class="line"><span class="keyword">for</span>(int y=<span class="number">0</span>; y&lt;arr[x].length; y++) &#123;</span><br><span class="line">System.out.print(arr[x][y]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"--------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//用方法改进</span></span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line">printArray2(arr);</span><br><span class="line">System.out.println(<span class="string">"--------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们再来一个列数是变化的</span></span><br><span class="line">int[][] arr2 = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">6</span>&#125;&#125;;</span><br><span class="line">printArray2(arr2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">需求：遍历二维数组</span></span><br><span class="line"><span class="comment">两个明确：</span></span><br><span class="line"><span class="comment">返回值类型：void</span></span><br><span class="line"><span class="comment">参数列表：int[][] arr</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> printArray2(int[][] arr) &#123;</span><br><span class="line"><span class="keyword">for</span>(int x=<span class="number">0</span>; x&lt;arr.length; x++) &#123;</span><br><span class="line"><span class="keyword">for</span>(int y=<span class="number">0</span>; y&lt;arr[x].length; y++) &#123;</span><br><span class="line">System.out.print(arr[x][y]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二维数组练习2求和"><a href="#二维数组练习2求和" class="headerlink" title="二维数组练习2求和"></a>二维数组练习2求和</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">公司年销售额求和</span></span><br><span class="line"><span class="comment">某公司按照季度和月份统计的数据如下：单位(万元)</span></span><br><span class="line"><span class="comment">第一季度：22,66,44</span></span><br><span class="line"><span class="comment">第二季度：77,33,88</span></span><br><span class="line"><span class="comment">第三季度：25,45,65</span></span><br><span class="line"><span class="comment">第四季度：11,66,99</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分析：</span></span><br><span class="line"><span class="comment">A:把题目的数据用二维数组来表示</span></span><br><span class="line"><span class="comment">int[][] arr = &#123;&#123;22,66,44&#125;,&#123;77,33,88&#125;,&#123;25,45,65&#125;,&#123;11,66,99&#125;&#125;;</span></span><br><span class="line"><span class="comment">B:如何求和呢?</span></span><br><span class="line"><span class="comment">求和其实就是获取到每一个元素，然后累加即可。</span></span><br><span class="line"><span class="comment">C:定义一个求和变量sum，初始化值是0。</span></span><br><span class="line"><span class="comment">D:通过遍历就可以得到每一个二维数组的元素。</span></span><br><span class="line"><span class="comment">E:把元素累加即可。</span></span><br><span class="line"><span class="comment">F:最后输出sum，就是结果。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Array2Test2</span> </span>&#123;</span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line"><span class="comment">//把题目的数据用二维数组来表示</span></span><br><span class="line">int[][] arr = &#123;&#123;<span class="number">22</span>,<span class="number">66</span>,<span class="number">44</span>&#125;,&#123;<span class="number">77</span>,<span class="number">33</span>,<span class="number">88</span>&#125;,&#123;<span class="number">25</span>,<span class="number">45</span>,<span class="number">65</span>&#125;,&#123;<span class="number">11</span>,<span class="number">66</span>,<span class="number">99</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个求和变量sum，初始化值是0。</span></span><br><span class="line">int sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过遍历就可以得到每一个二维数组的元素。</span></span><br><span class="line"><span class="keyword">for</span>(int x=<span class="number">0</span>; x&lt;arr.length; x++) &#123;</span><br><span class="line"><span class="keyword">for</span>(int y=<span class="number">0</span>; y&lt;arr[x].length; y++) &#123;</span><br><span class="line"><span class="comment">//把元素累加即可。</span></span><br><span class="line">sum += arr[x][y];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最后输出sum，就是结果。</span></span><br><span class="line">System.out.println(<span class="string">"一年的销售额为："</span>+sum+<span class="string">"万元"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二维数组练习3杨辉三角"><a href="#二维数组练习3杨辉三角" class="headerlink" title="二维数组练习3杨辉三角"></a>二维数组练习3杨辉三角</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">需求：打印杨辉三角形(行数可以键盘录入)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">1 1</span></span><br><span class="line"><span class="comment">1 2 1</span></span><br><span class="line"><span class="comment">1 3 3 1</span></span><br><span class="line"><span class="comment">1 4 6 4 1 </span></span><br><span class="line"><span class="comment">1 5 10 10 5 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分析：看这种图像的规律</span></span><br><span class="line"><span class="comment">A:任何一行的第一列和最后一列都是1</span></span><br><span class="line"><span class="comment">B:从第三行开始，每一个数据是它上一行的前一列和它上一行的本列之和。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">步骤：</span></span><br><span class="line"><span class="comment">A:首先定义一个二维数组。行数如果是n，我们把列数也先定义为n。</span></span><br><span class="line"><span class="comment">  这个n的数据来自于键盘录入。</span></span><br><span class="line"><span class="comment">B:给这个二维数组任何一行的第一列和最后一列赋值为1</span></span><br><span class="line"><span class="comment">C:按照规律给其他元素赋值</span></span><br><span class="line"><span class="comment">从第三行开始，每一个数据是它上一行的前一列和它上一行的本列之和。</span></span><br><span class="line"><span class="comment">D:遍历这个二维数组。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Array2Test3</span> </span>&#123;</span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line"><span class="comment">//创建键盘录入对象</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个n的数据来自于键盘录入。</span></span><br><span class="line">System.out.println(<span class="string">"请输入一个数据："</span>);</span><br><span class="line">int n = sc.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义二维数组</span></span><br><span class="line">int[][] arr = <span class="keyword">new</span> int[n][n];</span><br><span class="line"></span><br><span class="line"><span class="comment">//给这个二维数组任何一行的第一列和最后一列赋值为1</span></span><br><span class="line"><span class="keyword">for</span>(int x=<span class="number">0</span>; x&lt;arr.length; x++) &#123;</span><br><span class="line">arr[x][<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">//任何一行第1列</span></span><br><span class="line">arr[x][x] = <span class="number">1</span>; <span class="comment">//任何一行的最后1列</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照规律给其他元素赋值</span></span><br><span class="line"><span class="comment">//从第三行开始，每一个数据是它上一行的前一列和它上一行的本列之和。</span></span><br><span class="line"><span class="keyword">for</span>(int x=<span class="number">2</span>; x&lt;arr.length; x++) &#123;</span><br><span class="line"><span class="comment">//这里如果y&lt;=x是有个小问题的，就是最后一列的问题</span></span><br><span class="line"><span class="comment">//所以这里要减去1</span></span><br><span class="line"><span class="comment">//并且y也应该从1开始，因为第一列也是有值了</span></span><br><span class="line"><span class="keyword">for</span>(int y=<span class="number">1</span>; y&lt;=x<span class="number">-1</span>; y++) &#123;</span><br><span class="line"><span class="comment">//每一个数据是它上一行的前一列和它上一行的本列之和。</span></span><br><span class="line">arr[x][y] = arr[x<span class="number">-1</span>][y<span class="number">-1</span>] + arr[x<span class="number">-1</span>][y];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历这个二维数组。</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">for(int x=0; x&lt;arr.length; x++) &#123;</span></span><br><span class="line"><span class="comment">for(int y=0; y&lt;arr[x].length; y++) &#123;</span></span><br><span class="line"><span class="comment">System.out.print(arr[x][y]+"\t");</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">System.out.println();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//这个时候，要注意了，内循环的变化必须和曾经讲过的九九乘法表类似</span></span><br><span class="line"><span class="keyword">for</span>(int x=<span class="number">0</span>; x&lt;arr.length; x++) &#123;</span><br><span class="line"><span class="keyword">for</span>(int y=<span class="number">0</span>; y&lt;=x; y++) &#123;</span><br><span class="line">System.out.print(arr[x][y]+<span class="string">"\t"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="思考题1Java中的参数传递问题及图解"><a href="#思考题1Java中的参数传递问题及图解" class="headerlink" title="思考题1Java中的参数传递问题及图解"></a>思考题1Java中的参数传递问题及图解</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">思考题1：看程序写结果，然后分析为什么是这个样子的。并画图讲解。最后总结Java中参数传递规律。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Java中的参数传递问题：</span></span><br><span class="line"><span class="comment">基本类型：形式参数的改变对实际参数没有影响。</span></span><br><span class="line"><span class="comment">引用类型：形式参数的改变直接影响实际参数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArgsDemo</span> </span>&#123;</span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">int a = <span class="number">10</span>;</span><br><span class="line">int b = <span class="number">20</span>;</span><br><span class="line">System.out.println(<span class="string">"a:"</span>+a+<span class="string">",b:"</span>+b); <span class="comment">//a:10,b:20</span></span><br><span class="line">change(a,b);</span><br><span class="line">System.out.println(<span class="string">"a:"</span>+a+<span class="string">",b:"</span>+b); <span class="comment">//???a:10,b:20</span></span><br><span class="line"></span><br><span class="line">int[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;; </span><br><span class="line">change(arr);</span><br><span class="line">System.out.println(arr[<span class="number">1</span>]); <span class="comment">//???4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> change(int a,int b) &#123; <span class="comment">//a=10,b=20</span></span><br><span class="line">System.out.println(<span class="string">"a:"</span>+a+<span class="string">",b:"</span>+b); <span class="comment">//a:10,b:20</span></span><br><span class="line">a = b;<span class="comment">//a=20</span></span><br><span class="line">b = a + b; <span class="comment">//b=40</span></span><br><span class="line">System.out.println(<span class="string">"a:"</span>+a+<span class="string">",b:"</span>+b); <span class="comment">//a:20,b:40</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> change(int[] arr) &#123; <span class="comment">//arr=&#123;1,2,3,4,5&#125;;</span></span><br><span class="line"><span class="keyword">for</span>(int x=<span class="number">0</span>; x&lt;arr.length; x++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[x]%<span class="number">2</span>==<span class="number">0</span>) &#123;</span><br><span class="line">arr[x]*=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//arr=&#123;1,4,3,8,5&#125;;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images2015.cnblogs.com/blog/1118847/201705/1118847-20170504104328929-220526806.png" alt="tupian4"></p><h3 id="思考题2加密问题的分析和代码实现"><a href="#思考题2加密问题的分析和代码实现" class="headerlink" title="思考题2加密问题的分析和代码实现"></a>思考题2加密问题的分析和代码实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">某个公司采用公用电话传递数据信息，数据是小于8位的整数，为了确保安全，</span></span><br><span class="line"><span class="comment">在传递过程中需要加密，加密规则如下：</span></span><br><span class="line"><span class="comment">首先将数据倒序，然后将每位数字都加上5，再用和除以10的余数代替该数字，</span></span><br><span class="line"><span class="comment">最后将第一位和最后一位数字交换。 请任意给定一个小于8位的整数，</span></span><br><span class="line"><span class="comment">然后，把加密后的结果在控制台打印出来。 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">题目要求：</span></span><br><span class="line"><span class="comment">A:数据是小于8位的整数</span></span><br><span class="line"><span class="comment">定义一个int类型的数据</span></span><br><span class="line"><span class="comment">int number = 123456;</span></span><br><span class="line"><span class="comment">B:加密规则</span></span><br><span class="line"><span class="comment">a:首先将数据倒序</span></span><br><span class="line"><span class="comment">结果 654321</span></span><br><span class="line"><span class="comment">b:然后将每位数字都加上5，再用和除以10的余数代替该数字</span></span><br><span class="line"><span class="comment">结果 109876</span></span><br><span class="line"><span class="comment">c:最后将第一位和最后一位数字交换</span></span><br><span class="line"><span class="comment">结果 609871</span></span><br><span class="line"><span class="comment">C:把加密后的结果输出在控制台</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">通过简单的分析，我们知道如果我们有办法把这个数据变成数组就好了。</span></span><br><span class="line"><span class="comment">不是直接写成这个样子的：</span></span><br><span class="line"><span class="comment">int[] arr = &#123;1,2,3,4,5,6&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如何把数据转成数组呢?</span></span><br><span class="line"><span class="comment">A:定义一个数据</span></span><br><span class="line"><span class="comment">int number = 123456;</span></span><br><span class="line"><span class="comment">B:定义一个数组,这个时候问题就来了，数组的长度是多少呢?</span></span><br><span class="line"><span class="comment">int[] arr = new int[8]; //不可能超过8</span></span><br><span class="line"><span class="comment">在赋值的时候，我用一个变量记录索引的变化。</span></span><br><span class="line"><span class="comment">定义一个索引值是0</span></span><br><span class="line"><span class="comment">int index = 0;</span></span><br><span class="line"><span class="comment">C:获取每一个数据</span></span><br><span class="line"><span class="comment">int ge = number%10</span></span><br><span class="line"><span class="comment">int shi = number/10%10</span></span><br><span class="line"><span class="comment">int bai = number/10/10%10</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">arr[index] = ge;</span></span><br><span class="line"><span class="comment">index++;</span></span><br><span class="line"><span class="comment">arr[index] = shi;</span></span><br><span class="line"><span class="comment">index++;</span></span><br><span class="line"><span class="comment">arr[index] = bai;</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JiaMiDemo</span> </span>&#123;</span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line"><span class="comment">//定义一个数据</span></span><br><span class="line">int number = <span class="number">123456</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个数组</span></span><br><span class="line">int[] arr = <span class="keyword">new</span> int[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//把数据中每一位上的数据获取到后存储到数组中</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">int index = 0;</span></span><br><span class="line"><span class="comment">arr[index] = number%10; //arr[0]=6;</span></span><br><span class="line"><span class="comment">index++;</span></span><br><span class="line"><span class="comment">arr[index] = number/10%10; //arr[1]=5;</span></span><br><span class="line"><span class="comment">index++;</span></span><br><span class="line"><span class="comment">arr[index] = mumber/10/10%10; //arr[2]=4;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过观察这个代码，我们发现应该是可以通过循环改进的</span></span><br><span class="line">int index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(number &gt; <span class="number">0</span>) &#123; <span class="comment">//number=123456,number=12345,number=1234,number=123,number=12,number=1,number=0</span></span><br><span class="line">arr[index] = number%<span class="number">10</span>; <span class="comment">//arr[0]=6,arr[1]=5,arr[2]=4,arr[3]=3,arr[4]=2,arr[5]=1</span></span><br><span class="line">index++;<span class="comment">//index=1,index=2,index=3,index=4,index=5,index=6</span></span><br><span class="line">number/=<span class="number">10</span>;<span class="comment">//number=12345,number=1234,number=123,number=12,number=1,number=0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//然后将每位数字都加上5，再用和除以10的余数代替该数字</span></span><br><span class="line"><span class="keyword">for</span>(int x=<span class="number">0</span>; x&lt;index; x++) &#123;</span><br><span class="line">arr[x] += <span class="number">5</span>;</span><br><span class="line">arr[x] %= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最后将第一位和最后一位数字交换</span></span><br><span class="line">int temp = arr[<span class="number">0</span>];</span><br><span class="line">arr[<span class="number">0</span>] = arr[index<span class="number">-1</span>];</span><br><span class="line">arr[index<span class="number">-1</span>] = temp;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出数据</span></span><br><span class="line"><span class="keyword">for</span>(int x=<span class="number">0</span>; x&lt;index; x++) &#123;</span><br><span class="line">System.out.print(arr[x]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="思考2加密问题的代码改进"><a href="#思考2加密问题的代码改进" class="headerlink" title="思考2加密问题的代码改进"></a>思考2加密问题的代码改进</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package stephencurry;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">      <span class="comment">//这个n的数据来自于键盘录入。</span></span><br><span class="line">         int num=<span class="number">123456</span>;</span><br><span class="line">         int []a=<span class="keyword">new</span> int[<span class="number">10</span>];</span><br><span class="line">         int cnt=<span class="number">0</span>;</span><br><span class="line">         <span class="keyword">while</span>(num&gt;<span class="number">0</span>) &#123;</span><br><span class="line">         a[cnt]=num%<span class="number">10</span>;</span><br><span class="line">         cnt++;</span><br><span class="line">         num/=<span class="number">10</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;cnt;i++) &#123;</span><br><span class="line">         a[i]+=<span class="number">5</span>;</span><br><span class="line">         a[i]%=<span class="number">10</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         int temp=a[cnt<span class="number">-1</span>];</span><br><span class="line">         a[cnt<span class="number">-1</span>]=a[<span class="number">0</span>];</span><br><span class="line">         a[<span class="number">0</span>]=temp;</span><br><span class="line">         <span class="keyword">for</span>(int i=<span class="number">0</span>; i&lt;cnt; i++) &#123;</span><br><span class="line"> System.out.print(a[i]);</span><br><span class="line"> &#125;</span><br><span class="line"> System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="面向对象的基本思想引入"><a href="#面向对象的基本思想引入" class="headerlink" title="面向对象的基本思想引入"></a>面向对象的基本思想引入</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>:面向对象思想</span><br><span class="line">    面向对象是基于面向过程的编程思想。</span><br><span class="line">    </span><br><span class="line">    面向过程：强调的是每一个功能的步骤</span><br><span class="line">    面向对象：强调的是对象，然后由对象去调用功能</span><br><span class="line">    </span><br><span class="line"><span class="number">2</span>:面向对象的思想特点</span><br><span class="line">    A:是一种更符合我们思想习惯的思想</span><br><span class="line">    B:可以将复杂的事情简单化</span><br><span class="line">    C:将我们从执行者变成了指挥者</span><br><span class="line">        </span><br><span class="line">    举例：</span><br><span class="line">        买电脑：</span><br><span class="line">            面向过程：我的了解电脑--了解我自己的需求--找对应的参数信息--去中关村买电脑--讨价还价--买回电脑</span><br><span class="line">            面向对象：我知道我要买电脑 -- 班长去给我买 -- 班长就买回来了</span><br><span class="line">        洗衣服：</span><br><span class="line">            面向过程：把衣服脱下--找一个盆--放点洗衣粉--加点水--把衣服扔进去--搓一搓--清洗衣服--拧干--晾起来</span><br><span class="line">            面向对象：把衣服脱下--打开全自动洗衣机--扔进去--一键即可--晾起来</span><br><span class="line">        吃饭：</span><br><span class="line">            面向过程：去超市买菜--摘菜--洗菜--切菜--炒菜--盛起来--吃</span><br><span class="line">            面向对象：上饭店吃饭，你--服务员(点菜)--厨师(做菜)--服务员(端菜)--吃</span><br><span class="line">            </span><br><span class="line">            家常事物，买洗衣机和去饭店太不划算了，所以，找个对象。</span><br><span class="line">            但是，你不跟我好好学习，你将来<span class="number">4000</span>，你对象<span class="number">8000</span>。</span><br><span class="line">            </span><br><span class="line"><span class="number">3</span>:把大象装进冰箱</span><br><span class="line">    面向过程：</span><br><span class="line">        动作有哪些呢?</span><br><span class="line">            A:打开冰箱门</span><br><span class="line">            B:装进大象</span><br><span class="line">            C:关闭冰箱门</span><br><span class="line">            </span><br><span class="line">        代码体现；</span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">                public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                    System.out.println("打开冰箱门");</span></span><br><span class="line"><span class="comment">                    //打开冰箱门的东西，我现在仅仅是为了演示，就写了一个输出语句</span></span><br><span class="line"><span class="comment">                    //其实，它可能需要做很多操作。</span></span><br><span class="line"><span class="comment">                    //这个时候代码就比较多一些了</span></span><br><span class="line"><span class="comment">                    //假设我要多次打开冰箱门，</span></span><br><span class="line"><span class="comment">                    //代码一多，每次都写一遍，麻烦不</span></span><br><span class="line"><span class="comment">                    //我们就应该用方法改进</span></span><br><span class="line"><span class="comment">                    </span></span><br><span class="line"><span class="comment">                    System.out.println("装进大象");</span></span><br><span class="line"><span class="comment">                    System.out.println("关闭冰箱门");</span></span><br><span class="line"><span class="comment">                    */</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">//写了方法以后，调用就改变了</span></span><br><span class="line">                    open();</span><br><span class="line">                    <span class="keyword">in</span>();</span><br><span class="line">                    close();</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                public <span class="keyword">static</span> <span class="keyword">void</span> open() &#123;</span><br><span class="line">                    System.out.println(<span class="string">"打开冰箱门"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                public <span class="keyword">static</span> <span class="keyword">void</span> <span class="keyword">in</span>() &#123;</span><br><span class="line">                    System.out.println(<span class="string">"装进大象"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                public <span class="keyword">static</span> <span class="keyword">void</span> close() &#123;</span><br><span class="line">                    System.out.println(<span class="string">"关闭冰箱门"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">    面向对象：</span><br><span class="line">        我们怎么才能更符合面向对象思想呢?</span><br><span class="line">            A:有哪些类呢?</span><br><span class="line">            B:每个类有哪些东西呢?</span><br><span class="line">            C:类与类直接的关系是什么呢?</span><br><span class="line">            </span><br><span class="line">        把大象装进冰箱的分析? (如何分析有哪些类呢?UML。名词提取法。)</span><br><span class="line">            A:有哪些类呢?</span><br><span class="line">                大象</span><br><span class="line">                冰箱</span><br><span class="line">                Demo</span><br><span class="line">            B:每个类有哪些东西呢?</span><br><span class="line">                大象：</span><br><span class="line">                    进去</span><br><span class="line">                冰箱：</span><br><span class="line">                    开门</span><br><span class="line">                    关门</span><br><span class="line">                Demo:</span><br><span class="line">                    main方法</span><br><span class="line">            C:类与类直接的关系是什么呢?</span><br><span class="line">                Demo中使用大象和冰箱类的功能。</span><br><span class="line">                </span><br><span class="line">        代码体现：</span><br><span class="line">            <span class="class"><span class="keyword">class</span> 大象 </span>&#123;</span><br><span class="line">                public <span class="keyword">static</span> <span class="keyword">void</span> <span class="keyword">in</span>() &#123;</span><br><span class="line">                    System.out.println(<span class="string">"装进大象"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="class"><span class="keyword">class</span> 冰箱 </span>&#123;</span><br><span class="line">                public <span class="keyword">static</span> <span class="keyword">void</span> open() &#123;</span><br><span class="line">                    System.out.println(<span class="string">"打开冰箱门"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                public <span class="keyword">static</span> <span class="keyword">void</span> close() &#123;</span><br><span class="line">                    System.out.println(<span class="string">"关闭冰箱门"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">                public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">                    冰箱调用开门</span><br><span class="line">                    大象调用进去</span><br><span class="line">                    冰箱调用关门</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"><span class="number">4</span>:开发，设计，特征</span><br><span class="line">面向对象开发</span><br><span class="line">    就是不断的创建对象，使用对象，指挥对象做事情。</span><br><span class="line">    </span><br><span class="line">面向对象设计</span><br><span class="line">    其实就是在管理和维护对象之间的关系。</span><br><span class="line"></span><br><span class="line">面向对象特征</span><br><span class="line">    封装(encapsulation)</span><br><span class="line">    继承(inheritance)</span><br><span class="line">    多态(polymorphism)</span><br></pre></td></tr></table></figure><h3 id="类与对象的概述"><a href="#类与对象的概述" class="headerlink" title="类与对象的概述"></a>类与对象的概述</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">现实世界中是如何描述一个事物的呢?</span><br><span class="line">举例：学生</span><br><span class="line">姓名,年龄,性别...</span><br><span class="line">学习,吃饭,睡觉</span><br><span class="line"></span><br><span class="line">属性：该事物的描述信息</span><br><span class="line">行为：该事物能够做什么</span><br><span class="line"></span><br><span class="line">我们学习编程语言，是为了模拟现实世界的事物的。</span><br><span class="line">而我们学习的编程语言Java中最基本的单位是：类。</span><br><span class="line">所以，我们就应该把事物通过类来体现出来：</span><br><span class="line">由此，我们就得到了现实世界事物和类的对应关系：</span><br><span class="line"></span><br><span class="line">事物：类：</span><br><span class="line">属性成员变量</span><br><span class="line">行为成员方法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">类：是一组相关的属性和行为的集合。是一个抽象的概念。</span><br><span class="line">对象：是该类事物的具体表现形式。具体存在的个体。</span><br><span class="line"></span><br><span class="line">举例：</span><br><span class="line">学生：类</span><br><span class="line">班长：对象</span><br></pre></td></tr></table></figure><h3 id="类的定义：学生类"><a href="#类的定义：学生类" class="headerlink" title="类的定义：学生类"></a>类的定义：学生类</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">事物：</span></span><br><span class="line"><span class="comment">属性事物的信息描述</span></span><br><span class="line"><span class="comment">行为事物的功能</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">类：</span></span><br><span class="line"><span class="comment">成员变量事物的属性</span></span><br><span class="line"><span class="comment">成员方法事物的行为</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">定义一个类，其实就是定义该类的成员变量和成员方法。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">案例：我们来完成一个学生类的定义。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">学生事物：</span></span><br><span class="line"><span class="comment">属性：姓名，年龄，地址...</span></span><br><span class="line"><span class="comment">行为：学习，吃饭，睡觉...</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">把事物要转换为对应的类：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">学生类：</span></span><br><span class="line"><span class="comment">成员变量：姓名，年龄，地址...</span></span><br><span class="line"><span class="comment">成员方法：学习，吃饭，睡觉...</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">成员变量：和以前变量的定义是一样的格式，但是位置不同，在类中方法外。</span></span><br><span class="line"><span class="comment">成员方法：和以前的方法定义是一样的格式，但是今天把static先去掉。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">首先我们应该定义一个类，然后完成类的成员。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//这是我的学生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="comment">//定义变量</span></span><br><span class="line"><span class="comment">//姓名</span></span><br><span class="line"><span class="built_in">String</span> name;</span><br><span class="line"><span class="comment">//年龄</span></span><br><span class="line">int age;</span><br><span class="line"><span class="comment">//地址</span></span><br><span class="line"><span class="built_in">String</span> address;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义方法</span></span><br><span class="line"><span class="comment">//学习的方法</span></span><br><span class="line">public <span class="keyword">void</span> study() &#123;</span><br><span class="line">System.out.println(<span class="string">"学生爱学习"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//吃饭的方法</span></span><br><span class="line">public <span class="keyword">void</span> eat() &#123;</span><br><span class="line">System.out.println(<span class="string">"学习饿了,要吃饭"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//睡觉的方法</span></span><br><span class="line">public <span class="keyword">void</span> sleep() &#123;</span><br><span class="line">System.out.println(<span class="string">"学习累了,要睡觉"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="学生类的使用"><a href="#学生类的使用" class="headerlink" title="学生类的使用"></a>学生类的使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在一个java文件中写两个类：一个基本的类，一个测试类。</span></span><br><span class="line"><span class="comment">注意：文件名称和测试类名称一致。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如何使用呢?</span></span><br><span class="line"><span class="comment">创建对象使用。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如何创建对象呢?</span></span><br><span class="line"><span class="comment">格式：类名 对象名 = new 类名();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如何使用成员变量呢?</span></span><br><span class="line"><span class="comment">对象名.变量名</span></span><br><span class="line"><span class="comment">如何使用成员方法呢?</span></span><br><span class="line"><span class="comment">对象名.方法名(...)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//这是学生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="comment">//姓名</span></span><br><span class="line"><span class="built_in">String</span> name; <span class="comment">//null</span></span><br><span class="line"><span class="comment">//年龄</span></span><br><span class="line">int age; <span class="comment">//0</span></span><br><span class="line"><span class="comment">//地址</span></span><br><span class="line"><span class="built_in">String</span> address; <span class="comment">//null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//学习</span></span><br><span class="line">public <span class="keyword">void</span> study() &#123;</span><br><span class="line">System.out.println(<span class="string">"学生爱学习"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//吃饭</span></span><br><span class="line">public <span class="keyword">void</span> eat() &#123;</span><br><span class="line">System.out.println(<span class="string">"学习饿了，要吃饭"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//睡觉</span></span><br><span class="line">public <span class="keyword">void</span> sleep() &#123;</span><br><span class="line">System.out.println(<span class="string">"学习累了，要睡觉"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这是学生测试类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line"><span class="comment">//类名 对象名 = new 类名();</span></span><br><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出成员变量值</span></span><br><span class="line"><span class="comment">//System.out.println(s.name);</span></span><br><span class="line"><span class="comment">//System.out.println(s.age);</span></span><br><span class="line"><span class="comment">//System.out.println(s.address);</span></span><br><span class="line"><span class="comment">//改进写法</span></span><br><span class="line">System.out.println(s.name+<span class="string">"---"</span>+s.age+<span class="string">"---"</span>+s.address);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//给成员变量赋值</span></span><br><span class="line">s.name = <span class="string">"林青霞"</span>;</span><br><span class="line">s.age = <span class="number">27</span>;</span><br><span class="line">s.address = <span class="string">"北京"</span>;</span><br><span class="line"><span class="comment">//赋值后的输出</span></span><br><span class="line">System.out.println(s.name+<span class="string">"---"</span>+s.age+<span class="string">"---"</span>+s.address);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line">s.study();</span><br><span class="line">s.eat();</span><br><span class="line">s.sleep();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类的定义：手机类"><a href="#类的定义：手机类" class="headerlink" title="类的定义：手机类"></a>类的定义：手机类</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">手机事物：</span></span><br><span class="line"><span class="comment">属性：品牌，价格，颜色...</span></span><br><span class="line"><span class="comment">行为：打电话，发短信，玩游戏...</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">手机类：</span></span><br><span class="line"><span class="comment">成员变量：品牌，价格，颜色</span></span><br><span class="line"><span class="comment">成员方法：打电话，发短信，玩游戏</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"><span class="comment">//品牌</span></span><br><span class="line"><span class="built_in">String</span> brand;</span><br><span class="line"><span class="comment">//价格</span></span><br><span class="line">int price;</span><br><span class="line"><span class="comment">//颜色</span></span><br><span class="line"><span class="built_in">String</span> color;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打电话的方法</span></span><br><span class="line">public <span class="keyword">void</span> call(<span class="built_in">String</span> name) &#123;</span><br><span class="line">System.out.println(<span class="string">"给"</span>+name+<span class="string">"打电话"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发短信的方法</span></span><br><span class="line">public <span class="keyword">void</span> sendMessage() &#123;</span><br><span class="line">System.out.println(<span class="string">"群发短信"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//玩游戏的方法</span></span><br><span class="line">public <span class="keyword">void</span> playGame() &#123;</span><br><span class="line">System.out.println(<span class="string">"玩游戏"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手机类的使用"><a href="#手机类的使用" class="headerlink" title="手机类的使用"></a>手机类的使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">手机类的测试</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"><span class="comment">//品牌</span></span><br><span class="line"><span class="built_in">String</span> brand;</span><br><span class="line"><span class="comment">//价格</span></span><br><span class="line">int price;</span><br><span class="line"><span class="comment">//颜色</span></span><br><span class="line"><span class="built_in">String</span> color;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打电话的方法</span></span><br><span class="line">public <span class="keyword">void</span> call(<span class="built_in">String</span> name) &#123;</span><br><span class="line">System.out.println(<span class="string">"给"</span>+name+<span class="string">"打电话"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发短信的方法</span></span><br><span class="line">public <span class="keyword">void</span> sendMessage() &#123;</span><br><span class="line">System.out.println(<span class="string">"群发短信"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//玩游戏的方法</span></span><br><span class="line">public <span class="keyword">void</span> playGame() &#123;</span><br><span class="line">System.out.println(<span class="string">"玩游戏"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneDemo</span> </span>&#123;</span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line"><span class="comment">//创建手机对象</span></span><br><span class="line"><span class="comment">//类名 对象名 = new 类名();</span></span><br><span class="line">Phone p = <span class="keyword">new</span> Phone();</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接输出成员变量值</span></span><br><span class="line">System.out.println(p.brand+<span class="string">"---"</span>+p.price+<span class="string">"---"</span>+p.color);</span><br><span class="line"></span><br><span class="line"><span class="comment">//给成员变量赋值</span></span><br><span class="line">p.brand = <span class="string">"诺基亚"</span>;</span><br><span class="line">p.price = <span class="number">100</span>;</span><br><span class="line">p.color = <span class="string">"灰色"</span>;</span><br><span class="line"><span class="comment">//再次输出</span></span><br><span class="line">System.out.println(p.brand+<span class="string">"---"</span>+p.price+<span class="string">"---"</span>+p.color);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line">p.call(<span class="string">"林青霞"</span>);</span><br><span class="line">p.sendMessage();</span><br><span class="line">p.playGame();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一个对象的内存图"><a href="#一个对象的内存图" class="headerlink" title="一个对象的内存图"></a>一个对象的内存图</h3><p><img src="https://images2015.cnblogs.com/blog/1118847/201705/1118847-20170504134754117-224251542.png" alt="tupian11"></p><h3 id="两个对象的内存图"><a href="#两个对象的内存图" class="headerlink" title="两个对象的内存图"></a>两个对象的内存图</h3><p><img src="https://images2015.cnblogs.com/blog/1118847/201705/1118847-20170504135757414-55356193.png" alt="tupian22"></p><h3 id="三个对象的内存图"><a href="#三个对象的内存图" class="headerlink" title="三个对象的内存图"></a>三个对象的内存图</h3><p><img src="https://images2015.cnblogs.com/blog/1118847/201705/1118847-20170504140614757-1493738338.png" alt="tupian33"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Java语言基础&quot;&gt;&lt;a href=&quot;#Java语言基础&quot; class=&quot;headerlink&quot; title=&quot;Java语言基础&quot;&gt;&lt;/a&gt;Java语言基础&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Java系统学习-JavaSE篇" scheme="https://stephencurry6666.github.io/categories/Java%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0-JavaSE%E7%AF%87/"/>
    
    
      <category term="Java系统学习" scheme="https://stephencurry6666.github.io/tags/Java%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>数据库原理及应用上机实验二</title>
    <link href="https://stephencurry6666.github.io/2020/05/25/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C%E4%BA%8C/"/>
    <id>https://stephencurry6666.github.io/2020/05/25/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C%E4%BA%8C/</id>
    <published>2020-05-25T02:30:50.492Z</published>
    <updated>2020-05-25T02:43:16.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实验名称：实验二-数据基本查询"><a href="#实验名称：实验二-数据基本查询" class="headerlink" title="实验名称：实验二 数据基本查询"></a>实验名称：实验二 数据基本查询</h2><a id="more"></a><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p><strong>1.掌握SQL查询语句的一般格式。</strong></p><p><strong>2.掌握简单数据查询操作。</strong></p><p><strong>3.熟练掌握各种查询条件的表示。</strong></p><p><strong>4.掌握排序和分组操作在SQL语句中的实现。</strong></p><p><strong>5.掌握集函数的使用。</strong></p><h2 id="实验步骤与调试过程-请用简单的文字描述"><a href="#实验步骤与调试过程-请用简单的文字描述" class="headerlink" title="实验步骤与调试过程(请用简单的文字描述)"></a>实验步骤与调试过程(请用简单的文字描述)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">1.按实验一步骤先建好数据库，建好表，并输入实验一所给的数据。</span><br><span class="line">2.对各表中的数据进行不同条件的查询；</span><br><span class="line">包括的运算：投影、选择、比较运算符、逻辑运算符、字符匹配运算符、匹配列表范围、算术运算符、内部函数、排序、分组、分组函数使用</span><br><span class="line">（1）查询全体学生的学号和姓名</span><br><span class="line">（2）查询全体学生的详细记录</span><br><span class="line">（3）查询软件学院的学生姓名、年龄、系别</span><br><span class="line">（4）查询所有选修过课程的学生学号（不重复）</span><br><span class="line">（5）查询考试不及格的学生学号（不重复）</span><br><span class="line">（6）查询不是软件学院、计算机系的学生性别、年龄、系别</span><br><span class="line">（7）查询年龄18－20岁的学生学号、姓名、系别、年龄；</span><br><span class="line">（8）查询姓刘的学生情况</span><br><span class="line">（9）查询姓刘或姓李的学生情况</span><br><span class="line">（10）查询姓刘且名字为两个字的学生情况</span><br><span class="line">（11）查询1983年以后出生的学生姓名。</span><br><span class="line">（12）创建表 studentgrad(sno,mathgrade,englishigrade,chinesegrade)</span><br><span class="line">计算学生各科总成绩并赋予别名</span><br><span class="line">（13）利用内部函数 year()查找软件学院学生的出生年份</span><br><span class="line">（14）利用字符转换函数实现字符联接。</span><br><span class="line">       Select sname + ‘年龄为’+cast(sage as char(2))+’岁’</span><br><span class="line">       From student</span><br><span class="line">（15）查询全体学生情况，查询结果按所在系升序排列，对同一系中的学生按年龄降序排列。</span><br><span class="line">（16）查询学生总人数。</span><br><span class="line">（17）查询选修了课程的学生人数。</span><br><span class="line">（18）查询选修了7号课程的学生总人数和平均成绩</span><br><span class="line">（19）查询选修6号课程学生的最好成绩</span><br><span class="line">（20）查询每个系的系名及学生人数。</span><br><span class="line">（21）查找每门课的选修人数及平均成绩</span><br><span class="line">（22）查找没有先修课的课程情况</span><br></pre></td></tr></table></figure><h2 id="实验结果-上传实验结果截图或者简单文字描述"><a href="#实验结果-上传实验结果截图或者简单文字描述" class="headerlink" title="实验结果(上传实验结果截图或者简单文字描述)"></a>实验结果(上传实验结果截图或者简单文字描述)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.如果要对一列值设置别名，需要select+ 列名+as+新名字。</span><br><span class="line"></span><br><span class="line">2.使用group  by可以把一列或者多列分组，具有相同值的会被分在同一个分组。</span><br><span class="line"></span><br><span class="line">3.使用year（）函数可以很简洁算出你想要的那个日期的元组数有多少。</span><br><span class="line"></span><br><span class="line">4.使用order by 可以对指定列排序，升序可以直接省略。</span><br></pre></td></tr></table></figure><h2 id="疑难小结-总结个人在实验中遇到的问题或者心得体会"><a href="#疑难小结-总结个人在实验中遇到的问题或者心得体会" class="headerlink" title="疑难小结(总结个人在实验中遇到的问题或者心得体会)"></a>疑难小结(总结个人在实验中遇到的问题或者心得体会)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.在查询全体学生的学号和姓名时，因为记错了语句，一直出错，调试了好久。</span><br><span class="line">2.在进行步骤的时候，不知道怎么才能在列之间插入字符，很是迷茫，所以去百度了方法之后，才会。</span><br><span class="line">3.还有就是在进行实验的过程中，经常遇到一些小问题，总结来说的话，就是不够细心和认真，下次再做实验的时候会改正。</span><br></pre></td></tr></table></figure><h2 id="实验详细操作步骤或程序清单"><a href="#实验详细操作步骤或程序清单" class="headerlink" title="实验详细操作步骤或程序清单"></a>实验详细操作步骤或程序清单</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">1、查询全体学生的学号和姓名</span><br><span class="line">select sno,sname </span><br><span class="line">from student;</span><br><span class="line"></span><br><span class="line">2、查询全体学生的详细记录</span><br><span class="line">select * </span><br><span class="line">from student;</span><br><span class="line"></span><br><span class="line">3、查询软件学院的学生姓名、年龄、系别</span><br><span class="line">select sname,sage,sdept</span><br><span class="line">from student</span><br><span class="line">where sdept&#x3D;&#39;MA&#39;;</span><br><span class="line"></span><br><span class="line">4、查询所有选修过课程的学生学号（不重复）</span><br><span class="line">select distinct sno </span><br><span class="line">from sc;</span><br><span class="line">where cno&lt;&gt;&#39;null&#39;;</span><br><span class="line"></span><br><span class="line">5、查询考试不及格的学生学号（不重复）</span><br><span class="line">select distinct sno</span><br><span class="line">from sc</span><br><span class="line">where grade&lt;60;</span><br><span class="line"></span><br><span class="line">6、查询不是软件学院、计算机系的学生性别、年龄、系别</span><br><span class="line"></span><br><span class="line">select ssex,sage,sdept</span><br><span class="line">from student </span><br><span class="line">where sdept not in(&#39;CS&#39;,&#39;MA&#39;);</span><br><span class="line"></span><br><span class="line">7、查询年龄18－20岁的学生学号、姓名、系别、年龄</span><br><span class="line"></span><br><span class="line">select sno,sname,sdept,sage </span><br><span class="line">from student</span><br><span class="line">where sage between 18 and 20;</span><br><span class="line"></span><br><span class="line">8、查询姓刘的学生情况</span><br><span class="line">select * </span><br><span class="line">from student</span><br><span class="line">where sname like &#39;刘%&#39;;</span><br><span class="line"></span><br><span class="line">9、查询姓刘或姓李的学生情况</span><br><span class="line">select *</span><br><span class="line">from student</span><br><span class="line">where sname like &#39;刘%&#39; or sname like &#39;李%&#39;;</span><br><span class="line"></span><br><span class="line">10、查询姓刘且名字为两个字的学生情况</span><br><span class="line">select * </span><br><span class="line">from student</span><br><span class="line">where sname like &#39;刘_&#39;;</span><br><span class="line"></span><br><span class="line">11、查询1983年以后出生的学生姓名</span><br><span class="line">select sname </span><br><span class="line">from student </span><br><span class="line">where sage &lt; 2019-1983</span><br><span class="line"></span><br><span class="line">12、创建表 studentgrad(sno,mathgrade,englishigrade,chinesegrade)计算学生各科总成绩并赋予别名</span><br><span class="line">create table studentgrade(</span><br><span class="line">    Sno char(8) ,</span><br><span class="line">    mathgrade int,</span><br><span class="line">    englishigrade int,</span><br><span class="line">    chinesegrade int</span><br><span class="line">)</span><br><span class="line">select sum(mathgrade+chinesegrade+englishigrade) &#39;学生总成绩&#39; </span><br><span class="line">from studentgrade;</span><br><span class="line"></span><br><span class="line">13、利用内部函数 year()查找软件学院学生的出生年份</span><br><span class="line">select (year(getdate())-student.sage+1) </span><br><span class="line">from student </span><br><span class="line">where sdept&#x3D;&#39;MA&#39;;</span><br><span class="line"></span><br><span class="line">14、利用字符转换函数实现字符联接。select sname+‘年龄为’+cast(sage as char(2))+’岁’ from student</span><br><span class="line">select sname+&#39;年龄为&#39;+cast(sage as char(2))+&#39;岁&#39;</span><br><span class="line">from student;</span><br><span class="line"></span><br><span class="line">15、查询全体学生情况，查询结果按所在系升序排列，对同一系中的学生按年龄降序排列</span><br><span class="line">select *</span><br><span class="line">from student </span><br><span class="line">order by sdept,sage desc;</span><br><span class="line"></span><br><span class="line">16、查询学生总人数</span><br><span class="line">select count(*) </span><br><span class="line">from student;</span><br><span class="line"></span><br><span class="line">17、查询选修了课程的学生人数</span><br><span class="line">select count(distinct sno) </span><br><span class="line">from sc;</span><br><span class="line"></span><br><span class="line">18、查询选修了7号课程的学生总人数和平均成绩</span><br><span class="line">select count(*),avg(grade)as avggrade </span><br><span class="line">from student,sc </span><br><span class="line">where student.sno&#x3D;sc.sno and sc.cno&#x3D;&#39;7&#39;;</span><br><span class="line"></span><br><span class="line">19、查询选修6号课程学生的最好成绩</span><br><span class="line">select max(grade) as maxgrade </span><br><span class="line">from sc</span><br><span class="line">where cno&#x3D;&#39;6&#39;;</span><br><span class="line"></span><br><span class="line">20、查询每个系的系名及学生人数</span><br><span class="line">select sdept,count(*) </span><br><span class="line">from student</span><br><span class="line">group by sdept;</span><br><span class="line"></span><br><span class="line">21、查找每门课的选修人数及平均成绩</span><br><span class="line">select cno,count(*),avg(grade) as avggrade </span><br><span class="line">from sc</span><br><span class="line">group by cno;</span><br><span class="line"></span><br><span class="line">22、查找没有先修课的课程情况</span><br><span class="line">select * </span><br><span class="line">from course </span><br><span class="line">where cpno is null;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;实验名称：实验二-数据基本查询&quot;&gt;&lt;a href=&quot;#实验名称：实验二-数据基本查询&quot; class=&quot;headerlink&quot; title=&quot;实验名称：实验二 数据基本查询&quot;&gt;&lt;/a&gt;实验名称：实验二 数据基本查询&lt;/h2&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://stephencurry6666.github.io/categories/SQL/"/>
    
    
      <category term="SQL上机实验" scheme="https://stephencurry6666.github.io/tags/SQL%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>数据库原理及应用上机实验一</title>
    <link href="https://stephencurry6666.github.io/2020/05/25/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C%E4%B8%80/"/>
    <id>https://stephencurry6666.github.io/2020/05/25/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C%E4%B8%80/</id>
    <published>2020-05-25T02:30:13.217Z</published>
    <updated>2020-05-25T02:39:10.974Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实验名称：实验一-数据定义"><a href="#实验名称：实验一-数据定义" class="headerlink" title="实验名称：实验一 数据定义"></a>实验名称：实验一 数据定义</h2><a id="more"></a><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p><strong>1.熟练掌握SQL语言进行基本表结构的创建。</strong></p><p><strong>2.熟练应用SQL语言进行表结构的修改。</strong></p><p><strong>3.掌握SQL语言进行基本表的删除。</strong></p><p><strong>4.掌握SQL语言进行索引的建立和删除。</strong></p><p><strong>5.选择具体的数据库管理系统进行实现。</strong></p><h2 id="实验步骤与调试过程-请用简单的文字描述"><a href="#实验步骤与调试过程-请用简单的文字描述" class="headerlink" title="实验步骤与调试过程(请用简单的文字描述)"></a>实验步骤与调试过程(请用简单的文字描述)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.用create新建数据库。</span><br><span class="line">2.用create建立表格。</span><br><span class="line">3.输入数据验证约束条件。</span><br><span class="line">4.</span><br><span class="line">（1） STUDENT表中增加一个字段入学时间scome</span><br><span class="line">（2） 删除STUDENT表中sdept字段</span><br><span class="line">（3） 删除创建的SC表中cno字段和COURSE表cno字段之间的外键约束</span><br><span class="line">（4） 重建（3）中删除的约束</span><br><span class="line">5.重新定义一个简单表，然后用SQL语言DROP语句删除该表结构。</span><br><span class="line">6.用SQL语言CREATE INDEX语句定义表STUDENT的SNAME字段的降序唯一索引。</span><br><span class="line">7.用SQL语言DROP语句删除索引。</span><br></pre></td></tr></table></figure><h2 id="实验结果-上传实验结果截图或者简单文字描述"><a href="#实验结果-上传实验结果截图或者简单文字描述" class="headerlink" title="实验结果(上传实验结果截图或者简单文字描述)"></a>实验结果(上传实验结果截图或者简单文字描述)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.知道了如何利用SQL server新建数据库，新建表，插入数据进表，修改表，建立索引，删除索引名等。</span><br><span class="line">2.删除一个外键约束时必须先知道这个约束的名称。</span><br><span class="line">3.删除索引时必须指明索引名与表名。</span><br><span class="line">4.在列的数据类型后直接输入default，后加要设置的默认值 即可设置该列的默认值 。</span><br></pre></td></tr></table></figure><h2 id="疑难小结-总结个人在实验中遇到的问题或者心得体会"><a href="#疑难小结-总结个人在实验中遇到的问题或者心得体会" class="headerlink" title="疑难小结(总结个人在实验中遇到的问题或者心得体会)"></a>疑难小结(总结个人在实验中遇到的问题或者心得体会)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.一开始只知道直接利用鼠标右键进行新建数据库，不知道怎么利用SQL语言建立数据库，然后自行学了一下才会。</span><br><span class="line">2.当我在删除一个表中外码的外键约束时，不知道约束名称，找了半天才在键值中找到，然后使用DROP CONSTRAINT+约束名对其进行了删除。</span><br><span class="line">3.删除索引需要drop index后加上表名跟索引名，原来我直接写的是   DROP INDEX 表名 +索引名 ，总是弄不对，然后百度了一下才弄明白。</span><br></pre></td></tr></table></figure><h2 id="实验详细操作步骤或程序清单"><a href="#实验详细操作步骤或程序清单" class="headerlink" title="实验详细操作步骤或程序清单"></a>实验详细操作步骤或程序清单</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">1.新建一个student数据库</span><br><span class="line"></span><br><span class="line">use master --打开master数据库，一般的创建语句都在master中执行</span><br><span class="line">go</span><br><span class="line">if exists (select * from sysdatabases where name&#x3D;&#39;students&#39;)&#x2F;*检查有没有这个数据库*&#x2F;</span><br><span class="line">  drop database students</span><br><span class="line">go</span><br><span class="line">CREATE DATABASE students &#x2F;*创建数据库students*&#x2F;</span><br><span class="line">ON PRIMARY</span><br><span class="line">(</span><br><span class="line">    name&#x3D;&quot;students_data&quot;,&#x2F;*主数据文件的逻辑名*&#x2F;</span><br><span class="line">    filename&#x3D;&quot;D:\SQL-student-test\students_data.mdf&quot;,  &#x2F;*主数据文件储存位置*&#x2F;</span><br><span class="line">    size&#x3D;3mb,   &#x2F;*主数据文件的初始大小*&#x2F;</span><br><span class="line">    maxsize&#x3D;100mb, &#x2F;*主数据文件的最大大小，不写就是没有限制*&#x2F;</span><br><span class="line">    filegrowth&#x3D;1mb &#x2F;*增量为1MB*&#x2F;</span><br><span class="line">)</span><br><span class="line">log on</span><br><span class="line">(    &#x2F;*日志文件*&#x2F;</span><br><span class="line">    name&#x3D;&quot;students_log&quot;, </span><br><span class="line">    filename&#x3D;&quot;D:\SQL-student-test\students_log.ldf&quot;,&#x2F;*日志文件储存位置*&#x2F;</span><br><span class="line">    size&#x3D;1mb,   &#x2F;*日志文件的初始大小*&#x2F;</span><br><span class="line">    filegrowth&#x3D;10%&#x2F;*增长率为10%*&#x2F;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">2.新建表</span><br><span class="line"></span><br><span class="line">create table student  --创建表student</span><br><span class="line">(</span><br><span class="line">   sno char(8) </span><br><span class="line">   sname char(4) NOT NULL,</span><br><span class="line">   ssex char(2) DEFAULT &#39;男&#39; CHECK(ssex in (&#39;男&#39;,&#39;女&#39;)),</span><br><span class="line">   sage int,</span><br><span class="line">   sdept char(10),</span><br><span class="line">   </span><br><span class="line">   primary key(sno)</span><br><span class="line">)</span><br><span class="line">create table course   --创建表course</span><br><span class="line">(</span><br><span class="line">cno char(2) </span><br><span class="line">canme char(30),</span><br><span class="line">credit int,</span><br><span class="line">cpno char(3),</span><br><span class="line"></span><br><span class="line">primary key(cno) </span><br><span class="line">)</span><br><span class="line">create table sc  --创建表sc </span><br><span class="line">(</span><br><span class="line">sno char(8),</span><br><span class="line">cno char(2),</span><br><span class="line">grade int check(grade&gt;&#x3D;0 and grade&lt;&#x3D;100),</span><br><span class="line">primary key(sno,cno),</span><br><span class="line">foreign key (sno) references student(sno),</span><br><span class="line">foreign key (cno) references course(cno),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">3.第四步骤代码</span><br><span class="line"></span><br><span class="line">（1）alter table student add scome;</span><br><span class="line">（2）alter table student drop column sdept;</span><br><span class="line">（3）alter table sc drop constraint+约束名</span><br><span class="line">（4）alter table sc add foreign key (cno) references course(cno)+约束名，</span><br><span class="line"></span><br><span class="line">4.第六，七步骤代码</span><br><span class="line"></span><br><span class="line">create unique index love on student(sname desc) ;</span><br><span class="line">drop index love on student;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;实验名称：实验一-数据定义&quot;&gt;&lt;a href=&quot;#实验名称：实验一-数据定义&quot; class=&quot;headerlink&quot; title=&quot;实验名称：实验一 数据定义&quot;&gt;&lt;/a&gt;实验名称：实验一 数据定义&lt;/h2&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://stephencurry6666.github.io/categories/SQL/"/>
    
    
      <category term="SQL上机实验" scheme="https://stephencurry6666.github.io/tags/SQL%E4%B8%8A%E6%9C%BA%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE-Day(5)学习笔记</title>
    <link href="https://stephencurry6666.github.io/2020/05/19/JavaSE-Day(5)%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://stephencurry6666.github.io/2020/05/19/JavaSE-Day(5)%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-05-19T08:36:18.183Z</published>
    <updated>2020-05-19T13:00:34.725Z</updated>
    
    <content type="html"><![CDATA[<h3 id="方法概述和格式说明"><a href="#方法概述和格式说明" class="headerlink" title="方法概述和格式说明"></a>方法概述和格式说明</h3><a id="more"></a><p><strong>方法：完成特定功能的代码块。</strong></p><p>注意：在很多语言里面有函数的定义，而在Java中函数被称为方法。</p><p><strong>方法格式：</strong></p><pre><code>  修饰符 返回值类型 方法名(参数类型 参数名1,参数类型 参数名2...) {        方法体语句;        return 返回值;     }</code></pre><p><strong>详细解释：</strong></p><ul><li><p>修饰符：目前就用 public static。后面我们再详细的讲解其他的修饰符。</p></li><li><p>返回值类型：就是功能结果的数据类型。</p></li><li><p>方法名：符合命名规则即可。方便我们的调用。</p></li><li><p>参数：</p><ul><li>实际参数：就是实际参与运算的。</li><li>形式参数；就是方法定义上的，用于接收实际参数的。</li></ul></li><li><p>参数类型：就是参数的数据类型。</p></li><li><p>参数名：就是变量名。</p></li><li><p>方法体语句：就是完成功能的代码。</p></li><li><p>return：结束方法的。</p></li><li><p>返回值：就是功能的结果，由return带给调用者。</p></li></ul><p><strong>要想写好一个方法，就必须明确两个东西：</strong></p><ul><li><p>A:返回值类型<br>  结果的数据类型</p></li><li><p>B:参数列表<br>  你要传递几个参数，以及每个参数的数据类型</p></li></ul><h3 id="方法的定义求和案例"><a href="#方法的定义求和案例" class="headerlink" title="方法的定义求和案例"></a>方法的定义求和案例</h3><p><strong>需求：求两个数据之和的案例</strong></p><ul><li><p>方法的执行特点：不调用，不执行。</p></li><li><p>如何调用呢?(有明确返回值的调用)</p><ul><li><p>A:单独调用,一般来说没有意义，所以不推荐。</p></li><li><p>B:输出调用,但是不够好。因为我们可能需要针对结果进行进一步的操作。</p></li><li><p>C:赋值调用,推荐方案。</p></li></ul></li></ul><h3 id="方法的调用有明确返回值的方法的调用"><a href="#方法的调用有明确返回值的方法的调用" class="headerlink" title="方法的调用有明确返回值的方法的调用"></a>方法的调用有明确返回值的方法的调用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">class FunctionDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int x &#x3D; 10;</span><br><span class="line">int y &#x3D; 20;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;方式1：单独调用</span><br><span class="line">&#x2F;&#x2F;sum(x,y);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;方式2：输出调用</span><br><span class="line">&#x2F;&#x2F;System.out.println(sum(x,y));</span><br><span class="line">&#x2F;&#x2F;System.out.println(30);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;方式3：赋值调用</span><br><span class="line">int result &#x3D; sum(x,y);</span><br><span class="line">&#x2F;&#x2F;result在这里可以进行操作</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">需求：求两个数据之和的案例</span><br><span class="line"></span><br><span class="line">两个明确：</span><br><span class="line">返回值类型：int</span><br><span class="line">参数列表：2个，都是int类型。</span><br><span class="line">*&#x2F;</span><br><span class="line">public static int sum(int a,int b) &#123;</span><br><span class="line">&#x2F;&#x2F;如何实现呢?</span><br><span class="line">&#x2F;&#x2F;int c &#x3D; a + b;</span><br><span class="line">&#x2F;&#x2F;return c;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;c就是a+b,所以，我可以直接返回a+b</span><br><span class="line">return a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法的调用图解"><a href="#方法的调用图解" class="headerlink" title="方法的调用图解"></a>方法的调用图解</h3><p><img src="https://img-blog.csdnimg.cn/20200404172429459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzczNjMz,size_16,color_FFFFFF,t_70" alt="tupian1"></p><h3 id="方法的练习1获取两个数中的最大值"><a href="#方法的练习1获取两个数中的最大值" class="headerlink" title="方法的练习1获取两个数中的最大值"></a>方法的练习1获取两个数中的最大值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">键盘录入两个数据，返回两个数中的较大值</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">class FunctionTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;创建键盘录入对象</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入第一个数据:&quot;);</span><br><span class="line">int a &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入第二个数据:&quot;);</span><br><span class="line">int b &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">int result &#x3D; getMax(a,b);</span><br><span class="line">System.out.println(&quot;较大值是：&quot;+result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">需求：两个数中的较大值</span><br><span class="line">两个明确：</span><br><span class="line">返回值类型：int</span><br><span class="line">参数列表：int a,int b</span><br><span class="line">*&#x2F;</span><br><span class="line">public static int getMax(int a,int b) &#123;</span><br><span class="line">&#x2F;&#x2F;if语句</span><br><span class="line">&#x2F;*</span><br><span class="line">if(a &gt; b) &#123;</span><br><span class="line">&#x2F;&#x2F;System.out.println(a);</span><br><span class="line">return a;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">&#x2F;&#x2F;System.out.println(b);</span><br><span class="line">return b;</span><br><span class="line">&#125;</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;用三元改进</span><br><span class="line">&#x2F;&#x2F;int c &#x3D; ((a &gt; b)? a: b);</span><br><span class="line">&#x2F;&#x2F;return c;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;由于c就是后面的式子</span><br><span class="line">return ((a&gt;b)? a : b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法的练习2比较两个数是否相等"><a href="#方法的练习2比较两个数是否相等" class="headerlink" title="方法的练习2比较两个数是否相等"></a>方法的练习2比较两个数是否相等</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">键盘录入两个数据，比较两个数是否相等</span><br><span class="line"></span><br><span class="line">分析：</span><br><span class="line">比较两个数是否相等结果是一个boolean类型。</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">class FunctionTest2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;创建键盘录入对象</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入第一个数据:&quot;);</span><br><span class="line">int a &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入第二个数据:&quot;);</span><br><span class="line">int b &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">boolean flag &#x3D; compare(a,b);</span><br><span class="line">System.out.println(flag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">需求：比较两个数是否相等</span><br><span class="line">两个明确：</span><br><span class="line">返回值类型：boolean</span><br><span class="line">参数列表：int a,int b</span><br><span class="line">*&#x2F;</span><br><span class="line">public static boolean compare(int a,int b) &#123;</span><br><span class="line">&#x2F;&#x2F;if语句的格式2实现</span><br><span class="line">&#x2F;*</span><br><span class="line">if(a &#x3D;&#x3D; b) &#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;三元改进</span><br><span class="line">&#x2F;&#x2F;boolean flag &#x3D; ((a&#x3D;&#x3D;b)? true: false);</span><br><span class="line">&#x2F;&#x2F;return flag;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;继续改进</span><br><span class="line">&#x2F;&#x2F;return ((a&#x3D;&#x3D;b)? true: false);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;最终版</span><br><span class="line">return a &#x3D;&#x3D; b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法的练习3获取三个数中的最大值"><a href="#方法的练习3获取三个数中的最大值" class="headerlink" title="方法的练习3获取三个数中的最大值"></a>方法的练习3获取三个数中的最大值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">键盘录入三个数据，返回三个数中的最大值</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">class FunctionTest3 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;创建键盘录入对象</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入第一个数据:&quot;);</span><br><span class="line">int a &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入第二个数据:&quot;);</span><br><span class="line">int b &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入第三个数据:&quot;);</span><br><span class="line">int c &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">int max &#x3D; getMax(a,b,c);</span><br><span class="line">System.out.println(&quot;三个数据中的最大值是：&quot;+max);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">需求；返回三个数中的最大值</span><br><span class="line"></span><br><span class="line">两个明确：</span><br><span class="line">返回值类型：int</span><br><span class="line">参数列表：int a,int b,int c</span><br><span class="line">*&#x2F;</span><br><span class="line">public static int getMax(int a,int b,int c) &#123;</span><br><span class="line">&#x2F;&#x2F;if嵌套</span><br><span class="line">&#x2F;*</span><br><span class="line">if(a &gt; b) &#123;</span><br><span class="line">if(a &gt; c) &#123;</span><br><span class="line">return a;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">return c;</span><br><span class="line">&#125;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">if(b &gt; c) &#123;</span><br><span class="line">return b;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">return c;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;用三元改</span><br><span class="line">&#x2F;*</span><br><span class="line">if(a &gt; b) &#123;</span><br><span class="line">return (a&gt;c? a: c);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">return (b&gt;c? b: c);</span><br><span class="line">&#125;</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;继续改进</span><br><span class="line">&#x2F;&#x2F;return (a&gt;b)? (a&gt;c? a: c): (b&gt;c? b: c);</span><br><span class="line">&#x2F;&#x2F;不建议，写代码一定要注意阅读性强</span><br><span class="line">int temp &#x3D; ((a&gt;b)? a: b);</span><br><span class="line">int max &#x3D; ((temp&gt;c)? temp: c);</span><br><span class="line">return max;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法的注意事项"><a href="#方法的注意事项" class="headerlink" title="方法的注意事项"></a>方法的注意事项</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">方法的注意事项：</span><br><span class="line">A:方法不调用不执行</span><br><span class="line">B:方法与方法是平级关系，不能嵌套定义</span><br><span class="line">C:方法定义的时候参数之间用逗号隔开</span><br><span class="line">D:方法调用的时候不用在传递数据类型</span><br><span class="line">E:如果方法有明确的返回值，一定要有return带回一个值</span><br><span class="line">*&#x2F;</span><br><span class="line">class FunctionDemo2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;*</span><br><span class="line">错误的</span><br><span class="line">public static int sum(int a,int b)&#123;</span><br><span class="line">return a + b;</span><br><span class="line">&#125;</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;sum(10,20);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;int x &#x3D; 10;</span><br><span class="line">&#x2F;&#x2F;int y &#x3D; 20;</span><br><span class="line">&#x2F;&#x2F;错误</span><br><span class="line">&#x2F;&#x2F;sum(int x,int y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static int sum(int a,int b)&#123;</span><br><span class="line">return a + b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法的调用void类型方法的定义和调用"><a href="#方法的调用void类型方法的定义和调用" class="headerlink" title="方法的调用void类型方法的定义和调用"></a>方法的调用void类型方法的定义和调用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">需求：在控制台输出如下的形状</span><br><span class="line">*****</span><br><span class="line">*****</span><br><span class="line">*****</span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">void类型返回值的方法调用：</span><br><span class="line">单独调用</span><br><span class="line">输出调用(错误)</span><br><span class="line">赋值调用(错误)</span><br><span class="line">*&#x2F;</span><br><span class="line">class FunctionDemo3 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;for循环嵌套输出图形</span><br><span class="line">for(int x&#x3D;0; x&lt;4; x++) &#123;</span><br><span class="line">for(int y&#x3D;0; y&lt;5; y++) &#123;</span><br><span class="line">System.out.print(&quot;*&quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;--------------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;需求：我要在控制台输出一个6行7列的星形图形</span><br><span class="line">for(int x&#x3D;0; x&lt;6; x++) &#123;</span><br><span class="line">for(int y&#x3D;0; y&lt;7; y++) &#123;</span><br><span class="line">System.out.print(&quot;*&quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;--------------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;如果需要继续改变，我们就应该考虑使用方法改进。</span><br><span class="line">&#x2F;&#x2F;单独调用</span><br><span class="line">pringXing(3,4);</span><br><span class="line">System.out.println(&quot;--------------&quot;);</span><br><span class="line">pringXing(6,7);</span><br><span class="line">System.out.println(&quot;--------------&quot;);</span><br><span class="line">pringXing(8,9);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;输出调用</span><br><span class="line">&#x2F;&#x2F;此处不允许使用 &#39;空&#39; 类型</span><br><span class="line">&#x2F;&#x2F;System.out.println(pringXing(3,4));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;赋值调用</span><br><span class="line">&#x2F;&#x2F;非法的表达式开始</span><br><span class="line">&#x2F;&#x2F;void v &#x3D; pringXing(3,4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">写一个什么样子的方法呢?写一个m行n列的代码</span><br><span class="line"></span><br><span class="line">两个明确：</span><br><span class="line">返回值类型：这个时候没有明确的返回值，不写东西还不行，所以，这里记住是void</span><br><span class="line">参数列表：int m,int n</span><br><span class="line">*&#x2F;</span><br><span class="line">public static void pringXing(int m,int n) &#123;</span><br><span class="line">for(int x&#x3D;0; x&lt;m; x++) &#123;</span><br><span class="line">for(int y&#x3D;0; y&lt;n; y++) &#123;</span><br><span class="line">System.out.print(&quot;*&quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法的练习4根据行数和列数输出星形"><a href="#方法的练习4根据行数和列数输出星形" class="headerlink" title="方法的练习4根据行数和列数输出星形"></a>方法的练习4根据行数和列数输出星形</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">键盘录入行数和列数，输出对应的星形</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">class FunctionTest4 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;创建键盘录入对象</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入行数：&quot;);</span><br><span class="line">int m &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入列数：&quot;);</span><br><span class="line">int n &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;void类型的方法调用</span><br><span class="line">pringXing(m,n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">输出星形</span><br><span class="line"></span><br><span class="line">两个明确：</span><br><span class="line">返回值类型：void</span><br><span class="line">参数列表：int m,int n</span><br><span class="line">*&#x2F;</span><br><span class="line">public static void pringXing(int m,int n) &#123;</span><br><span class="line">for(int x&#x3D;0; x&lt;m; x++) &#123;</span><br><span class="line">for(int y&#x3D;0; y&lt;n; y++) &#123;</span><br><span class="line">System.out.print(&quot;*&quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法的练习5根据键盘录入输入相对应的乘法表"><a href="#方法的练习5根据键盘录入输入相对应的乘法表" class="headerlink" title="方法的练习5根据键盘录入输入相对应的乘法表"></a>方法的练习5根据键盘录入输入相对应的乘法表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">键盘录入一个数据n(1&lt;&#x3D;n&lt;&#x3D;9)，输出对应的nn乘法表</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">class FunctionTest5 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;创建对象</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入n的值：(1~9)&quot;);</span><br><span class="line">int n &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;调用</span><br><span class="line">printNN(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">需求：输出对应的nn乘法表</span><br><span class="line">两个明确：</span><br><span class="line">返回值类型：void</span><br><span class="line">参数列表：int n</span><br><span class="line">*&#x2F;</span><br><span class="line">public static void printNN(int n) &#123;</span><br><span class="line">for(int x&#x3D;1; x&lt;&#x3D;n; x++) &#123;</span><br><span class="line">for(int y&#x3D;1; y&lt;&#x3D;x; y++) &#123;</span><br><span class="line">System.out.print(y+&quot;*&quot;+x+&quot;&#x3D;&quot;+y*x+&quot;\t&quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法重载概述和基本使用"><a href="#方法重载概述和基本使用" class="headerlink" title="方法重载概述和基本使用"></a>方法重载概述和基本使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">需求：我要求数的和</span><br><span class="line"></span><br><span class="line">我们的需求不断的发生改变，我们就对应的提供了多个求和的方法。</span><br><span class="line">但是呢，他们的名字是不一样的。</span><br><span class="line">而我们又要求方法命名做到：见名知意。</span><br><span class="line">但是，很明显，现在没有做到。</span><br><span class="line">那么，肿么办呢?</span><br><span class="line">针对这种情况：方法的功能相同，参数列表不同的情况，为了见名知意，Java允许它们起一样的名字。</span><br><span class="line"></span><br><span class="line">其实，这种情况有一个专业名词：方法重载。</span><br><span class="line"></span><br><span class="line">方法重载：</span><br><span class="line">在同一个类中，方法名相同，参数列表不同。与返回值类型无关。</span><br><span class="line"></span><br><span class="line">参数列表不同：</span><br><span class="line">A:参数个数不同</span><br><span class="line">B:参数类型不同</span><br><span class="line">*&#x2F;</span><br><span class="line">class FunctionDemo4 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;jvm会根据不同的参数去调用不同的功能</span><br><span class="line">System.out.println(sum(10,20));</span><br><span class="line">System.out.println(sum(10,20,30));</span><br><span class="line">System.out.println(sum(10,20,30,40));</span><br><span class="line"></span><br><span class="line">System.out.println(sum(10.5f,20f));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;需求1:求两个数的和</span><br><span class="line">public static int sum(int a,int b) &#123;</span><br><span class="line">System.out.println(&quot;int&quot;);</span><br><span class="line">return a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;需求2:求三数的和</span><br><span class="line">&#x2F;*</span><br><span class="line">public static int sum1(int a,int b,int c) &#123;</span><br><span class="line">return a + b + c;</span><br><span class="line">&#125;</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">public static int sum(int a,int b,int c) &#123;</span><br><span class="line">return a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;需求3:求四个数的和</span><br><span class="line">&#x2F;*</span><br><span class="line">public static int sum2(int a,int b,int c,int d) &#123;</span><br><span class="line">return a + b + c + d;</span><br><span class="line">&#125;</span><br><span class="line">*&#x2F;</span><br><span class="line">public static int sum(int a,int b,int c,int d) &#123;</span><br><span class="line">return a + b + c + d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static float sum(float a,float b) &#123;</span><br><span class="line">System.out.println(&quot;float&quot;);</span><br><span class="line">return a + b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法重载练习比较数据是否相等"><a href="#方法重载练习比较数据是否相等" class="headerlink" title="方法重载练习比较数据是否相等"></a>方法重载练习比较数据是否相等</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">比较两个数据是否相等。参数类型分别为</span><br><span class="line">两个byte类型，两个short类型，两个int类型，两个long类型，</span><br><span class="line">并在main方法中进行测试</span><br><span class="line">*&#x2F;</span><br><span class="line">class FunctionTest6 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;测试</span><br><span class="line">byte b1 &#x3D; 3;</span><br><span class="line">byte b2 &#x3D; 4;</span><br><span class="line">System.out.println(&quot;byte:&quot;+compare(b1,b2));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;测试</span><br><span class="line">short s1 &#x3D; 5;</span><br><span class="line">short s2 &#x3D; 5;</span><br><span class="line">System.out.println(&quot;short:&quot;+compare(s1,s2));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;后面的两个自己测试</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;byte类型</span><br><span class="line">public static boolean compare(byte a,byte b) &#123;</span><br><span class="line">System.out.println(&quot;byte&quot;);</span><br><span class="line">return a &#x3D;&#x3D; b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;short类型</span><br><span class="line">public static boolean compare(short a,short b) &#123;</span><br><span class="line">System.out.println(&quot;short&quot;);</span><br><span class="line">return a &#x3D;&#x3D; b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;int类型</span><br><span class="line">public static boolean compare(int a,int b) &#123;</span><br><span class="line">System.out.println(&quot;int&quot;);</span><br><span class="line">return a &#x3D;&#x3D; b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;long类型</span><br><span class="line">public static boolean compare(long a,long b) &#123;</span><br><span class="line">System.out.println(&quot;long&quot;);</span><br><span class="line">return a &#x3D;&#x3D; b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组概述和定义格式说明"><a href="#数组概述和定义格式说明" class="headerlink" title="数组概述和定义格式说明"></a>数组概述和定义格式说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">数组:存储同一种数据类型的多个元素的容器。</span><br><span class="line"></span><br><span class="line">定义格式：</span><br><span class="line">A:数据类型[] 数组名;</span><br><span class="line">B:数据类型 数组名[];</span><br><span class="line"></span><br><span class="line">举例：</span><br><span class="line">A:int[] a; 定义一个int类型的数组a变量</span><br><span class="line">B:int a[]; 定义一个int类型的a数组变量</span><br><span class="line"></span><br><span class="line">注意：效果可以认为是一样的，都是定义一个int数组，但是念法上有些小区别。推荐使用第一种。</span><br></pre></td></tr></table></figure><h3 id="数组的初始化动态初始化"><a href="#数组的初始化动态初始化" class="headerlink" title="数组的初始化动态初始化"></a>数组的初始化动态初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">如何对数组进行初始化呢?</span><br><span class="line">A:何谓初始化呢? 就是为数组开辟内存空间，并为每个数组元素赋予值</span><br><span class="line">B:有几种方式呢?</span><br><span class="line">a:动态初始化 只指定长度，由系统给出初始化值</span><br><span class="line">b:静态初始化 给出初始化值，由系统决定长度</span><br><span class="line"></span><br><span class="line">动态初始化的格式：</span><br><span class="line">数据类型[] 数组名 &#x3D; new 数据类型[数组长度];</span><br><span class="line"></span><br><span class="line">举例：</span><br><span class="line">int[] arr &#x3D; new int[3];</span><br><span class="line"></span><br><span class="line">如何获取数组中的元素呢?</span><br><span class="line">通过:</span><br><span class="line">数组名[索引]</span><br><span class="line">索引其实就是每个元素的编号，从0开始，最大索引是数组的长度-1。</span><br><span class="line">*&#x2F;</span><br><span class="line">class ArrayDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;定义一个数组</span><br><span class="line">&#x2F;&#x2F;int[] a;</span><br><span class="line">&#x2F;&#x2F;可能尚未初始化变量a</span><br><span class="line">&#x2F;&#x2F;System.out.println(a);</span><br><span class="line"></span><br><span class="line">int[] arr &#x3D; new int[3];</span><br><span class="line">&#x2F;*</span><br><span class="line">左边：</span><br><span class="line">int:说明数组中的元素的数据类型是int类型</span><br><span class="line">[]:说明这是一个数组</span><br><span class="line">arr:是数组的名称</span><br><span class="line"></span><br><span class="line">右边：</span><br><span class="line">new:为数组分配内存空间。</span><br><span class="line">int:说明数组中的元素的数据类型是int类型</span><br><span class="line">[]:说明这是一个数组</span><br><span class="line">3:数组长度，其实也就是数组中元素的个数</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">System.out.println(arr); &#x2F;&#x2F;[I@175078b 地址值。</span><br><span class="line">&#x2F;&#x2F;我要地址值没有意义啊，我就要数据值，怎么办呢?</span><br><span class="line">&#x2F;&#x2F;不用担心，java为你考虑到了。</span><br><span class="line">&#x2F;&#x2F;其实数组中的每个元素都是有编号的，并且是从0开始。最大编号是数组的长度-1。</span><br><span class="line">&#x2F;&#x2F;用数组名和编号的配合就可以获取数组中的指定编号的元素。这个编号的专业叫法：索引</span><br><span class="line">&#x2F;&#x2F;通过数组名访问数据的格式是：数组名[索引];</span><br><span class="line">System.out.println(arr[0]);</span><br><span class="line">System.out.println(arr[1]);</span><br><span class="line">System.out.println(arr[2]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Java中内存分配以及栈和堆的区别"><a href="#Java中内存分配以及栈和堆的区别" class="headerlink" title="Java中内存分配以及栈和堆的区别"></a>Java中内存分配以及栈和堆的区别</h3><p><img src="https://img-blog.csdnimg.cn/20200213004314263.bmp?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poZW5nemhvbmd6,size_16,color_FFFFFF,t_70" alt="tupian2"></p><h3 id="数组的内存图解1一个数组"><a href="#数组的内存图解1一个数组" class="headerlink" title="数组的内存图解1一个数组"></a>数组的内存图解1一个数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">定义一个数组，输出该数组的名称和数组元素值。</span><br><span class="line">给数组元素赋值，再次输出该数组的名称和数组元素值。</span><br><span class="line">*&#x2F;</span><br><span class="line">class ArrayDemo2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;定义一个数组</span><br><span class="line">int[] arr &#x3D; new int[3];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;输出数组名称</span><br><span class="line">System.out.println(arr);</span><br><span class="line">&#x2F;&#x2F;输出数组元素值</span><br><span class="line">System.out.println(arr[0]);</span><br><span class="line">System.out.println(arr[1]);</span><br><span class="line">System.out.println(arr[2]);</span><br><span class="line">System.out.println(&quot;----&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;给数组元素赋值</span><br><span class="line">arr[0] &#x3D; 100;</span><br><span class="line">arr[2] &#x3D; 200;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;输出数组名称</span><br><span class="line">System.out.println(arr);</span><br><span class="line">&#x2F;&#x2F;输出数组元素值</span><br><span class="line">System.out.println(arr[0]);</span><br><span class="line">System.out.println(arr[1]);</span><br><span class="line">System.out.println(arr[2]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://static.oschina.net/uploads/space/2015/0902/073341_azOE_2001589.png" alt="tupian3"></p><h3 id="数组的内存图解2二个数组"><a href="#数组的内存图解2二个数组" class="headerlink" title="数组的内存图解2二个数组"></a>数组的内存图解2二个数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">定义两个数组，分别输出两个数组各自的数组名及元素值。</span><br><span class="line">然后给每个数组的元素重新赋值，再次分别输出两个数组各自的数组名及元素值。</span><br><span class="line">*&#x2F;</span><br><span class="line">class ArrayDemo3 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;定义第一个数组</span><br><span class="line">int[] arr &#x3D; new int[2];</span><br><span class="line">&#x2F;&#x2F;定义第二个数组</span><br><span class="line">int[] arr2 &#x3D; new int[3];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;输出数组名和元素值</span><br><span class="line">System.out.println(arr);</span><br><span class="line">System.out.println(arr[0]);</span><br><span class="line">System.out.println(arr[1]);</span><br><span class="line">System.out.println(&quot;----&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(arr2);</span><br><span class="line">System.out.println(arr2[0]);</span><br><span class="line">System.out.println(arr2[1]);</span><br><span class="line">System.out.println(arr2[2]);</span><br><span class="line">System.out.println(&quot;----&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;给元素重新赋值</span><br><span class="line">arr[1] &#x3D; 20;</span><br><span class="line"></span><br><span class="line">arr2[1] &#x3D; 30;</span><br><span class="line">arr2[0] &#x3D; 40;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;输出数组名和元素值</span><br><span class="line">System.out.println(arr);</span><br><span class="line">System.out.println(arr[0]);</span><br><span class="line">System.out.println(arr[1]);</span><br><span class="line">System.out.println(&quot;----&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(arr2);</span><br><span class="line">System.out.println(arr2[0]);</span><br><span class="line">System.out.println(arr2[1]);</span><br><span class="line">System.out.println(arr2[2]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://static.oschina.net/uploads/space/2015/0902/073949_o2YO_2001589.png" alt="tupian4"></p><h3 id="数组的内存图解3三个数组"><a href="#数组的内存图解3三个数组" class="headerlink" title="数组的内存图解3三个数组"></a>数组的内存图解3三个数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">定义第一个数组,定义完毕后，给数组元素赋值。赋值完毕后，在输出数组名称和元素。</span><br><span class="line">定义第二个数组,定义完毕后，给数组元素赋值。赋值完毕后，在输出数组名称和元素。</span><br><span class="line">定义第三个数组,把第一个数组的地址值赋值给它。(注意类型一致)，通过第三个数组的名称去把元素重复赋值。</span><br><span class="line">最后，再次输出第一个数组数组名称和元素。</span><br><span class="line">*&#x2F;</span><br><span class="line">class ArrayDemo4 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;定义第一个数组</span><br><span class="line">int[] arr &#x3D; new int[3];</span><br><span class="line">arr[0] &#x3D; 88;</span><br><span class="line">arr[1] &#x3D; 33;</span><br><span class="line">arr[2] &#x3D; 66;</span><br><span class="line">System.out.println(arr);</span><br><span class="line">System.out.println(arr[0]);</span><br><span class="line">System.out.println(arr[1]);</span><br><span class="line">System.out.println(arr[2]);</span><br><span class="line">System.out.println(&quot;----&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义第二个数组</span><br><span class="line">int[] arr2 &#x3D; new int[3];</span><br><span class="line">arr2[0] &#x3D; 22;</span><br><span class="line">arr2[1] &#x3D; 44;</span><br><span class="line">arr2[2] &#x3D; 55;</span><br><span class="line">System.out.println(arr2);</span><br><span class="line">System.out.println(arr2[0]);</span><br><span class="line">System.out.println(arr2[1]);</span><br><span class="line">System.out.println(arr2[2]);</span><br><span class="line">System.out.println(&quot;----&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义第三个数组</span><br><span class="line">int[] arr3 &#x3D;  arr;</span><br><span class="line">arr3[0] &#x3D; 100;</span><br><span class="line">arr3[1] &#x3D; 200;</span><br><span class="line">System.out.println(arr);</span><br><span class="line">System.out.println(arr[0]);</span><br><span class="line">System.out.println(arr[1]);</span><br><span class="line">System.out.println(arr[2]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://static.oschina.net/uploads/space/2015/0902/074929_IVwD_2001589.png" alt="tupian5"></p><h3 id="数组的初始化静态初始化记内存图"><a href="#数组的初始化静态初始化记内存图" class="headerlink" title="数组的初始化静态初始化记内存图"></a>数组的初始化静态初始化记内存图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">数组的静态初始化：</span><br><span class="line">格式：数据类型[] 数组名 &#x3D; new 数据类型[]&#123;元素1,元素2,…&#125;;</span><br><span class="line">简化格式：</span><br><span class="line">数据类型[] 数组名 &#x3D; &#123;元素1,元素2,…&#125;;</span><br><span class="line"></span><br><span class="line">举例：</span><br><span class="line">int[] arr &#x3D; new int[]&#123;1,2,3&#125;;</span><br><span class="line"></span><br><span class="line">简化后：</span><br><span class="line"></span><br><span class="line">int[] arr &#x3D; &#123;1,2,3&#125;;</span><br><span class="line"></span><br><span class="line">注意事项：</span><br><span class="line">不要同时动态和静态进行。</span><br><span class="line">如下格式：</span><br><span class="line">int[] arr &#x3D; new int[3]&#123;1,2,3&#125;; &#x2F;&#x2F;错误</span><br><span class="line">*&#x2F;</span><br><span class="line">class ArrayDemo5 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;定义数组</span><br><span class="line">int[] arr &#x3D; &#123;1,2,3&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(arr);</span><br><span class="line">System.out.println(arr[0]);</span><br><span class="line">System.out.println(arr[1]);</span><br><span class="line">System.out.println(arr[2]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://static.oschina.net/uploads/space/2015/0902/080032_9LAE_2001589.png" alt="tupian6"></p><h3 id="数组操作的两个常见小问题：越界和空指针"><a href="#数组操作的两个常见小问题：越界和空指针" class="headerlink" title="数组操作的两个常见小问题：越界和空指针"></a>数组操作的两个常见小问题：越界和空指针</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">数组操作的两个常见小问题：</span><br><span class="line">ArrayIndexOutOfBoundsException:数组索引越界异常</span><br><span class="line">原因：你访问了不存在的索引。</span><br><span class="line"></span><br><span class="line">NullPointerException:空指针异常</span><br><span class="line">原因：数组已经不在指向堆内存了。而你还用数组名去访问元素。</span><br><span class="line"></span><br><span class="line">作用：请自己把所有的场景Exception结尾的问题总结一下。以后遇到就记录下来。</span><br><span class="line">  现象，原因，解决方案。</span><br><span class="line">*&#x2F;</span><br><span class="line">class ArrayDemo6 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;定义数组</span><br><span class="line">int[] arr &#x3D; &#123;1,2,3&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;System.out.println(arr[3]);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;引用类型的常量：空常量 null</span><br><span class="line">arr &#x3D; null;</span><br><span class="line">System.out.println(arr[0]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组的操作1遍历"><a href="#数组的操作1遍历" class="headerlink" title="数组的操作1遍历"></a>数组的操作1遍历</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">数组遍历：就是依次输出数组中的每一个元素。</span><br><span class="line"></span><br><span class="line">注意：数组提供了一个属性length，用于获取数组的长度。</span><br><span class="line">  格式：数组名.length</span><br><span class="line">*&#x2F;</span><br><span class="line">class ArrayTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;定义数组</span><br><span class="line">int[] arr &#x3D; &#123;11,22,33,44,55&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;获取每一个元素</span><br><span class="line">&#x2F;&#x2F;如何获取呢?我们知道数组名结合编号(索引)就可以找到数据</span><br><span class="line">System.out.println(arr[0]);</span><br><span class="line">System.out.println(arr[1]);</span><br><span class="line">System.out.println(arr[2]);</span><br><span class="line">System.out.println(arr[3]);</span><br><span class="line">System.out.println(arr[4]);</span><br><span class="line">System.out.println(&quot;--------------------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;虽然这种做法可以，但是不是我想要的</span><br><span class="line">&#x2F;&#x2F;我们发现，代码的重复度很高</span><br><span class="line">&#x2F;&#x2F;输出语句，数组名都是相同的，仅仅是索引是变化的</span><br><span class="line">&#x2F;&#x2F;我们就可以使用循环搞定索引值</span><br><span class="line">for(int x&#x3D;0; x&lt;5; x++) &#123;</span><br><span class="line">&#x2F;&#x2F;x&#x3D;0,1,2,3,4</span><br><span class="line">System.out.println(arr[x]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;--------------------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;从0开始我们是明确的，但是为什么到5呢，我们是数了一下数组的个数</span><br><span class="line">&#x2F;&#x2F;继续看下个数组如何遍历</span><br><span class="line">int[] arr2 &#x3D; &#123;1,2,3,4,5,6,7,8,9,10,11,2,2,3,4,5,7,8,5,3,5,6,8,7,8,5,3,5,6,8,7,8,5,3,5,6,8,7,8,5,3,5,6,8,7,8,5,3,5,6,8&#125;;</span><br><span class="line">&#x2F;&#x2F;而我们在很多时候，数组的元素不能靠数</span><br><span class="line">&#x2F;&#x2F;这个时候，数组就给我们提供了一个属性：length专门用于获取数组的长度</span><br><span class="line">&#x2F;&#x2F;格式：数组名.length 返回数组的长度</span><br><span class="line">System.out.println(arr.length);</span><br><span class="line">System.out.println(arr2.length);</span><br><span class="line">System.out.println(&quot;--------------------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;改进第一个程序</span><br><span class="line">for(int x&#x3D;0; x&lt;arr.length; x++) &#123;</span><br><span class="line">System.out.println(arr[x]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;--------------------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;我们如果想要对多个数组进行遍历，每个数组的遍历我们都把代码写一遍，麻烦不</span><br><span class="line">&#x2F;&#x2F;麻烦，所以，我们准备用方法改进。</span><br><span class="line">&#x2F;&#x2F;用方法改进后，请调用</span><br><span class="line">printArray(arr);</span><br><span class="line">System.out.println(&quot;--------------------&quot;);</span><br><span class="line">printArray(arr2);</span><br><span class="line">System.out.println(&quot;--------------------&quot;);</span><br><span class="line">printArray2(arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">遍历数组的方法</span><br><span class="line"></span><br><span class="line">两个明确：</span><br><span class="line">返回值类型：void</span><br><span class="line">参数列表：int[] arr</span><br><span class="line">*&#x2F;</span><br><span class="line">public static void printArray(int[] arr) &#123;</span><br><span class="line">for(int x&#x3D;0; x&lt;arr.length; x++) &#123;</span><br><span class="line">System.out.println(arr[x]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;请看改进版本</span><br><span class="line">public static void printArray2(int[] arr) &#123;</span><br><span class="line">System.out.print(&quot;[&quot;);</span><br><span class="line">for(int x&#x3D;0; x&lt;arr.length; x++) &#123;</span><br><span class="line">if(x &#x3D;&#x3D; arr.length-1) &#123; &#x2F;&#x2F;这是最后一个元素</span><br><span class="line">System.out.println(arr[x]+&quot;]&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.print(arr[x]+&quot;, &quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组的操作2获取最值"><a href="#数组的操作2获取最值" class="headerlink" title="数组的操作2获取最值"></a>数组的操作2获取最值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">数组获取最值(获取数组中的最大值最小值)</span><br><span class="line"></span><br><span class="line">分析：</span><br><span class="line">A:定义一个数组，并对数组的元素进行静态初始化。</span><br><span class="line">B:从数组中任意的找一个元素作为参照物(一般取第一个),默认它就是最大值。</span><br><span class="line">C:然后遍历其他的元素，依次获取和参照物进行比较，如果大就留下来，如果小，就离开。</span><br><span class="line">D:最后参照物里面保存的就是最大值。</span><br><span class="line">*&#x2F;</span><br><span class="line">class ArrayTest2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;定义一个数组</span><br><span class="line">int[] arr &#x3D; &#123;34,98,10,25,67&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;请获取数组中的最大值</span><br><span class="line">&#x2F;*</span><br><span class="line">&#x2F;&#x2F;从数组中任意的找一个元素作为参照物</span><br><span class="line">int max &#x3D; arr[0];</span><br><span class="line">&#x2F;&#x2F;然后遍历其他的元素</span><br><span class="line">for(int x&#x3D;1; x&lt;arr.length; x++) &#123;</span><br><span class="line">&#x2F;&#x2F;依次获取和参照物进行比较，如果大就留下来，如果小，就离开。</span><br><span class="line">if(arr[x] &gt; max) &#123;</span><br><span class="line">max &#x3D; arr[x];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;最后参照物里面保存的就是最大值。</span><br><span class="line">System.out.println(&quot;max:&quot;+max);</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;把这个代码用方法改进</span><br><span class="line">&#x2F;&#x2F;调用方法</span><br><span class="line">int max &#x3D; getMax(arr);</span><br><span class="line">System.out.println(&quot;max:&quot;+max);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;请获取数组中的最小值</span><br><span class="line">int min &#x3D; getMin(arr);</span><br><span class="line">System.out.println(&quot;min:&quot;+min);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">需求：获取数组中的最大值</span><br><span class="line">两个明确：</span><br><span class="line">返回值类型：int</span><br><span class="line">参数列表：int[] arr</span><br><span class="line">*&#x2F;</span><br><span class="line">public static int getMax(int[] arr) &#123;</span><br><span class="line">&#x2F;&#x2F;从数组中任意的找一个元素作为参照物</span><br><span class="line">int max &#x3D; arr[0];</span><br><span class="line">&#x2F;&#x2F;然后遍历其他的元素</span><br><span class="line">for(int x&#x3D;1; x&lt;arr.length; x++) &#123;</span><br><span class="line">&#x2F;&#x2F;依次获取和参照物进行比较，如果大就留下来，如果小，就离开。</span><br><span class="line">if(arr[x] &gt; max) &#123;</span><br><span class="line">max &#x3D; arr[x];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;最后参照物里面保存的就是最大值。</span><br><span class="line">return max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static int getMin(int[] arr) &#123;</span><br><span class="line">&#x2F;&#x2F;从数组中任意的找一个元素作为参照物</span><br><span class="line">int min &#x3D; arr[0];</span><br><span class="line">&#x2F;&#x2F;然后遍历其他的元素</span><br><span class="line">for(int x&#x3D;1; x&lt;arr.length; x++) &#123;</span><br><span class="line">&#x2F;&#x2F;依次获取和参照物进行比较，如果小就留下来，如果大，就离开。</span><br><span class="line">if(arr[x] &lt; min) &#123;</span><br><span class="line">min &#x3D; arr[x];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;最后参照物里面保存的就是最小值。</span><br><span class="line">return min;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组的操作3逆序"><a href="#数组的操作3逆序" class="headerlink" title="数组的操作3逆序"></a>数组的操作3逆序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">数组元素逆序 (就是把元素对调)</span><br><span class="line"></span><br><span class="line">分析：</span><br><span class="line">A:定义一个数组，并进行静态初始化。</span><br><span class="line">B:思路</span><br><span class="line">把0索引和arr.length-1的数据交换</span><br><span class="line">把1索引和arr.length-2的数据交换</span><br><span class="line">...</span><br><span class="line">只要做到arr.length&#x2F;2的时候即可。</span><br><span class="line">*&#x2F;</span><br><span class="line">class ArrayTest3 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;定义一个数组，并进行静态初始化。</span><br><span class="line">int[] arr &#x3D; &#123;12,98,50,34,76&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;逆序前</span><br><span class="line">System.out.println(&quot;逆序前：&quot;);</span><br><span class="line">printArray(arr);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;逆序后</span><br><span class="line">System.out.println(&quot;逆序后：&quot;);</span><br><span class="line">&#x2F;&#x2F;reverse(arr);</span><br><span class="line">reverse2(arr);</span><br><span class="line">printArray(arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">需求：数组逆序</span><br><span class="line">两个明确：</span><br><span class="line">返回值类型：void (有人会想到应该返回的是逆序后的数组，但是没必要，因为这两个数组其实是同一个数组)</span><br><span class="line">参数列表：int[] arr</span><br><span class="line">*&#x2F;</span><br><span class="line">public static void reverse(int[] arr) &#123;</span><br><span class="line">&#x2F;*</span><br><span class="line">&#x2F;&#x2F;第一次交换</span><br><span class="line">int temp &#x3D; arr[0];</span><br><span class="line">arr[0] &#x3D; arr[arr.length-1-0];</span><br><span class="line">arr[arr.length-1-0] &#x3D; temp;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第二次交换</span><br><span class="line">int temp &#x3D; arr[1];</span><br><span class="line">arr[1] &#x3D; arr[arr.length-1-1];</span><br><span class="line">arr[arr.length-1-1] &#x3D; temp;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第三次交换</span><br><span class="line">int temp &#x3D; arr[2];</span><br><span class="line">arr[2] &#x3D; arr[arr.length-1-2];</span><br><span class="line">arr[arr.length-1-2] &#x3D; temp;</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F;用循环改进</span><br><span class="line">for(int x&#x3D;0; x&lt;arr.length&#x2F;2; x++) &#123;</span><br><span class="line">int temp &#x3D; arr[x];</span><br><span class="line">arr[x] &#x3D; arr[arr.length-1-x];</span><br><span class="line">arr[arr.length-1-x] &#x3D; temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void reverse2(int[] arr) &#123;</span><br><span class="line">for(int start&#x3D;0,end&#x3D;arr.length-1; start&lt;&#x3D;end; start++,end--) &#123;</span><br><span class="line">int temp &#x3D; arr[start];</span><br><span class="line">arr[start] &#x3D; arr[end];</span><br><span class="line">arr[end] &#x3D; temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;遍历数组</span><br><span class="line">public static void printArray(int[] arr) &#123;</span><br><span class="line">System.out.print(&quot;[&quot;);</span><br><span class="line">for(int x&#x3D;0; x&lt;arr.length; x++) &#123;</span><br><span class="line">if(x &#x3D;&#x3D; arr.length-1) &#123; &#x2F;&#x2F;这是最后一个元素</span><br><span class="line">System.out.println(arr[x]+&quot;]&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.print(arr[x]+&quot;, &quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组的操作4查表法"><a href="#数组的操作4查表法" class="headerlink" title="数组的操作4查表法"></a>数组的操作4查表法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">数组查表法(根据键盘录入索引,查找对应星期)</span><br><span class="line">意思是：String[] strArray &#x3D; &#123;&quot;星期一&quot;,&quot;星期二&quot;,...&#125;;</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">class ArrayTest4 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;定义一个字符串数组</span><br><span class="line">String[] strArray &#x3D; &#123;&quot;星期一&quot;,&quot;星期二&quot;,&quot;星期三&quot;,&quot;星期四&quot;,&quot;星期五&quot;,&quot;星期六&quot;,&quot;星期日&quot;&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;创建键盘录入对象</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入一个数据(0-6)：&quot;);</span><br><span class="line">int index &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;你要查找的日期是：&quot;+strArray[index]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组的操作5基本查找"><a href="#数组的操作5基本查找" class="headerlink" title="数组的操作5基本查找"></a>数组的操作5基本查找</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">需求：数组元素查找(查找指定元素第一次在数组中出现的索引)</span><br><span class="line"></span><br><span class="line">分析：</span><br><span class="line">A:定义一个数组，并静态初始化。</span><br><span class="line">B:写一个功能实现</span><br><span class="line">遍历数组，依次获取数组中的每一个元素，和已知的数据进行比较</span><br><span class="line">如果相等，就返回当前的索引值。</span><br><span class="line">*&#x2F;</span><br><span class="line">class ArrayTest5 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;定义一个数组，并静态初始化</span><br><span class="line">int[] arr &#x3D; &#123;200,250,38,888,444&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;需求：我要查找250在这个数组中第一次出现的索引</span><br><span class="line">int index &#x3D; getIndex(arr,250);</span><br><span class="line">System.out.println(&quot;250在数组中第一次出现的索引是：&quot;+index);</span><br><span class="line"></span><br><span class="line">int index2 &#x3D; getIndex2(arr,250);</span><br><span class="line">System.out.println(&quot;250在数组中第一次出现的索引是：&quot;+index2);</span><br><span class="line"></span><br><span class="line">int index3 &#x3D; getIndex2(arr,2500);</span><br><span class="line">System.out.println(&quot;2500在数组中第一次出现的索引是：&quot;+index3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">需求：查找指定数据在数组中第一次出现的索引</span><br><span class="line">两个明确：</span><br><span class="line">返回值类型：int</span><br><span class="line">参数列表：int[] arr,int value</span><br><span class="line">*&#x2F;</span><br><span class="line">public static int getIndex(int[] arr,int value) &#123;</span><br><span class="line">&#x2F;&#x2F;遍历数组，依次获取数组中的每一个元素，和已知的数据进行比较</span><br><span class="line">for(int x&#x3D;0; x&lt;arr.length; x++) &#123;</span><br><span class="line">if(arr[x] &#x3D;&#x3D; value) &#123;</span><br><span class="line">&#x2F;&#x2F;如果相等，就返回当前的索引值。</span><br><span class="line">return x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;目前的代码有一个小问题</span><br><span class="line">&#x2F;&#x2F;就是假如我要查找的数据在数组中不存在，那就找不到，找不到，你就对应的返回吗?</span><br><span class="line">&#x2F;&#x2F;所以报错。</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;只要是判断，就可能是false，所以大家要细心。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;如果找不到数据，我们一般返回一个负数即可，而且是返回-1</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static int getIndex2(int[] arr,int value) &#123;</span><br><span class="line">&#x2F;&#x2F;定义一个索引</span><br><span class="line">int index &#x3D; -1;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;有就修改索引值</span><br><span class="line">for(int x&#x3D;0; x&lt;arr.length; x++) &#123;</span><br><span class="line">if(arr[x] &#x3D;&#x3D; value) &#123;</span><br><span class="line">index &#x3D; x;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;返回index</span><br><span class="line">return index;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;方法概述和格式说明&quot;&gt;&lt;a href=&quot;#方法概述和格式说明&quot; class=&quot;headerlink&quot; title=&quot;方法概述和格式说明&quot;&gt;&lt;/a&gt;方法概述和格式说明&lt;/h3&gt;
    
    </summary>
    
    
      <category term="Java系统学习-JavaSE篇" scheme="https://stephencurry6666.github.io/categories/Java%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0-JavaSE%E7%AF%87/"/>
    
    
      <category term="Java系统学习" scheme="https://stephencurry6666.github.io/tags/Java%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>再次温习矩阵快速幂的一些思路</title>
    <link href="https://stephencurry6666.github.io/2020/05/19/%E5%86%8D%E6%AC%A1%E6%B8%A9%E4%B9%A0%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%B7%AF/"/>
    <id>https://stephencurry6666.github.io/2020/05/19/%E5%86%8D%E6%AC%A1%E6%B8%A9%E4%B9%A0%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%B7%AF/</id>
    <published>2020-05-19T03:33:36.941Z</published>
    <updated>2020-05-19T04:00:51.768Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>因为之前4月份打了将近一个月的个人赛，有些以前学习过的算法已经忘了，所以重新再温习一遍。</p><a id="more"></a><h2 id="关于矩阵快速幂"><a href="#关于矩阵快速幂" class="headerlink" title="关于矩阵快速幂"></a>关于矩阵快速幂</h2><p><strong>矩阵快速幂就是把整数变成矩阵用快速幂来算其次方，比如$A^{n-2}$，其中$A=\begin{Bmatrix}<br>1 &amp; 1\\<br> 1&amp; 0<br>\end{Bmatrix}$,像这样的就是矩阵快速幂。</strong></p><h2 id="矩阵快速幂"><a href="#矩阵快速幂" class="headerlink" title="矩阵快速幂"></a>矩阵快速幂</h2><h3 id="矩阵的一些名词定义"><a href="#矩阵的一些名词定义" class="headerlink" title="矩阵的一些名词定义"></a>矩阵的一些名词定义</h3><ul><li><p>$n$阶矩阵：$\begin{Bmatrix}<br>1 &amp; 1\\<br>1&amp; 0<br>\end{Bmatrix}$，这就是一个$2∗2$的矩阵，也叫$2$阶矩阵。</p></li><li><p>行向量：只有一行的矩阵，也叫行矩阵，$(a1,a2,…,an)$这就是一个行向量。</p></li><li><p>列向量：只有一列的矩阵，也叫列矩阵，$\begin{Bmatrix}<br>a_{1}\\<br>a_{2}\\<br>a_{3}\\<br>…\\<br>a_{n}<br>\end{Bmatrix}$，这就是一个列向量。</p></li></ul><h3 id="矩阵的相关运算"><a href="#矩阵的相关运算" class="headerlink" title="矩阵的相关运算"></a>矩阵的相关运算</h3><p><strong>矩阵加法：</strong></p><p>设有两个$m*n$的矩阵，$A=(a_{ij})$，$B=(b_{ij})$，那么矩阵$A$和$B$的和记做$A+B$。也就是对应相加重新构成的一个矩阵。这里要注意的是，只有当两个矩阵是同型矩阵（也就是行数相等列数也相等）时，这两个矩阵才能进行加法运算。</p><p><strong>矩阵乘法：</strong></p><p>就是对应的第一个矩阵的第一行的第一个数乘以第二个矩阵的第一列的第一个数；<br>第一个矩阵的第一行的第二个数乘以第二个矩阵的第一列的第二个数。总结来说就是第一个矩阵的每一行去乘以对应的第二个矩阵的每一列。</p><p><strong>PS1：剩下的许多关于矩阵的知识可以看这篇博客：<a href="https://blog.csdn.net/nuoyanli/article/details/105314274" target="_blank" rel="noopener">https://blog.csdn.net/nuoyanli/article/details/105314274</a></strong></p><p><strong>PS2：视频讲解可以看这个视频：<a href="https://www.bilibili.com/video/BV1gx41127d7?p=1" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1gx41127d7?p=1</a></strong></p><h2 id="矩阵快速幂的模板及例题"><a href="#矩阵快速幂的模板及例题" class="headerlink" title="矩阵快速幂的模板及例题"></a>矩阵快速幂的模板及例题</h2><h3 id="矩阵快速幂的模板"><a href="#矩阵快速幂的模板" class="headerlink" title="矩阵快速幂的模板"></a>矩阵快速幂的模板</h3><p><strong>首先先给出矩阵乘法的模板，这里以51nod-1137为例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 1010;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">using namespace std;</span><br><span class="line">int m1[maxx][maxx], m2[maxx][maxx], m[maxx][maxx];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    ios::sync_with_stdio(false);</span><br><span class="line">    cin.tie(0);</span><br><span class="line">    cout.tie(0);</span><br><span class="line">    int n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    memset(m, 0, sizeof(m));</span><br><span class="line">    for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">        for (int j &#x3D; 1; j &lt;&#x3D; n; j++)</span><br><span class="line">            cin &gt;&gt; m1[i][j];</span><br><span class="line">    for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">        for (int j &#x3D; 1; j &lt;&#x3D; n; j++)</span><br><span class="line">            cin &gt;&gt; m2[i][j];</span><br><span class="line">    for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">        for (int j &#x3D; 1; j &lt;&#x3D; n; j++)</span><br><span class="line">            for (int k &#x3D; 1; k &lt;&#x3D; n; k++)</span><br><span class="line">                m[i][j] +&#x3D; m1[i][k] * m2[k][j];</span><br><span class="line">    for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for (int j &#x3D; 1; j &lt;&#x3D; n; j++)</span><br><span class="line">            cout &lt;&lt; m[i][j] &lt;&lt; &quot; &quot;;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>给出矩阵快速幂的模板，这里以51nod-1113为例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 110;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">const int mod &#x3D; 1e9 + 7;</span><br><span class="line">#define mod(x) ((x) % mod)</span><br><span class="line">using namespace std;</span><br><span class="line">int n;</span><br><span class="line">struct mat</span><br><span class="line">&#123;</span><br><span class="line">    int m[maxx][maxx];</span><br><span class="line">&#125; unit; &#x2F;&#x2F;矩阵</span><br><span class="line">mat operator*(mat a, mat b)</span><br><span class="line">&#123; &#x2F;&#x2F;重载矩阵乘法</span><br><span class="line">    mat res;</span><br><span class="line">    ll x; &#x2F;&#x2F;可能爆int</span><br><span class="line">    for (int i &#x3D; 0; i &lt; n; i++)</span><br><span class="line">        for (int j &#x3D; 0; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            x &#x3D; 0;</span><br><span class="line">            for (int k &#x3D; 0; k &lt; n; k++)</span><br><span class="line">                x +&#x3D; mod((ll)a.m[i][k] * b.m[k][j]);</span><br><span class="line">            res.m[i][j] &#x3D; mod(x);</span><br><span class="line">        &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line">void init_unit()</span><br><span class="line">&#123; &#x2F;&#x2F;定义单位矩阵</span><br><span class="line">    for (int i &#x3D; 0; i &lt; maxx; i++)</span><br><span class="line">        unit.m[i][i] &#x3D; 1;</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br><span class="line">mat pow_mat(mat a, ll n)</span><br><span class="line">&#123; &#x2F;&#x2F;矩阵快速幂,跟快速幂形式上差不多</span><br><span class="line">    mat res &#x3D; unit;</span><br><span class="line">    while (n)</span><br><span class="line">    &#123;</span><br><span class="line">        if (n &amp; 1)</span><br><span class="line">            res &#x3D; res * a;</span><br><span class="line">        a &#x3D; a * a;</span><br><span class="line">        n &gt;&gt;&#x3D; 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    ios::sync_with_stdio(false);</span><br><span class="line">    cin.tie(0);</span><br><span class="line">    cout.tie(0);</span><br><span class="line">    ll x;</span><br><span class="line">    init_unit();</span><br><span class="line">    while (cin &gt;&gt; n &gt;&gt; x)</span><br><span class="line">    &#123;</span><br><span class="line">        mat a;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; n; i++)</span><br><span class="line">            for (int j &#x3D; 0; j &lt; n; j++)</span><br><span class="line">                cin &gt;&gt; a.m[i][j];</span><br><span class="line">        a &#x3D; pow_mat(a, x);</span><br><span class="line">        for (int i &#x3D; 0; i &lt; n; i++)</span><br><span class="line">            for (int j &#x3D; 0; j &lt; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                if (j + 1 &#x3D;&#x3D; n)</span><br><span class="line">                    cout &lt;&lt; a.m[i][j] &lt;&lt; endl;</span><br><span class="line">                else</span><br><span class="line">                    cout &lt;&lt; a.m[i][j] &lt;&lt; &quot; &quot;;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例题：POJ-3070"><a href="#例题：POJ-3070" class="headerlink" title="例题：POJ-3070"></a>例题：POJ-3070</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;functional&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;deque&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 110;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">const int mod &#x3D; 1e4;</span><br><span class="line">using namespace std;</span><br><span class="line">int n &#x3D; 2;</span><br><span class="line">struct mat</span><br><span class="line">&#123;</span><br><span class="line">    int m[maxx][maxx];</span><br><span class="line">&#125; unit;</span><br><span class="line">mat operator*(mat a, mat b)</span><br><span class="line">&#123;</span><br><span class="line">    mat res;</span><br><span class="line">    ll x;</span><br><span class="line">    for (int i &#x3D; 0; i &lt; n; i++)</span><br><span class="line">        for (int j &#x3D; 0; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            x &#x3D; 0;</span><br><span class="line">            for (int k &#x3D; 0; k &lt; n; k++)</span><br><span class="line">                x &#x3D; (x + a.m[i][k] * b.m[k][j]) % mod;</span><br><span class="line">            res.m[i][j] &#x3D; x % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line">void init_unit()</span><br><span class="line">&#123;</span><br><span class="line">    for (int i &#x3D; 0; i &lt; maxx; i++)</span><br><span class="line">        unit.m[i][i] &#x3D; 1;</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br><span class="line">mat pow_mat(mat a, ll n)</span><br><span class="line">&#123;</span><br><span class="line">    mat res &#x3D; unit;</span><br><span class="line">    while (n)</span><br><span class="line">    &#123;</span><br><span class="line">        if (n &amp; 1)</span><br><span class="line">            res &#x3D; res * a;</span><br><span class="line">        a &#x3D; a * a;</span><br><span class="line">        n &gt;&gt;&#x3D; 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    ios::sync_with_stdio(false);</span><br><span class="line">    cin.tie(0);</span><br><span class="line">    cout.tie(0);</span><br><span class="line">    ll x;</span><br><span class="line">    init_unit();</span><br><span class="line">    while (cin &gt;&gt; x &amp;&amp; x !&#x3D; -1)</span><br><span class="line">    &#123;</span><br><span class="line">        mat a;</span><br><span class="line">        a.m[0][0] &#x3D; 1;</span><br><span class="line">        a.m[0][1] &#x3D; 1;</span><br><span class="line">        a.m[1][0] &#x3D; 1;</span><br><span class="line">        a.m[1][1] &#x3D; 0;</span><br><span class="line">        a &#x3D; pow_mat(a, x);</span><br><span class="line">        cout &lt;&lt; a.m[0][1] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;因为之前4月份打了将近一个月的个人赛，有些以前学习过的算法已经忘了，所以重新再温习一遍。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法重温" scheme="https://stephencurry6666.github.io/categories/%E7%AE%97%E6%B3%95%E9%87%8D%E6%B8%A9/"/>
    
    
      <category term="矩阵快速幂再温" scheme="https://stephencurry6666.github.io/tags/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82%E5%86%8D%E6%B8%A9/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 628(Div.2)</title>
    <link href="https://stephencurry6666.github.io/2020/05/18/Codeforces%20628(Div.2)/"/>
    <id>https://stephencurry6666.github.io/2020/05/18/Codeforces%20628(Div.2)/</id>
    <published>2020-05-18T09:15:14.824Z</published>
    <updated>2020-05-18T09:34:16.856Z</updated>
    
    <content type="html"><![CDATA[<h3 id="A题"><a href="#A题" class="headerlink" title="A题"></a>A题</h3><p><strong>题意：给你一个数x，求a和b，使得$lcm(a,b)+gcd(a,b)=x$。</strong></p><a id="more"></a><p><strong>思路：这道题的话，直接令a=1,b=x−1，这样$lcm(a,b)=x−1$,$gcd(a,b)=1$，公式成立。</strong></p><p><strong>AC代码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 100010;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    ios::sync_with_stdio(false);</span><br><span class="line">    cin.tie(0);</span><br><span class="line">    cout.tie(0);</span><br><span class="line">    int t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    while (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        int x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        cout &lt;&lt; 1 &lt;&lt; &#39; &#39; &lt;&lt; x - 1 &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B题"><a href="#B题" class="headerlink" title="B题"></a>B题</h3><p><strong>题意：给一个长度为n的数组，可以把给定的数组再次接到数组后面使数组长度加n。这个操作可以执行无数次，问能形成的最长上升序列。</strong></p><p><strong>思路：这道题的话，因为是严格上升子序列，所以每个数至多被选择一次。最后答案即为数组中互不重复的数字个数。</strong></p><p><strong>AC代码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 100010;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">using namespace std;</span><br><span class="line">int a[maxx];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    ios::sync_with_stdio(false);</span><br><span class="line">    cin.tie(0);</span><br><span class="line">    cout.tie(0);</span><br><span class="line">    int t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    while (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        int n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">        sort(a + 1, a + n + 1);</span><br><span class="line">        int sum &#x3D; 0;</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (a[i] !&#x3D; a[i - 1])</span><br><span class="line">                sum++;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C题"><a href="#C题" class="headerlink" title="C题"></a>C题</h3><p><strong>题意：给出你一棵树，但是权值并没有分配，让你构造一种分配的方法来使每一种$u–&gt;v$，即两个节点的路径所经过的权值mex最大值最小。</strong></p><p><strong>思路：这道题的话，首先先说一下mex的含义，mex这个东西，返回值是这个东西里面出现的最小非负整数，即$mex(1,3)=0$,$mex(0,2)=1$。然后我们用贪心的思路，在输入时记录每个节点被连接的次数，次数越多代表越多的路径会经过它，那么这时候把这条路径改为最大可以赋予的权值就可以使整体的mex尽可能小。又因为要求按输入顺序输出，所以我们是两遍sort，一遍比较节点访问次数来分配权值，一遍比较最初的顺序复原。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 100010;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">using namespace std;</span><br><span class="line">struct node</span><br><span class="line">&#123;</span><br><span class="line">    ll u, v;</span><br><span class="line">    ll num;</span><br><span class="line">    ll val;</span><br><span class="line">    ll pos;</span><br><span class="line">&#125; edge[maxx];</span><br><span class="line">ll vis[maxx];</span><br><span class="line">ll n;</span><br><span class="line">bool cmp(node a, node b)</span><br><span class="line">&#123;</span><br><span class="line">    a.num &#x3D; min(vis[a.u], vis[a.v]);</span><br><span class="line">    b.num &#x3D; min(vis[b.u], vis[b.v]);</span><br><span class="line">    return a.num &lt; b.num;</span><br><span class="line">&#125;</span><br><span class="line">bool cmp1(node a, node b)</span><br><span class="line">&#123;</span><br><span class="line">    return a.pos &lt; b.pos;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    ios::sync_with_stdio(false);</span><br><span class="line">    cin.tie(0);</span><br><span class="line">    cout.tie(0);</span><br><span class="line">    memset(vis, 0, sizeof(vis));</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    for (int i &#x3D; 1; i &lt;&#x3D; n - 1; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; edge[i].u &gt;&gt; edge[i].v;</span><br><span class="line">        edge[i].pos &#x3D; i;</span><br><span class="line">        vis[edge[i].u]++;</span><br><span class="line">        vis[edge[i].v]++;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(edge + 1, edge + n, cmp);</span><br><span class="line">    for (int i &#x3D; 1; i &lt;&#x3D; n - 1; i++)</span><br><span class="line">        edge[i].val &#x3D; i - 1;</span><br><span class="line">    sort(edge + 1, edge + n, cmp1);</span><br><span class="line">    for (int i &#x3D; 1; i &lt;&#x3D; n - 1; i++)</span><br><span class="line">        cout &lt;&lt; edge[i].val &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;A题&quot;&gt;&lt;a href=&quot;#A题&quot; class=&quot;headerlink&quot; title=&quot;A题&quot;&gt;&lt;/a&gt;A题&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;题意：给你一个数x，求a和b，使得$lcm(a,b)+gcd(a,b)=x$。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CF" scheme="https://stephencurry6666.github.io/categories/CF/"/>
    
    
      <category term="CF" scheme="https://stephencurry6666.github.io/tags/CF/"/>
    
  </entry>
  
  <entry>
    <title>再次温习线段树的一些思路</title>
    <link href="https://stephencurry6666.github.io/2020/05/16/%E5%86%8D%E6%AC%A1%E6%B8%A9%E4%B9%A0%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%B7%AF/"/>
    <id>https://stephencurry6666.github.io/2020/05/16/%E5%86%8D%E6%AC%A1%E6%B8%A9%E4%B9%A0%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%B7%AF/</id>
    <published>2020-05-16T08:15:29.591Z</published>
    <updated>2020-05-18T10:00:52.687Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>因为之前4月份打了将近一个月的个人赛，有些以前学习过的算法已经忘了，所以重新再温习一遍。</p><a id="more"></a><h2 id="关于线段树"><a href="#关于线段树" class="headerlink" title="关于线段树"></a>关于线段树</h2><p><strong>这里提一下完全二叉树。完全二叉树是叶节点只能出现在最下层和次下层，并且最下面一层的结点都集中在该层最左边的若干位置的二叉树。若设二叉树的深度为h，除第h层外，其它各层(1～h-1)的结点数都达到最大个数，第h层所有的结点都连续集中在最左边。那么线段树就是完全二叉树，一定条件下成为满二叉树。线段树的主要思想是二分，也就是通过二分的方法来查找节点。假设有编号从1到n的n个点，每个点都存了一些信息，用[L,R]表示下标从L到R的这些点。线段树的用处就是，对编号连续的一些点进行修改或者统计操作，修改和统计的复杂度都是O(log2(n))。</strong></p><p><strong>线段树的原理，就是，将[1,n]分解成若干特定的子区间(数量不超过4*n),然后，将每个区间[L,R]都分解为少量特定的子区间，通过对这些少量子区间的修改或者统计，来实现快速对[L,R]的修改或者统计。由此看出，用线段树统计的东西，必须符合区间加法，否则，不可能通过分成的子区间来得到[L,R]的统计结果。</strong></p><p><strong>符合区间加法的例子：</strong></p><ul><li><p>数字之和——总数字之和 = 左区间数字之和 + 右区间数字之和</p></li><li><p>最大公因数(GCD)——总GCD = gcd(左区间GCD,右区间GCD)</p></li><li><p>最大值——总最大值=max(左区间最大值，右区间最大值)</p></li></ul><p><strong>不符合区间加法的例子：</strong></p><ul><li><p>众数——只知道左右区间的众数，没法求总区间的众数</p></li><li><p>01序列的最长连续零——只知道左右区间的最长连续零，没法知道总的最长连续零</p></li></ul><p><strong>一个问题，只要能化成对一些连续点的修改和统计问题，基本就可以用线段树来解决。</strong></p><h2 id="线段树的原理"><a href="#线段树的原理" class="headerlink" title="线段树的原理"></a>线段树的原理</h2><p><strong>（注：由于线段树的每个节点代表一个区间，以下叙述中不区分节点和区间，只是根据语境需要，选择合适的词）</strong></p><p>线段树本质上是维护下标为1,2,..,n的n个按顺序排列的数的信息，所以，其实是“点树”，是维护n的点的信息，至于每个点的数据的含义可以有很多，<br>在对线段操作的线段树中，每个点代表一条线段，在用线段树维护数列信息的时候，每个点代表一个数，但本质上都是每个点代表一个数。以下，在讨论线段树的时候，区间[L,R]指的是下标从L到R的这(R-L+1)个数，而不是指一条连续的线段。只是有时候这些数代表实际上一条线段的统计结果而已。</p><p>线段树是将每个区间[L,R]分解成[L,M]和[M+1,R] (其中M=(L+R)/2 这里的除法是整数除法，即对结果下取整)直到 L==R 为止。</p><p>开始时是区间[1,n] ,通过递归来逐步分解，假设根的高度为1的话，树的最大高度为<img src="https://img-blog.csdn.net/20150908232141714" alt="tupian1">（n&gt;1）。</p><p>线段树对于每个n的分解是唯一的，所以n相同的线段树结构相同，这也是实现可持久化线段树的基础。</p><p>下图展示了区间[1,13]的分解过程：</p><p><img src="https://img-blog.csdn.net/20150908231214395?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="tupian2"></p><p>上图中，每个区间都是一个节点，每个节点存自己对应的区间的统计信息。</p><h3 id="线段树的点修改"><a href="#线段树的点修改" class="headerlink" title="线段树的点修改"></a>线段树的点修改</h3><p>假设要修改[5]的值，可以发现，每层只有一个节点包含[5],所以修改了[5]之后，只需要每层更新一个节点就可以线段树每个节点的信息都是正确的，所以修改次数的最大值为层数<img src="https://img-blog.csdn.net/20150908232141714" alt="tupian3">。</p><p>复杂度O(log2(n))</p><h3 id="线段树的区间修改"><a href="#线段树的区间修改" class="headerlink" title="线段树的区间修改"></a>线段树的区间修改</h3><p>在写线段树的区间修改的时候，我们需要先掌握一个知识点，就是懒惰标记。</p><p><strong>什么是懒惰标记？</strong></p><p>试想，我们在操作的时候有可能有这样的操作。首先进行区间修改，修改了800次，然后再进行一次查询。这样，如果我们每次都将整个线段树的数据进行更新，实际上是非常慢的，如果我们能用一段空间，来记录修改数据，只有在使用的时候，一次性更新，就非常的方便。</p><p>所以这也是懒惰标记的作用。可以先对修改的数据进行储存，只有在使用的时候才更新线段树。那么，理论上我们应该建一个跟线段树同样大小的数组，称为懒惰数组，表示了每个节点的懒惰标记。有这样的操作：</p><ul><li><p>1.修改数据的时候，每次递归到某节点，修改数据以后将数据的变化添加到数组中。</p></li><li><p>2.当使用到这个节点的时候，发现对应的懒惰标记存在，那么就应该更新该节点，以及以下的所有节点的数据，方便使用。</p></li></ul><p>总之，就是不使用的时候就一直在积累，在使用的时候再统一更新。</p><p>那么懒惰数组的更新非常简单，对线段树更新的时候就可以添加到懒惰标记，但是在使用的时候，我们需要用一个函数来完成懒惰标记的下推操作，也就是更新积累的值。代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">void Pushdown(int rt, int l, int r) &#x2F;&#x2F;下推标记的函数。l,r为左子树，右子树的数字数量</span><br><span class="line">&#123;</span><br><span class="line">    if (lz[rt])</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;下推标记</span><br><span class="line">        lz[rt &lt;&lt; 1] +&#x3D; lz[rt];</span><br><span class="line">        lz[rt &lt;&lt; 1 | 1] +&#x3D; lz[rt];</span><br><span class="line">        &#x2F;&#x2F;修改子节点的Sum使之与对应的lz相对应</span><br><span class="line">        &#x2F;&#x2F;int mid&#x3D;(l+r)&gt;&gt;1;与下面Update_tree_interval函数中Pushdown(rt,l,r)对应</span><br><span class="line">        Sum[rt &lt;&lt; 1] +&#x3D; lz[rt] * l;     &#x2F;&#x2F;Sum[rt&lt;&lt;1]+&#x3D;(mid-l+1)*lz[rt];与下面Update_tree_interval函数中Pushdown(rt,l,r)对应</span><br><span class="line">        Sum[rt &lt;&lt; 1 | 1] +&#x3D; lz[rt] * r; &#x2F;&#x2F;Sum[rt&lt;&lt;1|1]+&#x3D;(r-mid)*lz[rt];与下面Update_tree_interval函数中Pushdown(rt,l,r)对应</span><br><span class="line">        &#x2F;&#x2F;清除本节点标记</span><br><span class="line">        lz[rt] &#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>lz数组，即lazy，就是懒惰标记数组。可以看出，当lz[rt]存在值的时候，就说明现在我在使用这个节点，而这个节点以及其下的节点需要更新了，所以就利用二叉树的性质向下传递更新数据，同时更新线段树中的数据。最终，要将该节点的懒惰标记清零。</p><p>注意，下推的时候不是一直更新到叶子节点，而是只更新当前节点以及2个子树，因为实际操作的时候，只要碰到对某节点的操作就要调用Pushdown()函数，所以每次只用下推一层即可。</p><p>Pushdown()函数的使用需要在下面的区间操作中添加。</p><p><strong>区间修改：</strong></p><p>单点更新类似二分查找，更新的时候对经过的路径进行操作就可以了。但是区间更新需要考虑整个区间。线段树除了叶子节点，都表示了一段区间的值，那么就要配合懒惰标记在整个区间上进行操作。</p><h3 id="线段树的区间查询"><a href="#线段树的区间查询" class="headerlink" title="线段树的区间查询"></a>线段树的区间查询</h3><p>区间查询的原理跟区间更新基本一样，也是看结点表示的数据范围有不同的操作。同样，在到某个结点的时候一定要调用Pushdown()。不同点在于跟数据操作无关，但是需要一个sum来储存收集到的区间数据，同时最后return。这样在递归完成以后最后返回的就是区间和了。理解区间修改后，区间查询就容易的多了。</p><h3 id="线段树的储存结构"><a href="#线段树的储存结构" class="headerlink" title="线段树的储存结构"></a>线段树的储存结构</h3><p>线段树是用数组来模拟树形结构，对于每一个节点R ,左子节点为 2 <em> R (一般写作R&lt;&lt;1)右子节点为 2 </em> R+1（一般写作R&lt;&lt;1|1）</p><p>然后以1为根节点，所以，整体的统计信息是存在节点1中的。</p><p>这么表示的原因看下图就很明白了，左子树的节点标号都是根节点的两倍，右子树的节点标号都是左子树+1：</p><p><img src="https://img-blog.csdn.net/20150909010827440?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="tupian4"></p><p>线段树需要的数组元素个数很大，一般都开4倍空间，比如： int Sum[maxx&lt;&lt;2];</p><h3 id="脱离lazy数组"><a href="#脱离lazy数组" class="headerlink" title="脱离lazy数组"></a>脱离lazy数组</h3><p>lazy数组的使用在很大程度将降低了解决问题所耗费的时间，但是也增加了对模板的修改难度。诚然，lazy很实用，但是在一些问题的构造上并不容易修改。我们平常的区间修改，整个区间的数值变化是统一的，所以我们能够在数学上提前好多个结点先算出来更改情况。但是有很多问题并不是这样的。</p><p>例如：hdu4027。11年上海网络赛，要求区间内对每个节点的数值取其二次根。那么再考虑lazy数组就是徒生烦恼。如果我们抛弃lazy数组，直接每次都更新到叶子结点，同时考虑剪枝，速度也并不慢（500ms）。所以，在区间操作不平衡，同时可以剪枝的情况下，完全可以抛弃lazy数组，从而修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">boolean cleck(int rt,int l,int r)&#123;</span><br><span class="line">    &#x2F;&#x2F; 剪枝条件</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void Update_tree_interval(int rt, int l, int r, int L, int R) &#123;</span><br><span class="line">    if (L &#x3D;&#x3D; R) &#123;</span><br><span class="line">        Sum[rt] &#x3D; 1; &#x2F;&#x2F; 更新方式</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    int mid &#x3D; (L + R) &#x2F; 2;</span><br><span class="line">    if (mid &gt;&#x3D; l &amp;&amp; cleck(rt &lt;&lt; 1,L,mid))</span><br><span class="line">    Update_tree_interval(rt &lt;&lt; 1, l, r, L, mid);</span><br><span class="line">    if (mid &lt; r &amp;&amp; cleck(rt &lt;&lt; 1 | 1,mid+1,R))</span><br><span class="line">    Update_tree_interval(rt &lt;&lt; 1 | 1, l, r, mid + 1, R);</span><br><span class="line">    Pushup(rt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线段树实现代码"><a href="#线段树实现代码" class="headerlink" title="线段树实现代码"></a>线段树实现代码</h2><h3 id="首先：定义"><a href="#首先：定义" class="headerlink" title="首先：定义"></a>首先：定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 10010;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">using namespace std;</span><br><span class="line">int A[maxx];        &#x2F;&#x2F;存原数组数据下标[1,n]</span><br><span class="line">int Sum[maxx &lt;&lt; 2]; &#x2F;&#x2F;Sum求和</span><br><span class="line">int lz[maxx &lt;&lt; 2];  &#x2F;&#x2F;lz为懒惰标记</span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void init()&#x2F;&#x2F;初始化</span><br><span class="line">&#123;</span><br><span class="line">    memset(Sum,0,sizeof(Sum));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="建树"><a href="#建树" class="headerlink" title="建树"></a>建树</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void Pushup(int rt) &#x2F;&#x2F;Pushup函数更新节点</span><br><span class="line">&#123;</span><br><span class="line">    Sum[rt] &#x3D; Sum[rt &lt;&lt; 1] + Sum[rt &lt;&lt; 1 | 1];</span><br><span class="line">&#125;</span><br><span class="line">void Build_tree(int l, int r, int rt) &#x2F;&#x2F;建树,l,r表示当前节点区间，rt表示当前节点编号</span><br><span class="line">&#123;</span><br><span class="line">    if (l &#x3D;&#x3D; r) &#x2F;&#x2F;若到达叶节点</span><br><span class="line">    &#123;</span><br><span class="line">        Sum[rt] &#x3D; A[l];&#x2F;&#x2F;cin&gt;&gt;Sum[rt];</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    int mid &#x3D; (l + r) &gt;&gt; 1;</span><br><span class="line">    Build_tree(l, mid, rt &lt;&lt; 1);</span><br><span class="line">    Build_tree(mid + 1, r, rt &lt;&lt; 1 | 1);</span><br><span class="line">    Pushup(rt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的建树，是一个递归的过程。l与r分别表示区间，结合上面的图，当l==r的时候说明递归已经遍历到叶子节点了，而这个节点rt也是二叉树的节点编号。对应了数组的下标。所以进行赋值。然后直接return进行回溯。那么在正常递归的时候，我们需要利用二叉树的性质，即对于rt编号的节点而言，左子树编号为rt&lt;&lt;1，右子树为rt&lt;&lt;1|1。同样，由于二分的性质，利用mid = (l+r)/2，就可以获取下一个子树的区间范围。</p><p>在回溯的时候，是从树的最下层开始向最上层回溯，那么同样利用二叉树的性质，我们可以轻松将子树的数据加到父节点上。这样，当函数完成的时候，我们就可以利用数组来构建了一个线段树。</p><h3 id="懒惰标记，下推操作"><a href="#懒惰标记，下推操作" class="headerlink" title="懒惰标记，下推操作"></a>懒惰标记，下推操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">void Pushdown(int rt, int l, int r) &#x2F;&#x2F;下推标记的函数。l,r为左子树，右子树的数字数量</span><br><span class="line">&#123;</span><br><span class="line">    if (lz[rt])</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;下推标记</span><br><span class="line">        lz[rt &lt;&lt; 1] +&#x3D; lz[rt];</span><br><span class="line">        lz[rt &lt;&lt; 1 | 1] +&#x3D; lz[rt];</span><br><span class="line">        &#x2F;&#x2F;修改子节点的Sum使之与对应的lz相对应</span><br><span class="line">        &#x2F;&#x2F;int mid&#x3D;(l+r)&gt;&gt;1;与下面Update_tree_interval函数中Pushdown(rt,l,r)对应</span><br><span class="line">        Sum[rt &lt;&lt; 1] +&#x3D; lz[rt] * l;     &#x2F;&#x2F;Sum[rt&lt;&lt;1]+&#x3D;(mid-l+1)*lz[rt];与下面Update_tree_interval函数中Pushdown(rt,l,r)对应</span><br><span class="line">        Sum[rt &lt;&lt; 1 | 1] +&#x3D; lz[rt] * r; &#x2F;&#x2F;Sum[rt&lt;&lt;1|1]+&#x3D;(r-mid)*lz[rt];与下面Update_tree_interval函数中Pushdown(rt,l,r)对应</span><br><span class="line">        &#x2F;&#x2F;清除本节点标记</span><br><span class="line">        lz[rt] &#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单点修改"><a href="#单点修改" class="headerlink" title="单点修改"></a>单点修改</h3><p>线段树并不必须要进行区间的操作，如果是对单点进行操作，完全可以用更快的方法来实现。而对于单点修改而言，其实相比区间修改的代码要简单很多（因为lazy数组的存在），所以能用针对单点的修改最好不要用区间修改。单点更新非常类似二分查找，通过递归找到更新点的位置，在回溯的时候更新所有节点的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">void Update_tree_point(int l, int r, int rt, int a, int b) &#x2F;&#x2F;点修改，假设A[a]&#x3D;b,l,r表示当前节点区间，rt表示当前节点编号，a为更新点，b为更新值</span><br><span class="line">&#123;</span><br><span class="line">    if (l &#x3D;&#x3D; r) &#x2F;&#x2F;到叶节点，修改</span><br><span class="line">    &#123;</span><br><span class="line">        A[a] &#x3D; b;</span><br><span class="line">        Sum[rt] &#x3D; b;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    int mid &#x3D; (l + r) &gt;&gt; 1;</span><br><span class="line">    &#x2F;&#x2F;根据条件判断往左子树调用还是往右</span><br><span class="line">    &#x2F;&#x2F; Pushdown(rt,mid-l+1,r-mid); 若既有点更新又有区间更新，需要这句话</span><br><span class="line">    if (a &lt;&#x3D; mid)</span><br><span class="line">        Update_tree_point(l, mid, rt &lt;&lt; 1, a, b);</span><br><span class="line">    else</span><br><span class="line">        Update_tree_point(mid + 1, r, rt &lt;&lt; 1 | 1, a, b);</span><br><span class="line">    Pushup(rt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="区间修改"><a href="#区间修改" class="headerlink" title="区间修改"></a>区间修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">void Update_tree_interval(int L, int R, int l, int r, int rt, int b) &#x2F;&#x2F;区间修改，假设A[L,R]&#x3D;b,L,R表示操作区间，l,r表示当前节点区间，rt表示当前节点编号,b为更新值</span><br><span class="line">&#123;</span><br><span class="line">    if (L &lt;&#x3D; l &amp;&amp; r &lt;&#x3D; R) &#x2F;&#x2F;如果本区间完全在操作区间[L,R]以内</span><br><span class="line">    &#123;</span><br><span class="line">        Sum[rt] +&#x3D; b * (r - l + 1);</span><br><span class="line">        lz[rt] +&#x3D; b; &#x2F;&#x2F;增加lz标记，表示本区间的Sum正确，子区间的Sum仍需要根据lz的值来调整</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    int mid &#x3D; (l + r) &gt;&gt; 1;</span><br><span class="line">    Pushdown(rt, mid - l + 1, r - mid); &#x2F;&#x2F;Pushdown(rt,l,r);&#x2F;&#x2F;下推标记</span><br><span class="line">    &#x2F;&#x2F;这里判断左右子树跟[L,R]有无交集，有交集才递归</span><br><span class="line">    if (L &lt;&#x3D; mid)</span><br><span class="line">        Update_tree_interval(L, R, l, mid, rt &lt;&lt; 1, b);</span><br><span class="line">    if (R &gt; mid)</span><br><span class="line">        Update_tree_interval(L, R, mid + 1, r, rt &lt;&lt; 1 | 1, b);</span><br><span class="line">    Pushup(rt); &#x2F;&#x2F;更新本节点信息</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="区间查询"><a href="#区间查询" class="headerlink" title="区间查询"></a>区间查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ll Query_tree(int L, int R, int l, int r, int rt) &#x2F;&#x2F;区间查询，L,R表示操作区间，l,r表示当前节点区间，rt表示当前节点编号</span><br><span class="line">&#123;</span><br><span class="line">    if (L &lt;&#x3D; l &amp;&amp; r &lt;&#x3D; R)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;在区间内，直接返回</span><br><span class="line">        return Sum[rt];</span><br><span class="line">    &#125;</span><br><span class="line">    int mid &#x3D; (l + r) &gt;&gt; 1;</span><br><span class="line">    &#x2F;&#x2F;下推标记，否则Sum可能不正确</span><br><span class="line">    Pushdown(rt, mid - l + 1, r - mid); &#x2F;&#x2F;Pushdown(rt,l,r);</span><br><span class="line">    ll sum &#x3D; 0; &#x2F;&#x2F;累计答案</span><br><span class="line">    if (L &lt;&#x3D; mid)</span><br><span class="line">        sum +&#x3D; Query_tree(L, R, l, mid, rt &lt;&lt; 1);</span><br><span class="line">    if (R &gt; mid)</span><br><span class="line">        sum +&#x3D; Query_tree(L, R, mid + 1, r, rt &lt;&lt; 1 | 1);</span><br><span class="line">    return sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线段树模板"><a href="#线段树模板" class="headerlink" title="线段树模板"></a>线段树模板</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 10010;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">using namespace std;</span><br><span class="line">int A[maxx];        &#x2F;&#x2F;存原数组数据下标[1,n]</span><br><span class="line">int Sum[maxx &lt;&lt; 2]; &#x2F;&#x2F;Sum求和</span><br><span class="line">int lz[maxx &lt;&lt; 2];  &#x2F;&#x2F;lz为懒惰标记</span><br><span class="line"></span><br><span class="line">void init()&#x2F;&#x2F;初始化</span><br><span class="line">&#123;</span><br><span class="line">    memset(Sum,0,sizeof(Sum));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Pushup(int rt) &#x2F;&#x2F;Pushup函数更新节点</span><br><span class="line">&#123;</span><br><span class="line">    Sum[rt] &#x3D; Sum[rt &lt;&lt; 1] + Sum[rt &lt;&lt; 1 | 1];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Pushdown(int rt, int l, int r) &#x2F;&#x2F;下推标记的函数。l,r为左子树，右子树的数字数量</span><br><span class="line">&#123;</span><br><span class="line">    if (lz[rt])</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;下推标记</span><br><span class="line">        lz[rt &lt;&lt; 1] +&#x3D; lz[rt];</span><br><span class="line">        lz[rt &lt;&lt; 1 | 1] +&#x3D; lz[rt];</span><br><span class="line">        &#x2F;&#x2F;修改子节点的Sum使之与对应的lz相对应</span><br><span class="line">        &#x2F;&#x2F;int mid&#x3D;(l+r)&gt;&gt;1;与下面Update_tree_interval函数中Pushdown(rt,l,r)对应</span><br><span class="line">        Sum[rt &lt;&lt; 1] +&#x3D; lz[rt] * l;     &#x2F;&#x2F;Sum[rt&lt;&lt;1]+&#x3D;(mid-l+1)*lz[rt];与下面Update_tree_interval函数中Pushdown(rt,l,r)对应</span><br><span class="line">        Sum[rt &lt;&lt; 1 | 1] +&#x3D; lz[rt] * r; &#x2F;&#x2F;Sum[rt&lt;&lt;1|1]+&#x3D;(r-mid)*lz[rt];与下面Update_tree_interval函数中Pushdown(rt,l,r)对应</span><br><span class="line">        &#x2F;&#x2F;清除本节点标记</span><br><span class="line">        lz[rt] &#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Build_tree(int l, int r, int rt) &#x2F;&#x2F;建树,l,r表示当前节点区间，rt表示当前节点编号</span><br><span class="line">&#123;</span><br><span class="line">    if (l &#x3D;&#x3D; r) &#x2F;&#x2F;若到达叶节点</span><br><span class="line">    &#123;</span><br><span class="line">        Sum[rt] &#x3D; A[l];&#x2F;&#x2F;cin&gt;&gt;Sum[rt];</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    int mid &#x3D; (l + r) &gt;&gt; 1;</span><br><span class="line">    Build_tree(l, mid, rt &lt;&lt; 1);</span><br><span class="line">    Build_tree(mid + 1, r, rt &lt;&lt; 1 | 1);</span><br><span class="line">    Pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Update_tree_point(int l, int r, int rt, int a, int b) &#x2F;&#x2F;点修改，假设A[a]&#x3D;b,l,r表示当前节点区间，rt表示当前节点编号，a为更新点，b为更新值</span><br><span class="line">&#123;</span><br><span class="line">    if (l &#x3D;&#x3D; r) &#x2F;&#x2F;到叶节点，修改</span><br><span class="line">    &#123;</span><br><span class="line">        A[a] &#x3D; b;</span><br><span class="line">        Sum[rt] &#x3D; b;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    int mid &#x3D; (l + r) &gt;&gt; 1;</span><br><span class="line">    &#x2F;&#x2F;根据条件判断往左子树调用还是往右</span><br><span class="line">    &#x2F;&#x2F; Pushdown(rt,mid-l+1,r-mid); 若既有点更新又有区间更新，需要这句话</span><br><span class="line">    if (a &lt;&#x3D; mid)</span><br><span class="line">        Update_tree_point(l, mid, rt &lt;&lt; 1, a, b);</span><br><span class="line">    else</span><br><span class="line">        Update_tree_point(mid + 1, r, rt &lt;&lt; 1 | 1, a, b);</span><br><span class="line">    Pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Update_tree_interval(int L, int R, int l, int r, int rt, int b) &#x2F;&#x2F;区间修改，假设A[L,R]&#x3D;b,L,R表示操作区间，l,r表示当前节点区间，rt表示当前节点编号,b为更新值</span><br><span class="line">&#123;</span><br><span class="line">    if (L &lt;&#x3D; l &amp;&amp; r &lt;&#x3D; R) &#x2F;&#x2F;如果本区间完全在操作区间[L,R]以内</span><br><span class="line">    &#123;</span><br><span class="line">        Sum[rt] +&#x3D; b * (r - l + 1);</span><br><span class="line">        lz[rt] +&#x3D; b; &#x2F;&#x2F;增加lz标记，表示本区间的Sum正确，子区间的Sum仍需要根据lz的值来调整</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    int mid &#x3D; (l + r) &gt;&gt; 1;</span><br><span class="line">    Pushdown(rt, mid - l + 1, r - mid); &#x2F;&#x2F;Pushdown(rt,l,r);&#x2F;&#x2F;下推标记</span><br><span class="line">    &#x2F;&#x2F;这里判断左右子树跟[L,R]有无交集，有交集才递归</span><br><span class="line">    if (L &lt;&#x3D; mid)</span><br><span class="line">        Update_tree_interval(L, R, l, mid, rt &lt;&lt; 1, b);</span><br><span class="line">    if (R &gt; mid)</span><br><span class="line">        Update_tree_interval(L, R, mid + 1, r, rt &lt;&lt; 1 | 1, b);</span><br><span class="line">    Pushup(rt); &#x2F;&#x2F;更新本节点信息</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll Query_tree(int L, int R, int l, int r, int rt) &#x2F;&#x2F;区间查询，L,R表示操作区间，l,r表示当前节点区间，rt表示当前节点编号</span><br><span class="line">&#123;</span><br><span class="line">    if (L &lt;&#x3D; l &amp;&amp; r &lt;&#x3D; R)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;在区间内，直接返回</span><br><span class="line">        return Sum[rt];</span><br><span class="line">    &#125;</span><br><span class="line">    int mid &#x3D; (l + r) &gt;&gt; 1;</span><br><span class="line">    &#x2F;&#x2F;下推标记，否则Sum可能不正确</span><br><span class="line">    Pushdown(rt, mid - l + 1, r - mid); &#x2F;&#x2F;Pushdown(rt,l,r);</span><br><span class="line">    ll sum &#x3D; 0; &#x2F;&#x2F;累计答案</span><br><span class="line">    if (L &lt;&#x3D; mid)</span><br><span class="line">        sum +&#x3D; Query_tree(L, R, l, mid, rt &lt;&lt; 1);</span><br><span class="line">    if (R &gt; mid)</span><br><span class="line">        sum +&#x3D; Query_tree(L, R, mid + 1, r, rt &lt;&lt; 1 | 1);</span><br><span class="line">    return sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题：HDU-1166"><a href="#例题：HDU-1166" class="headerlink" title="例题：HDU-1166"></a>例题：HDU-1166</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 50010;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">using namespace std;</span><br><span class="line">int A[maxx];        &#x2F;&#x2F;存原数组数据下标[1,n]</span><br><span class="line">int Sum[maxx &lt;&lt; 2]; &#x2F;&#x2F;Sum求和</span><br><span class="line">int lz[maxx &lt;&lt; 2];  &#x2F;&#x2F;lz为懒惰标记</span><br><span class="line">void Pushup(int rt) &#x2F;&#x2F;Pushup函数更新节点</span><br><span class="line">&#123;</span><br><span class="line">    Sum[rt] &#x3D; Sum[rt &lt;&lt; 1] + Sum[rt &lt;&lt; 1 | 1];</span><br><span class="line">&#125;</span><br><span class="line">void Build_tree(int l, int r, int rt) &#x2F;&#x2F;建树,l,r表示当前节点区间，rt表示当前节点编号</span><br><span class="line">&#123;</span><br><span class="line">    if (l &#x3D;&#x3D; r) &#x2F;&#x2F;若到达叶节点</span><br><span class="line">    &#123;</span><br><span class="line">        Sum[rt] &#x3D; A[l];&#x2F;&#x2F; &#x2F;&#x2F;cin&gt;&gt;Sum[rt];</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    int mid &#x3D; (l + r) &gt;&gt; 1;</span><br><span class="line">    Build_tree(l, mid, rt &lt;&lt; 1);</span><br><span class="line">    Build_tree(mid + 1, r, rt &lt;&lt; 1 | 1);</span><br><span class="line">    Pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line">void Update_tree_point(int l, int r, int rt, int a, int b) &#x2F;&#x2F;点修改，假设A[a]&#x3D;b,l,r表示当前节点区间，rt表示当前节点编号，a为更新点，b为更新值</span><br><span class="line">&#123;</span><br><span class="line">    if (l &#x3D;&#x3D; r) &#x2F;&#x2F;到叶节点，修改</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;A[a] &#x3D; b;</span><br><span class="line">        Sum[rt] +&#x3D; b;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    int mid &#x3D; (l + r) &gt;&gt; 1;</span><br><span class="line">    &#x2F;&#x2F;根据条件判断往左子树调用还是往右</span><br><span class="line">    if (a &lt;&#x3D; mid)</span><br><span class="line">        Update_tree_point(l, mid, rt &lt;&lt; 1, a, b);</span><br><span class="line">    else</span><br><span class="line">        Update_tree_point(mid + 1, r, rt &lt;&lt; 1 | 1, a, b);</span><br><span class="line">    Pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line">ll Query_tree(int L, int R, int l, int r, int rt) &#x2F;&#x2F;区间查询，L,R表示操作区间，l,r表示当前节点区间，rt表示当前节点编号</span><br><span class="line">&#123;</span><br><span class="line">    if (L &lt;&#x3D; l &amp;&amp; r &lt;&#x3D; R)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;在区间内，直接返回</span><br><span class="line">        return Sum[rt];</span><br><span class="line">    &#125;</span><br><span class="line">    int mid &#x3D; (l + r) &gt;&gt; 1;</span><br><span class="line">    ll sum &#x3D; 0; &#x2F;&#x2F;累计答案</span><br><span class="line">    if (L &lt;&#x3D; mid)</span><br><span class="line">        sum +&#x3D; Query_tree(L, R, l, mid, rt &lt;&lt; 1);</span><br><span class="line">    if (R &gt; mid)</span><br><span class="line">        sum +&#x3D; Query_tree(L, R, mid + 1, r, rt &lt;&lt; 1 | 1);</span><br><span class="line">    return sum;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int t;</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;t);</span><br><span class="line">    string s;</span><br><span class="line">    int cnt &#x3D; 0;</span><br><span class="line">    while (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        ++cnt;</span><br><span class="line">        printf(&quot;Case %d:\n&quot;, cnt);</span><br><span class="line">        int n;</span><br><span class="line">        scanf(&quot;%d&quot;, &amp;n);</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">            scanf(&quot;%d&quot;, &amp;A[i]);</span><br><span class="line">        Build_tree(1, n, 1);</span><br><span class="line">        int x, y;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        while (s !&#x3D; &quot;End&quot;)</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%d%d&quot;, &amp;x, &amp;y);</span><br><span class="line">            if (s &#x3D;&#x3D; &quot;Query&quot;)</span><br><span class="line">            &#123;</span><br><span class="line">                printf(&quot;%d\n&quot;, Query_tree(x, y, 1, n, 1));</span><br><span class="line">            &#125;</span><br><span class="line">            else if (s &#x3D;&#x3D; &quot;Add&quot;)</span><br><span class="line">            &#123;</span><br><span class="line">                Update_tree_point(1, n, 1, x, y);</span><br><span class="line">            &#125;</span><br><span class="line">            else if (s &#x3D;&#x3D; &quot;Sub&quot;)</span><br><span class="line">            &#123;</span><br><span class="line">                Update_tree_point(1, n, 1, x, -y);</span><br><span class="line">            &#125;</span><br><span class="line">            cin &gt;&gt; s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线段树应用：扫描线求矩形面积并"><a href="#线段树应用：扫描线求矩形面积并" class="headerlink" title="线段树应用：扫描线求矩形面积并"></a>线段树应用：扫描线求矩形面积并</h2><p>分析:</p><p>1.矩形比较多，坐标也很大，所以横坐标需要离散化（纵坐标不需要），熟悉离散化后这个步骤不难，所以这里不详细讲解了，不明白的还请百度。</p><p>2.重点：扫描线法：假想有一条扫描线，从左往右（从右往左），或者从下往上（从上往下）扫描过整个多边形（或者说畸形。。多个矩形叠加后的那个图形）。如果是竖直方向上扫描，则是离散化横坐标，如果是水平方向上扫描，则是离散化纵坐标。下面的分析都是<strong>离散化横坐标的，并且从下往上扫描的。</strong></p><p>扫描之前还需要做一个工作，就是保存好所有矩形的上下边，并且按照它们所处的高度进行排序，另外如果是上边我们给他一个值-1，下边给他一个值1，我们用一个结构体来保存所有的上下边。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct segment</span><br><span class="line">&#123;</span><br><span class="line">double l,r,h;   &#x2F;&#x2F;l，r表示这条上下边的左右坐标，h是这条边所处的高度</span><br><span class="line">int f;   &#x2F;&#x2F;所赋的值，1或-1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着扫描线从下往上扫描，每遇到一条上下边就停下来，将这条线段投影到总区间上 <strong>（总区间就是整个多边形横跨的长度）</strong> ，这个投影对应的其实是个插入和删除线段操作。 <strong>还记得给他们赋的值1或-1吗，下边是1，扫描到下边的话相当于往总区间插入一条线段，上边-1，扫描到上边相当于在总区间删除一条线段</strong> （如果说插入删除比较抽象，那么就直白说，扫描到下边，投影到总区间，对应的那一段的值都要增1，扫描到上边对应的那一段的值都要减1， <strong>如果总区间某一段的值为0，说明其实没有线段覆盖到它，为正数则有，那会不会为负数呢？是不可能的，</strong> 可以自己思考一下）。</p><p>每扫描到一条上下边后并投影到总区间后，就判断总区间现在被覆盖的总长度，然后用下一条边的高度减去当前这条边的高度，乘上总区间被覆盖的长度，就能得到一块面积，并依此做下去，就能得到最后的面积</p><p>（这个过程其实一点都不难，只是看文字较难体会，建议纸上画图，一画即可明白，下面献上一图希望有帮助）</p><p><img src="https://images0.cnblogs.com/blog/406771/201304/12153052-27995daa57e94349a42362435b3d975c.jpg" alt="tupian6"></p><h2 id="扫描线求矩形面积并的例题：POJ-1151"><a href="#扫描线求矩形面积并的例题：POJ-1151" class="headerlink" title="扫描线求矩形面积并的例题：POJ-1151"></a>扫描线求矩形面积并的例题：POJ-1151</h2><p>题目给了n个矩形，每个矩形给了左下角和右上角的坐标，矩形可能会重叠，求的是矩形最后的面积。因为变化范围比较大，我们要用到离散化，离散化就不说了，重点说一说扫描线的过程：</p><p>下面有个矩形</p><p><img src="https://img-blog.csdn.net/20130726113250031?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2szMDM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="tupian7"></p><p>现在假设我们有一根线，从下往上开始扫描 </p><p><img src="https://img-blog.csdn.net/20130726113310406?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2szMDM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="tupian8"></p><p><img src="https://img-blog.csdn.net/20130726113323484?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2szMDM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="tupian9"></p><p><img src="https://img-blog.csdn.net/20130726113335390?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2szMDM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="tupian10"></p><p><img src="https://img-blog.csdn.net/20130726113346718?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2szMDM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="tupian11"></p><p><img src="https://img-blog.csdn.net/20130726113358093?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2szMDM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="tupian12"></p><p><img src="https://img-blog.csdn.net/20130726113407109?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2szMDM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="tupian13"></p><p>如图所示，我们可以把整个矩形分成如图各个颜色不同的小矩形，那么这个小矩形的高就是我们扫过的距离，那么剩下了一个变量，那就是矩形的长一直在变化。</p><p>我们的线段树就是为了维护矩形的长，我们给每一个矩形的上下边进行标记，下面的边标记为1，上面的边标记为-1，每遇到一个矩形时，我们知道了标记为1的边，我们就加进来这一条矩形的长，等到扫描到-1时，证明这一条边需要删除，就删去，利用1和-1可以轻松的到这种状态。</p><p>还要注意这里的线段树指的并不是线段的一个端点，而指的是一个区间，所以我们要计算的时候r+1和r-1</p><p>再提一下离散化，离散化就是把一段很大的区间映射到一个小区间内，这样会节省大量空间，要进行离散化，我们先对端点进行排序，然后去重，然后二分找值就可以了<br>具体的请结合代码分析：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;cctype&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#define mem(a,b) memset(a,b,sizeof(a))</span><br><span class="line">#define inf 0x3f3f3f3f</span><br><span class="line">#define N 220</span><br><span class="line">#define ll long long</span><br><span class="line">using namespace std;</span><br><span class="line">#define lson l,m,rt&lt;&lt;1</span><br><span class="line">#define rson m+1,r,rt&lt;&lt;1|1</span><br><span class="line">struct Seg</span><br><span class="line">&#123;</span><br><span class="line">    double l,r,h;</span><br><span class="line">    int f;</span><br><span class="line">    Seg() &#123;&#125;</span><br><span class="line">    Seg(double a,double b,double c,int d):l(a),r(b),h(c),f(d) &#123;&#125;</span><br><span class="line">    bool operator &lt; (const Seg &amp;cmp) const</span><br><span class="line">    &#123;</span><br><span class="line">        return h&lt;cmp.h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; e[N];</span><br><span class="line">struct node</span><br><span class="line">&#123;</span><br><span class="line">    int cnt;</span><br><span class="line">    double len;</span><br><span class="line">&#125; t[N&lt;&lt;2];</span><br><span class="line">double X[N];</span><br><span class="line">void pushdown(int l,int r,int rt)</span><br><span class="line">&#123;</span><br><span class="line">    if(t[rt].cnt)&#x2F;&#x2F;当前的边被标记，就把当前的长度加上</span><br><span class="line">        t[rt].len&#x3D;X[r+1]-X[l];</span><br><span class="line">    else if(l&#x3D;&#x3D;r)&#x2F;&#x2F;当为一个点的时候长度为0</span><br><span class="line">        t[rt].len&#x3D;0;</span><br><span class="line">    else&#x2F;&#x2F;其他情况把左右两个区间的值加上</span><br><span class="line">        t[rt].len&#x3D;t[rt&lt;&lt;1].len+t[rt&lt;&lt;1|1].len;</span><br><span class="line">&#125;</span><br><span class="line">void update(int L,int R,int l,int r,int rt,int val)</span><br><span class="line">&#123;</span><br><span class="line">    if(L&lt;&#x3D;l&amp;&amp;r&lt;&#x3D;R)</span><br><span class="line">    &#123;</span><br><span class="line">        t[rt].cnt+&#x3D;val;&#x2F;&#x2F;加上标记的值</span><br><span class="line">        pushdown(l,r,rt);&#x2F;&#x2F;像下更新节点</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    int m&#x3D;(l+r)&gt;&gt;1;</span><br><span class="line">    if(L&lt;&#x3D;m) update(L,R,lson,val);</span><br><span class="line">    if(R&gt;m) update(L,R,rson,val);</span><br><span class="line">    pushdown(l,r,rt);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n,q&#x3D;1;</span><br><span class="line">    double a,b,c,d;</span><br><span class="line">    while(~scanf(&quot;%d&quot;,&amp;n)&amp;&amp;n)</span><br><span class="line">    &#123;</span><br><span class="line">        mem(t,0);</span><br><span class="line">        int num&#x3D;0;</span><br><span class="line">        for(int i&#x3D;0; i&lt;n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%lf%lf%lf%lf&quot;,&amp;a,&amp;b,&amp;c,&amp;d);</span><br><span class="line">            X[num]&#x3D;a;</span><br><span class="line">            e[num++]&#x3D;Seg(a,c,b,1);&#x2F;&#x2F;矩形下面用1来标记吗</span><br><span class="line">            X[num]&#x3D;c;</span><br><span class="line">            e[num++]&#x3D;Seg(a,c,d,-1);&#x2F;&#x2F;上面用-1来标记</span><br><span class="line">        &#125;</span><br><span class="line">        sort(X,X+num);&#x2F;&#x2F;用于离散化</span><br><span class="line">        sort(e,e+num);&#x2F;&#x2F;把矩形的边的纵坐标从小到大排序</span><br><span class="line">        int m&#x3D;unique(X,X+num)-X;</span><br><span class="line">        double ans&#x3D;0;</span><br><span class="line">        for(int i&#x3D;0; i&lt;num; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            int l&#x3D;lower_bound(X,X+m,e[i].l)-X;&#x2F;&#x2F;找出离散化以后的值</span><br><span class="line">            int r&#x3D;lower_bound(X,X+m,e[i].r)-X-1;</span><br><span class="line">            update(l,r,0,m,1,e[i].f);</span><br><span class="line">            ans+&#x3D;t[1].len*(e[i+1].h-e[i].h);</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;Test case #%d\nTotal explored area: %.2lf\n\n&quot;,q++,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;因为之前4月份打了将近一个月的个人赛，有些以前学习过的算法已经忘了，所以重新再温习一遍。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法重温" scheme="https://stephencurry6666.github.io/categories/%E7%AE%97%E6%B3%95%E9%87%8D%E6%B8%A9/"/>
    
    
      <category term="线段树再温" scheme="https://stephencurry6666.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%86%8D%E6%B8%A9/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE-Day(4)学习笔记</title>
    <link href="https://stephencurry6666.github.io/2020/05/14/JavaSE-Day(4)%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://stephencurry6666.github.io/2020/05/14/JavaSE-Day(4)%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-05-14T07:14:00.877Z</published>
    <updated>2020-05-14T12:44:11.422Z</updated>
    
    <content type="html"><![CDATA[<h3 id="选择结构switch语句的格式及其解释"><a href="#选择结构switch语句的格式及其解释" class="headerlink" title="选择结构switch语句的格式及其解释"></a>选择结构switch语句的格式及其解释</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1:switch语句(掌握)</span><br><span class="line">(1)格式：</span><br><span class="line">switch(表达式) &#123;</span><br><span class="line">case 值1:</span><br><span class="line">语句体1;</span><br><span class="line">break;</span><br><span class="line">case 值2:</span><br><span class="line">语句体2;</span><br><span class="line">break;</span><br><span class="line">...</span><br><span class="line">default:</span><br><span class="line">语句体n+1;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">格式解释说明：</span><br><span class="line">switch:说明这是switch语句。</span><br><span class="line">表达式:可以是byte,short,int,char</span><br><span class="line">JDK5以后可以是枚举</span><br><span class="line">JDK7以后可以是字符串</span><br><span class="line">case:后面的值就是要和表达式进行比较的值</span><br><span class="line">break:表示程序到这里中断，跳出switch语句</span><br><span class="line">default:如果所有的情况都不匹配,就执行这里,相当于if语句中的else</span><br><span class="line">(2)面试题</span><br><span class="line">switch语句的表达式可以是byte吗?可以是long吗?可以是String吗?</span><br><span class="line">可以,不可以,JDK7以后可以</span><br></pre></td></tr></table></figure><h3 id="选择结构switch语句的基本实用"><a href="#选择结构switch语句的基本实用" class="headerlink" title="选择结构switch语句的基本实用"></a>选择结构switch语句的基本实用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package stephencurry;</span><br><span class="line">import java.util.*;</span><br><span class="line">import java.math.*;</span><br><span class="line">import java.io.*;</span><br><span class="line">public class Main &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">        Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line">        System.out.println(&quot;请输入一个整数：&quot;);</span><br><span class="line">        int week &#x3D; sc.nextInt();</span><br><span class="line">        switch(week)</span><br><span class="line">        &#123;</span><br><span class="line">        case 1:</span><br><span class="line">        System.out.println(&quot;星期一&quot;);</span><br><span class="line">        break;</span><br><span class="line">        case 2:</span><br><span class="line">System.out.println(&quot;星期二&quot;);</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">System.out.println(&quot;星期三&quot;);</span><br><span class="line">break;</span><br><span class="line">case 4:</span><br><span class="line">System.out.println(&quot;星期四&quot;);</span><br><span class="line">break;</span><br><span class="line">case 5:</span><br><span class="line">System.out.println(&quot;星期五&quot;);</span><br><span class="line">break;</span><br><span class="line">case 6:</span><br><span class="line">System.out.println(&quot;星期六&quot;);</span><br><span class="line">break;</span><br><span class="line">case 7:</span><br><span class="line">System.out.println(&quot;星期日&quot;);</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">System.out.println(&quot;你输入的数据有误&quot;);</span><br><span class="line">break;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择结构switch语句的注意事项"><a href="#选择结构switch语句的注意事项" class="headerlink" title="选择结构switch语句的注意事项"></a>选择结构switch语句的注意事项</h3><p><strong>注意事项：</strong><br>A:case后面只能是常量，不能是变量，而且，多个case后面的值不能出现相同的<br>B:default可以省略吗?<br>可以省略，但是不建议，因为它的作用是对不正确的情况给出提示。<br>特殊情况：<br>case就可以把值固定。<br>A,B,C,D<br>C:break可以省略吗?<br>可以省略，但是结果可能不是我们想要的。<br>会出现一个现象：case穿透。<br>最终我们建议不要省略<br>D:default一定要在最后吗?<br>不是，可以在任意位置。但是建议在最后。<br>E:switch语句的结束条件<br>a:遇到break就结束了<br>b:执行到末尾就结束了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">class SwitchDemo2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;创建键盘录入对象</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;控制键盘录入数据</span><br><span class="line">System.out.println(&quot;请输入一个数据(1-7):&quot;);</span><br><span class="line">int week &#x3D; sc.nextInt(); &#x2F;&#x2F;3</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义常量</span><br><span class="line">&#x2F;&#x2F;int number &#x3D; 3;</span><br><span class="line">&#x2F;&#x2F;然后把case后面的值改为number，就会报错</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;switch判断语句</span><br><span class="line">switch(week) &#123;</span><br><span class="line">case 1:</span><br><span class="line">System.out.println(&quot;星期一&quot;);</span><br><span class="line">break;</span><br><span class="line">case 2:</span><br><span class="line">System.out.println(&quot;星期二&quot;);</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">System.out.println(&quot;星期三&quot;);</span><br><span class="line">break;</span><br><span class="line">case 4:</span><br><span class="line">System.out.println(&quot;星期四&quot;);</span><br><span class="line">break;</span><br><span class="line">case 5:</span><br><span class="line">System.out.println(&quot;星期五&quot;);</span><br><span class="line">break;</span><br><span class="line">case 6:</span><br><span class="line">System.out.println(&quot;星期六&quot;);</span><br><span class="line">break;</span><br><span class="line">case 7:</span><br><span class="line">System.out.println(&quot;星期日&quot;);</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">System.out.println(&quot;你输入的数据有误&quot;);</span><br><span class="line">&#x2F;&#x2F;break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择结构switch语句练习1看程序写结果"><a href="#选择结构switch语句练习1看程序写结果" class="headerlink" title="选择结构switch语句练习1看程序写结果"></a>选择结构switch语句练习1看程序写结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">看程序写结果</span><br><span class="line">*&#x2F;</span><br><span class="line">class SwitchTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int x &#x3D; 2;</span><br><span class="line">int y &#x3D; 3;</span><br><span class="line">switch(x)&#123;</span><br><span class="line">default:</span><br><span class="line">y++;</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">y++;</span><br><span class="line">case 4:</span><br><span class="line">y++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;y&#x3D;&quot;+y);</span><br><span class="line">System.out.println(&quot;---------------&quot;);</span><br><span class="line"></span><br><span class="line">int a &#x3D; 2;</span><br><span class="line">int b &#x3D; 3;</span><br><span class="line">switch(a)&#123;</span><br><span class="line">default:</span><br><span class="line">b++;</span><br><span class="line">case 3:</span><br><span class="line">b++;</span><br><span class="line">case 4:</span><br><span class="line">b++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;b&#x3D;&quot;+b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">结果是：y&#x3D;4；b&#x3D;6</span><br></pre></td></tr></table></figure><h3 id="选择结构switch语句练习2单项选择题"><a href="#选择结构switch语句练习2单项选择题" class="headerlink" title="选择结构switch语句练习2单项选择题"></a>选择结构switch语句练习2单项选择题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">模拟单项选择题。</span><br><span class="line"></span><br><span class="line">分析：</span><br><span class="line">A:出一个选择题，然后供你选择。</span><br><span class="line">B:键盘录入选择的数据。</span><br><span class="line">C:根据选择来给出你选择的结论。</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">class SwitchTest2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;出一个选择题，然后供你选择。</span><br><span class="line">&#x2F;&#x2F;由于我们现在没有办法键盘录入得到一个&#39;A&#39;,&#39;B&#39;</span><br><span class="line">&#x2F;&#x2F;这样的东西，我就用65，66这样的值替代</span><br><span class="line">&#x2F;&#x2F;将来我们获取到这样的值以后，强制转换为字符类型</span><br><span class="line">System.out.println(&quot;下面的几个人你最爱谁?&quot;);</span><br><span class="line">System.out.println(&quot;65 林青霞&quot;);</span><br><span class="line">System.out.println(&quot;66 张曼玉&quot;);</span><br><span class="line">System.out.println(&quot;67 刘德华&quot;);</span><br><span class="line">System.out.println(&quot;68 王力宏&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;键盘录入选择的数据。</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入你的选择：&quot;);</span><br><span class="line">int choiceNumber &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;强制转换为字符类型</span><br><span class="line">char choice &#x3D; (char) choiceNumber;</span><br><span class="line"></span><br><span class="line">switch(choice) &#123;</span><br><span class="line">case &#39;A&#39;:</span><br><span class="line">System.out.println(&quot;恭喜你,选择正确&quot;);</span><br><span class="line">break;</span><br><span class="line">case &#39;B&#39;:</span><br><span class="line">System.out.println(&quot;不好意思，你选择有误&quot;);</span><br><span class="line">break;</span><br><span class="line">case &#39;C&#39;:</span><br><span class="line">System.out.println(&quot;不好意思，你选择有误&quot;);</span><br><span class="line">break;</span><br><span class="line">case &#39;D&#39;:</span><br><span class="line">System.out.println(&quot;不好意思，你选择有误&quot;);</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">System.out.println(&quot;没有该选项&quot;);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择结构switch语句练习3表达式求字符串"><a href="#选择结构switch语句练习3表达式求字符串" class="headerlink" title="选择结构switch语句练习3表达式求字符串"></a>选择结构switch语句练习3表达式求字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">根据你键盘录入的字符串，判断是否有满足要求的，如果有就输出。</span><br><span class="line">否则，提示有误。</span><br><span class="line"></span><br><span class="line">String s &#x3D; sc.nextLine();</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">class SwitchTest3 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;创建键盘录入对象</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;录入数据</span><br><span class="line">System.out.println(&quot;请输入你要判断的字符串：&quot;);</span><br><span class="line">String s &#x3D; sc.nextLine();</span><br><span class="line"></span><br><span class="line">switch(s) &#123;</span><br><span class="line">case &quot;hello&quot;:</span><br><span class="line">System.out.println(&quot;你输入的是hello&quot;);</span><br><span class="line">break;</span><br><span class="line">case &quot;world&quot;:</span><br><span class="line">System.out.println(&quot;你输入的是world&quot;);</span><br><span class="line">break;</span><br><span class="line">case &quot;java&quot;:</span><br><span class="line">System.out.println(&quot;你输入的是java&quot;);</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">System.out.println(&quot;没有找到你输入的数据&quot;);</span><br><span class="line">&#x2F;&#x2F;break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择结构switch和if语句的各自使用场景"><a href="#选择结构switch和if语句的各自使用场景" class="headerlink" title="选择结构switch和if语句的各自使用场景"></a>选择结构switch和if语句的各自使用场景</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">用switch语句实现键盘录入月份，输出对应的季节</span><br><span class="line"></span><br><span class="line">分析：</span><br><span class="line">A:键盘录入一个月份，用Scanner实现</span><br><span class="line">B:用switch语句实现即可</span><br><span class="line"></span><br><span class="line">if语句和switch语句的区别?</span><br><span class="line">if语句：</span><br><span class="line">A:针对结果是boolean类型的判断</span><br><span class="line">B:针对一个范围的判断</span><br><span class="line">C:针对几个常量值的判断</span><br><span class="line"></span><br><span class="line">switch语句：</span><br><span class="line">针对几个常量值的判断</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">class SwitchTest4 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;创建键盘录入对象</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;录入数据</span><br><span class="line">System.out.println(&quot;请输入月份(1-12)：&quot;);</span><br><span class="line">int month &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">switch(month) &#123;</span><br><span class="line">case 1:</span><br><span class="line">System.out.println(&quot;冬季&quot;);</span><br><span class="line">break;</span><br><span class="line">case 2:</span><br><span class="line">System.out.println(&quot;冬季&quot;);</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">System.out.println(&quot;春季&quot;);</span><br><span class="line">break;</span><br><span class="line">case 4:</span><br><span class="line">System.out.println(&quot;春季&quot;);</span><br><span class="line">break;</span><br><span class="line">case 5:</span><br><span class="line">System.out.println(&quot;春季&quot;);</span><br><span class="line">break;</span><br><span class="line">case 6:</span><br><span class="line">System.out.println(&quot;夏季&quot;);</span><br><span class="line">break;</span><br><span class="line">case 7:</span><br><span class="line">System.out.println(&quot;夏季&quot;);</span><br><span class="line">break;</span><br><span class="line">case 8:</span><br><span class="line">System.out.println(&quot;夏季&quot;);</span><br><span class="line">break;</span><br><span class="line">case 9:</span><br><span class="line">System.out.println(&quot;秋季&quot;);</span><br><span class="line">break;</span><br><span class="line">case 10:</span><br><span class="line">System.out.println(&quot;秋季&quot;);</span><br><span class="line">break;</span><br><span class="line">case 11:</span><br><span class="line">System.out.println(&quot;秋季&quot;);</span><br><span class="line">break;</span><br><span class="line">case 12:</span><br><span class="line">System.out.println(&quot;冬季&quot;);</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">System.out.println(&quot;你输入的月份有误&quot;);</span><br><span class="line">&#125;</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;这样写太麻烦了，我们使用一个我们不想使用的东西：case穿透</span><br><span class="line">switch(month) &#123;</span><br><span class="line">case 1:</span><br><span class="line">case 2:</span><br><span class="line">case 12:</span><br><span class="line">System.out.println(&quot;冬季&quot;);</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">case 4:</span><br><span class="line">case 5:</span><br><span class="line">System.out.println(&quot;春季&quot;);</span><br><span class="line">break;</span><br><span class="line">case 6:</span><br><span class="line">case 7:</span><br><span class="line">case 8:</span><br><span class="line">System.out.println(&quot;夏季&quot;);</span><br><span class="line">break;</span><br><span class="line">case 9:</span><br><span class="line">case 10:</span><br><span class="line">case 11:</span><br><span class="line">System.out.println(&quot;秋季&quot;);</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">System.out.println(&quot;你输入的月份有误&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构循环语句概述"><a href="#循环结构循环语句概述" class="headerlink" title="循环结构循环语句概述"></a>循环结构循环语句概述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">需求：请在控制台输出10次&quot;HelloWorld&quot;</span><br><span class="line">*&#x2F;</span><br><span class="line">class Demo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构for语句的格式和基本使用"><a href="#循环结构for语句的格式和基本使用" class="headerlink" title="循环结构for语句的格式和基本使用"></a>循环结构for语句的格式和基本使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">循环语句：for循环,while循环,do...while循环。</span><br><span class="line"></span><br><span class="line">for循环格式：</span><br><span class="line">for(初始化语句;判断条件语句;控制条件语句) &#123;</span><br><span class="line">循环体语句;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行流程：</span><br><span class="line">A:执行初始化语句</span><br><span class="line">B:执行判断条件语句,看其返回值是true还是false</span><br><span class="line">如果是true，就继续执行</span><br><span class="line">如果是false，就结束循环</span><br><span class="line">C:执行循环体语句;</span><br><span class="line">D:执行控制条件语句</span><br><span class="line">E:回到B继续。</span><br><span class="line"></span><br><span class="line">需求：请在控制台输出10次&quot;HelloWorld&quot;</span><br><span class="line">*&#x2F;</span><br><span class="line">class ForDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;最原始的做法</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">System.out.println(&quot;----------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;这种做法不好,代码的重复度太高。</span><br><span class="line">&#x2F;&#x2F;所以呢，我们用循环改进</span><br><span class="line">for(int x&#x3D;1;x&lt;&#x3D;10;x++) &#123;</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构for语句的注意事项"><a href="#循环结构for语句的注意事项" class="headerlink" title="循环结构for语句的注意事项"></a>循环结构for语句的注意事项</h3><p><strong>注意事项：</strong><br>A:判断条件语句无论简单还是复杂结果是boolean类型。</p><p>B:循环体语句如果是一条语句，大括号可以省略；如果是多条语句，大括号不能省略。建议永远不要省略。</p><p>C:一般来说：有左大括号就没有分号，有分号就没有左大括号</p><h3 id="循环结构for语句练习1获取数据"><a href="#循环结构for语句练习1获取数据" class="headerlink" title="循环结构for语句练习1获取数据"></a>循环结构for语句练习1获取数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">需求：请在控制台输出数据1-10</span><br><span class="line">*&#x2F;</span><br><span class="line">class ForDemo2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;原始做法</span><br><span class="line">System.out.println(1);</span><br><span class="line">System.out.println(2);</span><br><span class="line">System.out.println(3);</span><br><span class="line">System.out.println(4);</span><br><span class="line">System.out.println(5);</span><br><span class="line">System.out.println(6);</span><br><span class="line">System.out.println(7);</span><br><span class="line">System.out.println(8);</span><br><span class="line">System.out.println(9);</span><br><span class="line">System.out.println(10);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;-------------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;如何改进呢?用循环改进</span><br><span class="line">for(int x&#x3D;1; x&lt;&#x3D;10; x++) &#123;</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;-------------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;从0开始</span><br><span class="line">for(int x&#x3D;0; x&lt;10; x++) &#123;</span><br><span class="line">System.out.println(x+1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构for语句练习2求和思想"><a href="#循环结构for语句练习2求和思想" class="headerlink" title="循环结构for语句练习2求和思想"></a>循环结构for语句练习2求和思想</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">需求：求出1-10之间数据之和</span><br><span class="line"></span><br><span class="line">分析：</span><br><span class="line">0+1&#x3D;1</span><br><span class="line">1+2&#x3D;3</span><br><span class="line">3+3&#x3D;6</span><br><span class="line">6+4&#x3D;10</span><br><span class="line">10+5&#x3D;15</span><br><span class="line"> ...</span><br><span class="line"> </span><br><span class="line">由此可见我们要定义两个变量：</span><br><span class="line">一个变量用于存储第一个加数，第一个加数其实保存的是以前的所有数据和。默认初始化值应该是0。</span><br><span class="line">一个变量用于存储第二个加数，第二个加数其实就是每次的数据变化的值。</span><br><span class="line"></span><br><span class="line">求和思想。</span><br><span class="line">*&#x2F;</span><br><span class="line">class ForDemo3 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;原始做法</span><br><span class="line">System.out.println(1+2+3+4+5+6+7+8+9+10);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义第一个加数</span><br><span class="line">int sum &#x3D; 0;</span><br><span class="line"></span><br><span class="line">for(int x&#x3D;1; x&lt;&#x3D;10; x++) &#123;</span><br><span class="line">&#x2F;&#x2F;这里的x其实是第二个加数</span><br><span class="line">sum &#x3D; sum + x;</span><br><span class="line">&#x2F;*</span><br><span class="line">0 + 1 &#x3D; 1</span><br><span class="line">1 + 2 &#x3D; 3</span><br><span class="line">3 + 3 &#x3D; 6</span><br><span class="line">...</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;sum +&#x3D; x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;sum:&quot;+sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构for语句练习3偶数和"><a href="#循环结构for语句练习3偶数和" class="headerlink" title="循环结构for语句练习3偶数和"></a>循环结构for语句练习3偶数和</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">需求：</span><br><span class="line">A:求1-100之和。</span><br><span class="line">B:求出1-100之间偶数和</span><br><span class="line">C:求出1-100之间奇数和(自己做)</span><br><span class="line">*&#x2F;</span><br><span class="line">class ForDemo4 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;求1-100之和。</span><br><span class="line">int sum1 &#x3D; 0;</span><br><span class="line"></span><br><span class="line">for(int x&#x3D;1; x&lt;&#x3D;100; x++) &#123;</span><br><span class="line">sum1 +&#x3D;x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;1-100之和是：&quot;+sum1);</span><br><span class="line">System.out.println(&quot;------------------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;求出1-100之间偶数和</span><br><span class="line">&#x2F;&#x2F;方式1</span><br><span class="line">int sum2 &#x3D; 0;</span><br><span class="line"></span><br><span class="line">for(int x&#x3D;1; x&lt;&#x3D;100; x++) &#123;</span><br><span class="line">if(x%2 &#x3D;&#x3D; 0) &#123;</span><br><span class="line">sum2 +&#x3D; x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;1-100偶数之和是：&quot;+sum2);</span><br><span class="line">System.out.println(&quot;------------------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;方式2</span><br><span class="line">int sum3 &#x3D; 0;</span><br><span class="line"></span><br><span class="line">for(int x&#x3D;0; x&lt;&#x3D;100; x+&#x3D;2) &#123;</span><br><span class="line">sum3 +&#x3D; x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;1-100偶数之和是：&quot;+sum3);</span><br><span class="line">System.out.println(&quot;------------------&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构for语句练习4阶乘"><a href="#循环结构for语句练习4阶乘" class="headerlink" title="循环结构for语句练习4阶乘"></a>循环结构for语句练习4阶乘</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">需求：求5的阶乘。</span><br><span class="line"></span><br><span class="line">什么是阶乘呢?</span><br><span class="line">n! &#x3D; n*(n-1)! 规则</span><br><span class="line">n! &#x3D; n*(n-1)*(n-2)*...*3*2*1</span><br><span class="line"></span><br><span class="line">求和思想。</span><br><span class="line">求阶乘思想。</span><br><span class="line">*&#x2F;</span><br><span class="line">class ForDemo5 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;定义最终结果变量</span><br><span class="line">int jc &#x3D; 1;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;这里的x其实可以直接从2开始</span><br><span class="line">&#x2F;&#x2F;for(int x&#x3D;1; x&lt;&#x3D;5; x++) </span><br><span class="line"></span><br><span class="line">for(int x&#x3D;2; x&lt;&#x3D;5; x++) &#123;</span><br><span class="line">jc *&#x3D;x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;1-5的阶乘是：&quot;+jc);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构for语句练习5水仙花数"><a href="#循环结构for语句练习5水仙花数" class="headerlink" title="循环结构for语句练习5水仙花数"></a>循环结构for语句练习5水仙花数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">天将降大任于斯人也,必先盗其QQ,封其微博,收其wifi,夺其手机。让其静心学习Java欧耶。</span><br><span class="line"></span><br><span class="line">需求：在控制台输出所有的”水仙花数”</span><br><span class="line"></span><br><span class="line">分析：</span><br><span class="line">我们都不知道什么叫&quot;水仙花数&quot;，你让我怎么做呢?</span><br><span class="line"></span><br><span class="line">所谓的水仙花数是指一个三位数，其各位数字的立方和等于该数本身。</span><br><span class="line">举例：153就是一个水仙花数。</span><br><span class="line">153 &#x3D; 1*1*1 + 5*5*5 + 3*3*3 &#x3D; 1 + 125 + 27 &#x3D; 153</span><br><span class="line"></span><br><span class="line">A:三位数其实是告诉了我们范围。</span><br><span class="line">B:通过for循环我们就可以实现获取每一个三位数</span><br><span class="line">  但是麻烦是如何获取这个三位数的个,十,百位上的数据</span><br><span class="line">  </span><br><span class="line">  我们如何获取一个数据的个,十,百呢?</span><br><span class="line">假设有个一个数据:153</span><br><span class="line">ge:153%10 &#x3D; 3</span><br><span class="line">shi: 153&#x2F;10%10 &#x3D; 5</span><br><span class="line">bai：153&#x2F;10&#x2F;10%10 &#x3D; 1</span><br><span class="line">qian：x&#x2F;10&#x2F;10&#x2F;10%10</span><br><span class="line">wan:  x&#x2F;10&#x2F;10&#x2F;10&#x2F;10%10</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">C:让ge*ge*ge+shi*shi*shi+bai*bai*bai和该数据比较</span><br><span class="line">  如果相同，就把该数据在控制台输出。</span><br><span class="line">*&#x2F;</span><br><span class="line">class ForDemo6 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;三位数其实是告诉了我们范围。</span><br><span class="line">for(int x&#x3D;100; x&lt;1000; x++) &#123;</span><br><span class="line">int ge &#x3D; x%10;</span><br><span class="line">int shi &#x3D; x&#x2F;10%10;</span><br><span class="line">int bai &#x3D; x&#x2F;10&#x2F;10%10;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;让ge*ge*ge+shi*shi*shi+bai*bai*bai和该数据比较</span><br><span class="line">if(x &#x3D;&#x3D; (ge*ge*ge+shi*shi*shi+bai*bai*bai)) &#123;</span><br><span class="line">&#x2F;&#x2F;如果相同，就把该数据在控制台输出。</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构for语句练习6改进版的回文数"><a href="#循环结构for语句练习6改进版的回文数" class="headerlink" title="循环结构for语句练习6改进版的回文数"></a>循环结构for语句练习6改进版的回文数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">练习：</span><br><span class="line">请在控制台输出满足如下条件的五位数</span><br><span class="line">个位等于万位</span><br><span class="line">十位等于千位</span><br><span class="line">个位+十位+千位+万位&#x3D;百位</span><br><span class="line"></span><br><span class="line">分析：</span><br><span class="line">A:五位数就告诉了我们范围。</span><br><span class="line">B:分解每一个五位数的个，十，百，千，万位上的数据</span><br><span class="line">C:按照要求进行判断即可</span><br><span class="line">*&#x2F;</span><br><span class="line">class ForDemo7 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;五位数就告诉了我们范围。</span><br><span class="line">for(int x&#x3D;10000; x&lt;100000; x++) &#123;</span><br><span class="line">&#x2F;&#x2F;分解每一个五位数的个，十，百，千，万位上的数据</span><br><span class="line">int ge &#x3D; x%10;</span><br><span class="line">int shi &#x3D; x&#x2F;10%10;</span><br><span class="line">int bai  &#x3D; x&#x2F;10&#x2F;10%10;</span><br><span class="line">int qian &#x3D; x&#x2F;10&#x2F;10&#x2F;10%10;</span><br><span class="line">int wan &#x3D; x&#x2F;10&#x2F;10&#x2F;10&#x2F;10%10;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;按照要求进行判断即可</span><br><span class="line">if((ge&#x3D;&#x3D;wan) &amp;&amp; (shi&#x3D;&#x3D;qian) &amp;&amp; (ge+shi+qian+wan&#x3D;&#x3D;bai)) &#123;</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构for语句练习7统计思想"><a href="#循环结构for语句练习7统计思想" class="headerlink" title="循环结构for语句练习7统计思想"></a>循环结构for语句练习7统计思想</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">需求：统计”水仙花数”共有多少个</span><br><span class="line"></span><br><span class="line">分析：</span><br><span class="line">A:首先必须知道什么是水仙花数</span><br><span class="line">所谓的水仙花数是指一个三位数，其各位数字的立方和等于该数本身。</span><br><span class="line">举例：153就是一个水仙花数。</span><br><span class="line">153 &#x3D; 1*1*1 + 5*5*5 + 3*3*3 &#x3D; 1 + 125 + 27 &#x3D; 153</span><br><span class="line">B:定义统计变量，初始化值是0</span><br><span class="line">C:三位数告诉了我们范围，用for循环就可以搞定</span><br><span class="line">D:获取每一个三位数的个，十，百的数据</span><br><span class="line">E:按照要求进行判断</span><br><span class="line">F:如果满足要求就计数。</span><br><span class="line">*&#x2F;</span><br><span class="line">class ForDemo8 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;定义统计变量，初始化值是0</span><br><span class="line">int count &#x3D; 0;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;三位数告诉了我们范围，用for循环就可以搞定</span><br><span class="line">for(int x&#x3D;100; x&lt;1000; x++) &#123;</span><br><span class="line">&#x2F;&#x2F;获取每一个三位数的个，十，百的数据</span><br><span class="line">int ge &#x3D; x%10;</span><br><span class="line">int shi &#x3D; x&#x2F;10%10;</span><br><span class="line">int bai &#x3D; x&#x2F;10&#x2F;10%10;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;按照要求进行判断</span><br><span class="line">if(x &#x3D;&#x3D; (ge*ge*ge+shi*shi*shi+bai*bai*bai)) &#123;</span><br><span class="line">&#x2F;&#x2F;如果满足要求就计数。</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;水仙花数共有&quot;+count+&quot;个&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构for语句练习8同时取余问题"><a href="#循环结构for语句练习8同时取余问题" class="headerlink" title="循环结构for语句练习8同时取余问题"></a>循环结构for语句练习8同时取余问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">需求：请统计1-1000之间同时满足如下条件的数据有多少个：</span><br><span class="line">对3整除余2</span><br><span class="line">对5整除余3</span><br><span class="line">对7整除余2</span><br><span class="line"></span><br><span class="line">分析：</span><br><span class="line">A:定义统计变量,初始化值是0</span><br><span class="line">B:1-1000之间是一个范围，用for很容易就可以实现。</span><br><span class="line">C:每个数据要同时满足如下要求</span><br><span class="line">x%3&#x3D;&#x3D;2</span><br><span class="line">x%5&#x3D;&#x3D;3</span><br><span class="line">x%7&#x3D;&#x3D;2</span><br><span class="line">D:如果满足条件，统计数据++即可，最后输出统计变量</span><br><span class="line">*&#x2F;</span><br><span class="line">class ForDemo9 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;定义统计变量,初始化值是0</span><br><span class="line">int count &#x3D; 0;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;1-1000之间是一个范围，用for很容易就可以实现。</span><br><span class="line">for(int x&#x3D;1; x&lt;&#x3D;1000; x++) &#123;</span><br><span class="line">&#x2F;*</span><br><span class="line">每个数据要同时满足如下要求</span><br><span class="line">x%3&#x3D;&#x3D;2</span><br><span class="line">x%5&#x3D;&#x3D;3</span><br><span class="line">x%7&#x3D;&#x3D;2</span><br><span class="line">*&#x2F;</span><br><span class="line">if(x%3&#x3D;&#x3D;2 &amp;&amp; x%5&#x3D;&#x3D;3 &amp;&amp; x%7&#x3D;&#x3D;2) &#123;</span><br><span class="line">count++;</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;输出数据</span><br><span class="line">System.out.println(&quot;满足这样条件的数据共有：&quot;+count+&quot;个&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构while语句的基本格式和使用"><a href="#循环结构while语句的基本格式和使用" class="headerlink" title="循环结构while语句的基本格式和使用"></a>循环结构while语句的基本格式和使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">while循环的基本格式：</span><br><span class="line">while(判断条件语句) &#123;</span><br><span class="line">循环体语句;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">扩展格式：</span><br><span class="line"></span><br><span class="line">初始化语句;</span><br><span class="line">    while(判断条件语句) &#123;</span><br><span class="line"> 循环体语句;</span><br><span class="line"> 控制条件语句;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">通过这个格式，我们就可以看到其实和for循环是差不多的。</span><br><span class="line"></span><br><span class="line">for(初始化语句;判断条件语句;控制条件语句) &#123;</span><br><span class="line">循环体语句;</span><br><span class="line">&#125;</span><br><span class="line">*&#x2F;</span><br><span class="line">class WhileDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;输出10次&quot;HelloWorld&quot;</span><br><span class="line">&#x2F;&#x2F;for语句版</span><br><span class="line">for(int x&#x3D;0; x&lt;10; x++) &#123;</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;--------------&quot;);</span><br><span class="line">&#x2F;&#x2F;while语句版</span><br><span class="line">int x&#x3D;0;</span><br><span class="line">while(x&lt;10) &#123;</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">x++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构while语句的练习1求和思想"><a href="#循环结构while语句的练习1求和思想" class="headerlink" title="循环结构while语句的练习1求和思想"></a>循环结构while语句的练习1求和思想</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">练习：用while循环实现</span><br><span class="line">左边：求出1-100之和</span><br><span class="line">右边：统计水仙花数有多少个</span><br><span class="line"></span><br><span class="line">初始化语句;</span><br><span class="line">while(判断条件语句) &#123;</span><br><span class="line"> 循环体语句;</span><br><span class="line"> 控制条件语句;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for(初始化语句;判断条件语句;控制条件语句) &#123;</span><br><span class="line">循环体语句;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line">class WhileDemo2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;求出1-100之和</span><br><span class="line">&#x2F;&#x2F;for语句版本</span><br><span class="line">int sum &#x3D; 0;</span><br><span class="line"></span><br><span class="line">for(int x&#x3D;1; x&lt;&#x3D;100; x++) &#123;</span><br><span class="line">sum+&#x3D;x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;sum:&quot;+sum);</span><br><span class="line">System.out.println(&quot;--------&quot;);</span><br><span class="line">&#x2F;&#x2F;while语句版本</span><br><span class="line">int sum2 &#x3D; 0;</span><br><span class="line"></span><br><span class="line">int y&#x3D;1;</span><br><span class="line">while(y&lt;&#x3D;100) &#123;</span><br><span class="line">sum2+&#x3D;y;</span><br><span class="line">y++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;sum2:&quot;+sum2);</span><br><span class="line">System.out.println(&quot;--------&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构while语句的练习2统计思想"><a href="#循环结构while语句的练习2统计思想" class="headerlink" title="循环结构while语句的练习2统计思想"></a>循环结构while语句的练习2统计思想</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">需求：统计水仙花数有多少个</span><br><span class="line">*&#x2F;</span><br><span class="line">class WhileDemo3 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;for循环版本</span><br><span class="line">int count &#x3D; 0;</span><br><span class="line"></span><br><span class="line">for(int x&#x3D;100; x&lt;1000; x++) &#123;</span><br><span class="line">int ge &#x3D; x%10;</span><br><span class="line">int shi &#x3D; x&#x2F;10%10;</span><br><span class="line">int bai &#x3D; x&#x2F;10&#x2F;10%10;</span><br><span class="line"></span><br><span class="line">if((ge*ge*ge+shi*shi*shi+bai*bai*bai) &#x3D;&#x3D; x) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;count:&quot;+count);</span><br><span class="line">System.out.println(&quot;------------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;while循环版本</span><br><span class="line">int count2 &#x3D; 0;</span><br><span class="line"></span><br><span class="line">int y &#x3D; 100;</span><br><span class="line">while(y&lt;1000) &#123;</span><br><span class="line">int ge &#x3D; y%10;</span><br><span class="line">int shi &#x3D; y&#x2F;10%10;</span><br><span class="line">int bai &#x3D; y&#x2F;10&#x2F;10%10;</span><br><span class="line"></span><br><span class="line">if((ge*ge*ge+shi*shi*shi+bai*bai*bai) &#x3D;&#x3D; y) &#123;</span><br><span class="line">count2++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">y++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;count2:&quot;+count2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构while语句和for语句的区别"><a href="#循环结构while语句和for语句的区别" class="headerlink" title="循环结构while语句和for语句的区别"></a>循环结构while语句和for语句的区别</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">while循环和for循环的区别?</span><br><span class="line">使用区别：如果你想在循环结束后，继续使用控制条件的那个变量，用while循环，否则用for循环。不知道用for循环。</span><br><span class="line">          因为变量及早的从内存中消失，可以提高内存的使用效率。</span><br><span class="line">  </span><br><span class="line">其实还有一种场景的理解:</span><br><span class="line">如果是一个范围的，用for循环非常明确。</span><br><span class="line">如果是不明确要做多少次，用while循环较为合适。</span><br><span class="line">举例：吃葡萄。</span><br><span class="line">*&#x2F;</span><br><span class="line">class WhileDemo4 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;for循环实现</span><br><span class="line">for(int x&#x3D;0; x&lt;10; x++) &#123;</span><br><span class="line">System.out.println(&quot;学习Java技术哪家强,中国北京传智播客&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;这里不能在继续访问了</span><br><span class="line">&#x2F;&#x2F;System.out.println(x);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;while循环实现</span><br><span class="line">int y &#x3D; 0;</span><br><span class="line">while(y&lt;10) &#123;</span><br><span class="line">System.out.println(&quot;学习Java技术哪家强,中国北京传智播客&quot;);</span><br><span class="line">y++;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;这里是可以继续访问的</span><br><span class="line">System.out.println(y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构while语句和练习珠穆朗玛峰"><a href="#循环结构while语句和练习珠穆朗玛峰" class="headerlink" title="循环结构while语句和练习珠穆朗玛峰"></a>循环结构while语句和练习珠穆朗玛峰</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">我国最高山峰是珠穆朗玛峰：8848m，我现在有一张足够大的纸张，厚度为：0.01m。</span><br><span class="line">请问，我折叠多少次，就可以保证厚度不低于珠穆朗玛峰的高度?</span><br><span class="line"></span><br><span class="line">分析：</span><br><span class="line">A:定义一个统计变量，默认值是0</span><br><span class="line">B:最高山峰是珠穆朗玛峰：8848m这是最终的厚度</span><br><span class="line">  我现在有一张足够大的纸张，厚度为：0.01m这是初始厚度</span><br><span class="line">C:我折叠多少次，就可以保证厚度不低于珠穆朗玛峰的高度?</span><br><span class="line">  折叠一次有什么变化呢?就是厚度是以前的2倍。</span><br><span class="line">D:只要每次变化的厚度没有超过珠穆朗玛峰的高度，就折叠，统计变量++</span><br><span class="line">E:输出统计变量。</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">class WhileDemo5 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;定义一个统计变量，默认值是0</span><br><span class="line">int count &#x3D; 0;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;最高山峰是珠穆朗玛峰：8848m这是最终的厚度</span><br><span class="line">&#x2F;&#x2F;我现在有一张足够大的纸张，厚度为：0.01m这是初始厚度</span><br><span class="line">&#x2F;&#x2F;为了简单，我把0.01变成1，同理8848就变成了884800</span><br><span class="line">int end &#x3D; 884800;</span><br><span class="line">int start &#x3D; 1;</span><br><span class="line"></span><br><span class="line">while(start&lt;end) &#123;</span><br><span class="line">&#x2F;&#x2F;只要每次变化的厚度没有超过珠穆朗玛峰的高度，就折叠，统计变量++</span><br><span class="line">count++;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;折叠一次有什么变化呢?就是厚度是以前的2倍。</span><br><span class="line">start *&#x3D; 2;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;第&quot;+count+&quot;次厚度是&quot;+start);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;输出统计变量。</span><br><span class="line">System.out.println(&quot;要叠&quot;+count+&quot;次&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构do…while语句的格式和基本使用"><a href="#循环结构do…while语句的格式和基本使用" class="headerlink" title="循环结构do…while语句的格式和基本使用"></a>循环结构do…while语句的格式和基本使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">do...while循环的基本格式：</span><br><span class="line">do &#123;</span><br><span class="line">循环体语句;</span><br><span class="line">&#125;while(判断条件语句);</span><br><span class="line"></span><br><span class="line">扩展格式；</span><br><span class="line">初始化语句;</span><br><span class="line">do &#123;</span><br><span class="line">循环体语句;</span><br><span class="line">控制条件语句;</span><br><span class="line">&#125;while(判断条件语句);</span><br><span class="line">*&#x2F;</span><br><span class="line">class DoWhileDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;输出10次HelloWorld。</span><br><span class="line">int x &#x3D; 0;</span><br><span class="line">do &#123;</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">x++;</span><br><span class="line">&#125;while(x&lt;10);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;--------------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;求和1-100</span><br><span class="line">int sum &#x3D; 0;</span><br><span class="line">int a &#x3D; 1;</span><br><span class="line">do &#123;</span><br><span class="line">sum +&#x3D; a;</span><br><span class="line">a++;</span><br><span class="line">&#125;while(a&lt;&#x3D;100);</span><br><span class="line"></span><br><span class="line">System.out.println(sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构三种循环语句的区别"><a href="#循环结构三种循环语句的区别" class="headerlink" title="循环结构三种循环语句的区别"></a>循环结构三种循环语句的区别</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">循环语句的区别:</span><br><span class="line">do...while循环至少执行一次循环体。</span><br><span class="line">而for,while循环必须先判断条件是否成立，然后决定是否执行循环体语句。</span><br><span class="line"></span><br><span class="line">那么，我们一般使用哪种循环呢?</span><br><span class="line">优先考虑for，其次考虑while，最后考虑do...while</span><br><span class="line">*&#x2F;</span><br><span class="line">class DoWhileDemo2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int x &#x3D; 3;</span><br><span class="line">while(x &lt; 3) &#123;</span><br><span class="line">System.out.println(&quot;我爱林青霞&quot;);</span><br><span class="line">x++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;--------------&quot;);</span><br><span class="line"></span><br><span class="line">int y &#x3D; 3;</span><br><span class="line">do &#123;</span><br><span class="line">System.out.println(&quot;我爱林青霞&quot;);</span><br><span class="line">y++;</span><br><span class="line">&#125;while(y &lt; 3);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构循环注意事项之死循环"><a href="#循环结构循环注意事项之死循环" class="headerlink" title="循环结构循环注意事项之死循环"></a>循环结构循环注意事项之死循环</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">注意死循环：</span><br><span class="line">A:一定要注意控制条件语句控制的那个变量的问题，不要弄丢了，否则就容易死循环。</span><br><span class="line">B:两种最简单的死循环格式</span><br><span class="line">while(true)&#123;...&#125;</span><br><span class="line">for(;;)&#123;...&#125;</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line">class DoWhileDemo3 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int x &#x3D; 0;</span><br><span class="line">while(x &lt; 10) &#123;</span><br><span class="line">System.out.println(x);</span><br><span class="line">x++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;------------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">while(true) &#123;</span><br><span class="line">System.out.println(&quot;今天我很高兴，学习了死循环&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">for(;;) &#123;</span><br><span class="line">System.out.println(&quot;今天我很高兴，学习了死循环&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构循环嵌套输出4行5列的星星"><a href="#循环结构循环嵌套输出4行5列的星星" class="headerlink" title="循环结构循环嵌套输出4行5列的星星"></a>循环结构循环嵌套输出4行5列的星星</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">需求：请输出一个4行5列的星星(*)图案。</span><br><span class="line">结果：</span><br><span class="line">*****</span><br><span class="line">*****</span><br><span class="line">*****</span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">循环嵌套：就是循环语句的循环体本身是一个循环语句。</span><br><span class="line"></span><br><span class="line">通过结果我们知道这样的一个结论：</span><br><span class="line">外循环控制行数</span><br><span class="line">内循环控制列数</span><br><span class="line">*&#x2F;</span><br><span class="line">class ForForDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;原始做法</span><br><span class="line">System.out.println(&quot;*****&quot;);</span><br><span class="line">System.out.println(&quot;*****&quot;);</span><br><span class="line">System.out.println(&quot;*****&quot;);</span><br><span class="line">System.out.println(&quot;*****&quot;);</span><br><span class="line">System.out.println(&quot;-------------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;虽然可以完成需求，但是不是很好</span><br><span class="line">&#x2F;&#x2F;如果是多行多列就会比较麻烦</span><br><span class="line">&#x2F;&#x2F;所以我们准备改进</span><br><span class="line">&#x2F;&#x2F;如何改进呢?</span><br><span class="line">&#x2F;&#x2F;我先考虑如何实现一行*的问题</span><br><span class="line">&#x2F;&#x2F;System.out.println(&quot;*****&quot;);</span><br><span class="line">&#x2F;&#x2F;我们要想的是如何实现一次输出一颗*的问题</span><br><span class="line">&#x2F;&#x2F;System.out.println(&quot;*&quot;);</span><br><span class="line">&#x2F;&#x2F;System.out.println(&quot;*&quot;);</span><br><span class="line">&#x2F;&#x2F;现在虽然可以一次一颗*，但是却换行了，我要求不能换行，怎么办呢?</span><br><span class="line">&#x2F;&#x2F;输出语句的另一种格式：System.out.print(); 这个是不带换行的</span><br><span class="line">&#x2F;&#x2F;System.out.print(&quot;*&quot;);</span><br><span class="line">&#x2F;&#x2F;System.out.print(&quot;*&quot;);</span><br><span class="line">&#x2F;&#x2F;System.out.print(&quot;*&quot;);</span><br><span class="line">&#x2F;&#x2F;System.out.print(&quot;*&quot;);</span><br><span class="line">&#x2F;&#x2F;System.out.print(&quot;*&quot;);</span><br><span class="line">&#x2F;&#x2F;如果我要在一行上打出多颗*，比较麻烦，而代码是重复的，所以我决定用循环改进</span><br><span class="line">for(int x&#x3D;0; x&lt;5; x++) &#123;</span><br><span class="line">System.out.print(&quot;*&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;我们可以通过空的输出语句实现换行：System.out.println();</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;既然我可以打出一行，我就可以打出第二行</span><br><span class="line">for(int x&#x3D;0; x&lt;5; x++) &#123;</span><br><span class="line">System.out.print(&quot;*&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;我们可以通过空的输出语句实现换行：System.out.println();</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;同理打出第三行，第四行</span><br><span class="line">for(int x&#x3D;0; x&lt;5; x++) &#123;</span><br><span class="line">System.out.print(&quot;*&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;我们可以通过空的输出语句实现换行：System.out.println();</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;既然我可以打出一行，我就可以打出第二行</span><br><span class="line">for(int x&#x3D;0; x&lt;5; x++) &#123;</span><br><span class="line">System.out.print(&quot;*&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;我们可以通过空的输出语句实现换行：System.out.println();</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(&quot;-----------------&quot;);</span><br><span class="line">&#x2F;&#x2F;同样的代码出现了4次，说明我们程序写的不好，用循环改进</span><br><span class="line">for(int y&#x3D;0; y&lt;4; y++) &#123;</span><br><span class="line">for(int x&#x3D;0; x&lt;5; x++) &#123;</span><br><span class="line">System.out.print(&quot;*&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;我们可以通过空的输出语句实现换行：System.out.println();</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构循环嵌套输出直角三角形"><a href="#循环结构循环嵌套输出直角三角形" class="headerlink" title="循环结构循环嵌套输出直角三角形"></a>循环结构循环嵌套输出直角三角形</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">需求：请输出下列的形状</span><br><span class="line">*</span><br><span class="line">**</span><br><span class="line">***</span><br><span class="line">****</span><br><span class="line">*****</span><br><span class="line">*&#x2F;</span><br><span class="line">class ForForDemo2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;通过简单的观察，我们看到这是一个行是5，列数是变化的形状</span><br><span class="line">&#x2F;&#x2F;我们先打印出一个5行5列的形状</span><br><span class="line">for(int x&#x3D;0; x&lt;5; x++) &#123;</span><br><span class="line">for(int y&#x3D;0; y&lt;5; y++) &#123;</span><br><span class="line">System.out.print(&quot;*&quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;--------------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;我们实现了一个5行5列的形状</span><br><span class="line">&#x2F;&#x2F;但是这不是我们想要的</span><br><span class="line">&#x2F;&#x2F;我们要的是列数变化的</span><br><span class="line">&#x2F;&#x2F;列数是如何变化的呢?</span><br><span class="line">&#x2F;&#x2F;第一行：1列y&#x3D;0,y&lt;&#x3D;0,y++</span><br><span class="line">&#x2F;&#x2F;第二行：2列y&#x3D;0,y&lt;&#x3D;1,y++</span><br><span class="line">&#x2F;&#x2F;第三行：3列y&#x3D;0,y&lt;&#x3D;2,y++</span><br><span class="line">&#x2F;&#x2F;第四行：4列y&#x3D;0,y&lt;&#x3D;3,y++</span><br><span class="line">&#x2F;&#x2F;第五行：5列y&#x3D;0,y&lt;&#x3D;4,y++</span><br><span class="line">&#x2F;&#x2F;在看外循环x的变化，恰好就是x&#x3D;0,1,2,3,4</span><br><span class="line">&#x2F;&#x2F;所以这个最终版的程序就是如下</span><br><span class="line">for(int x&#x3D;0; x&lt;5; x++) &#123;</span><br><span class="line">for(int y&#x3D;0; y&lt;&#x3D;x; y++) &#123;</span><br><span class="line">System.out.print(&quot;*&quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构九九乘法表"><a href="#循环结构九九乘法表" class="headerlink" title="循环结构九九乘法表"></a>循环结构九九乘法表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">需求：在控制台输出九九乘法表。</span><br><span class="line"></span><br><span class="line">首先我们写出九九乘法表：</span><br><span class="line">1*1&#x3D;1</span><br><span class="line">1*2&#x3D;22*2&#x3D;4</span><br><span class="line">1*3&#x3D;32*3&#x3D;63*3&#x3D;9</span><br><span class="line">1*4&#x3D;42*4&#x3D;83*4&#x3D;124*4&#x3D;16</span><br><span class="line">...</span><br><span class="line">1*9&#x3D;92*9&#x3D;183*9&#x3D;27...</span><br><span class="line"></span><br><span class="line">我们先把这个九九乘法表看出是这样的一个形状：</span><br><span class="line">*</span><br><span class="line">**</span><br><span class="line">***</span><br><span class="line">****</span><br><span class="line">*****</span><br><span class="line">******</span><br><span class="line">*******</span><br><span class="line">********</span><br><span class="line">*********</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">&#39;\x&#39; x表示任意，这种做法叫转移字符。</span><br><span class="line"></span><br><span class="line">&#39;\t&#39;tab键的位置</span><br><span class="line">&#39;\r&#39;回车</span><br><span class="line">&#39;\n&#39;换行</span><br><span class="line">*&#x2F;</span><br><span class="line">class ForForDemo3 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">for(int x&#x3D;0; x&lt;9; x++) &#123;</span><br><span class="line">for(int y&#x3D;0; y&lt;&#x3D;x; y++) &#123;</span><br><span class="line">System.out.print(&quot;*&quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;--------------&quot;);</span><br><span class="line">&#x2F;&#x2F;为了使用数据，我们从1开始</span><br><span class="line">for(int x&#x3D;1; x&lt;&#x3D;9; x++) &#123;</span><br><span class="line">for(int y&#x3D;1; y&lt;&#x3D;x; y++) &#123;</span><br><span class="line">System.out.print(y+&quot;*&quot;+x+&quot;&#x3D;&quot;+y*x+&quot;\t&quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制跳转语句break语句"><a href="#控制跳转语句break语句" class="headerlink" title="控制跳转语句break语句"></a>控制跳转语句break语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package stephencurry;</span><br><span class="line">import java.util.*;</span><br><span class="line">import java.math.*;</span><br><span class="line">import java.io.*;</span><br><span class="line">public class Main &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class="line">        Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line">        for(int x&#x3D;0; x&lt;10; x++) &#123;</span><br><span class="line">if(x &#x3D;&#x3D; 3) &#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;over&quot;);</span><br><span class="line">System.out.println(&quot;-------------&quot;);</span><br><span class="line"></span><br><span class="line">wc:for(int x&#x3D;0; x&lt;3; x++) &#123;</span><br><span class="line">nc:for(int y&#x3D;0; y&lt;4; y++) &#123;</span><br><span class="line">if(y &#x3D;&#x3D; 2) &#123;</span><br><span class="line">&#x2F;&#x2F;break nc;</span><br><span class="line">break wc;</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(&quot;*&quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制跳转语句continue语句"><a href="#控制跳转语句continue语句" class="headerlink" title="控制跳转语句continue语句"></a>控制跳转语句continue语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">continue:继续</span><br><span class="line"></span><br><span class="line">使用场景：</span><br><span class="line">循环中。离开此场景无意义。</span><br><span class="line"></span><br><span class="line">测试，找到和break的区别：</span><br><span class="line">break:跳出单层循环</span><br><span class="line">continue:跳出一次循环，进入下一次的执行</span><br><span class="line"></span><br><span class="line">练习题：</span><br><span class="line">for(int x&#x3D;1; x&lt;&#x3D;10; x++) &#123;</span><br><span class="line">if(x%3&#x3D;&#x3D;0) &#123;</span><br><span class="line">&#x2F;&#x2F;在此处填写代码</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(“Java基础班”);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">我想在控制台输出2次:“Java基础班“</span><br><span class="line">break;</span><br><span class="line">我想在控制台输出7次:“Java基础班“</span><br><span class="line">continue;</span><br><span class="line">我想在控制台输出13次:“Java基础班“</span><br><span class="line">System.out.println(“Java基础班”);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line">class ContinueDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">for(int x&#x3D;0; x&lt;10; x++) &#123;</span><br><span class="line">if(x &#x3D;&#x3D; 3) &#123;</span><br><span class="line">&#x2F;&#x2F;break;</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制跳转语句return语句"><a href="#控制跳转语句return语句" class="headerlink" title="控制跳转语句return语句"></a>控制跳转语句return语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">return:返回</span><br><span class="line"></span><br><span class="line">其实它的作用不是结束循环的，而是结束方法的。</span><br><span class="line">*&#x2F;</span><br><span class="line">class ReturnDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">for(int x&#x3D;0; x&lt;10; x++) &#123;</span><br><span class="line">if(x &#x3D;&#x3D; 2) &#123;</span><br><span class="line">System.out.println(&quot;退出&quot;);</span><br><span class="line">&#x2F;&#x2F;break;</span><br><span class="line">&#x2F;&#x2F;continue;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;over&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="while语句和break结合使用之小芳存钱"><a href="#while语句和break结合使用之小芳存钱" class="headerlink" title="while语句和break结合使用之小芳存钱"></a>while语句和break结合使用之小芳存钱</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">需求：小芳的妈妈每天给她2.5元钱，她都会存起来，但是，</span><br><span class="line">      每当这一天是存钱的第5天或者5的倍数的话，她都会花去6元钱，</span><br><span class="line">  请问，经过多少天，小芳才可以存到100元钱。</span><br><span class="line"></span><br><span class="line">分析：</span><br><span class="line">A:小芳的妈妈每天给她2.5元钱</span><br><span class="line">double dayMoney &#x3D; 2.5;</span><br><span class="line">B:她都会存起来</span><br><span class="line">double daySum &#x3D; 0;</span><br><span class="line">C:从第一天开始存储</span><br><span class="line">int dayCount &#x3D; 1;</span><br><span class="line">D:经过多少天，小芳才可以存到100元钱。</span><br><span class="line">double result &#x3D; 100;</span><br><span class="line">E:这一天是存钱的第5天或者5的倍数的话，她都会花去6元钱，</span><br><span class="line">说明要判断dayCount的值，如果对5整除就减去6元钱。</span><br><span class="line">daySum -&#x3D; 6;</span><br><span class="line">  由此还隐含了一个问题，就是如果不是5的倍数天的话，钱要累加</span><br><span class="line">daySum +&#x3D; dayMoney;</span><br><span class="line">F:因为不知道是多少天，所以我用死循环，一旦超过100元我就退出循环。</span><br><span class="line">*&#x2F;</span><br><span class="line">class WhileDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;每天要存储的钱是2.5元</span><br><span class="line">double dayMoney &#x3D; 2.5;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;存钱的初始化值是0</span><br><span class="line">double daySum &#x3D; 0;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;从第一天开始存储</span><br><span class="line">int dayCount &#x3D; 1;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;最终存储不小于100就不存储了</span><br><span class="line">int result &#x3D; 100;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;因为不知道是多少天，所以我用死循环，</span><br><span class="line">while(true) &#123;</span><br><span class="line">&#x2F;&#x2F;累加钱</span><br><span class="line">daySum +&#x3D; dayMoney;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;一旦超过100元我就退出循环。</span><br><span class="line">if(daySum &gt;&#x3D; result) &#123;</span><br><span class="line">System.out.println(&quot;共花了&quot;+dayCount+&quot;天存储了100元&quot;);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(dayCount%5 &#x3D;&#x3D; 0) &#123;</span><br><span class="line">&#x2F;&#x2F;花去6元钱</span><br><span class="line">daySum -&#x3D; 6;</span><br><span class="line">System.out.println(&quot;第&quot;+dayCount+&quot;天花了6元钱&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;天数变化</span><br><span class="line">dayCount++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;选择结构switch语句的格式及其解释&quot;&gt;&lt;a href=&quot;#选择结构switch语句的格式及其解释&quot; class=&quot;headerlink&quot; title=&quot;选择结构switch语句的格式及其解释&quot;&gt;&lt;/a&gt;选择结构switch语句的格式及其解释&lt;/h3&gt;
    
    </summary>
    
    
      <category term="Java系统学习-JavaSE篇" scheme="https://stephencurry6666.github.io/categories/Java%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0-JavaSE%E7%AF%87/"/>
    
    
      <category term="Java系统学习" scheme="https://stephencurry6666.github.io/tags/Java%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>牛客算法周周练6</title>
    <link href="https://stephencurry6666.github.io/2020/05/13/%E7%89%9B%E5%AE%A2%E7%AE%97%E6%B3%95%E5%91%A8%E5%91%A8%E7%BB%836/"/>
    <id>https://stephencurry6666.github.io/2020/05/13/%E7%89%9B%E5%AE%A2%E7%AE%97%E6%B3%95%E5%91%A8%E5%91%A8%E7%BB%836/</id>
    <published>2020-05-13T03:39:36.878Z</published>
    <updated>2020-05-13T08:24:43.827Z</updated>
    
    <content type="html"><![CDATA[<h3 id="A题"><a href="#A题" class="headerlink" title="A题"></a>A题</h3><p>大小各不相同的一队青蛙站在河左岸的石墩（记为A）上，要过到对岸的石墩(记为D)上去。河心有几片菏叶(分别记为Y1…Ym)和几个石墩(分别记为S1…Sn)。图示如下：</p><a id="more"></a><p><img src="https://uploadfiles.nowcoder.com/images/20180701/305473_1530409311818_55A3FDD5552A97D657101D27CE6E2F90" alt="tupian"></p><p>青蛙的站队和移动方法规则如下：</p><p>1． 每只青蛙只能站在荷叶、石墩，或者仅比它大一号的青蛙背上（统称为合法的落脚点）；</p><p>2． 一只青蛙只有背上没有其它青蛙的时候才能够从一个落脚点跳到另一个落脚点；</p><p>3． 青蛙允许从左岸A直接跳到河心的石墩、荷叶和右岸的石墩D上，允许从河心的石墩和荷叶跳到右岸的石墩D上；</p><p>4． 青蛙在河心的石墩之间、荷叶之间以及石墩和荷叶之间可以来回跳动；</p><p>5． 青蛙在离开左岸石墩后，不能再返回左岸；到达右岸后，不能再跳回；</p><p>6． 假定石墩承重能力很大，允许无论多少只青蛙都可呆在上面。但是，由于石墩的面积不大，至多只能有一只青蛙直接站在上面，而其他的青蛙只能依规则1落在比它大一号的青蛙的背上。<br>7． 荷叶不仅面积不大，而且负重能力也有限，至多只能有一只青蛙站在上面。</p><p>8． 每一步只能移动一只青蛙，并且移动后需要满足站队规则；</p><p>9． 在一开始的时候，青蛙均站在A上，最大的一只青蛙直接站在石墩上，而其它的青蛙依规则6站在比其大一号的青蛙的背上。</p><p>青蛙希望最终能够全部移动到D上，并完成站队。</p><p>设河心有m片荷叶和n个石墩，请求出这队青蛙至多有多少只，在满足站队和移动规则的前提下，能从A过到D。</p><p>例如，在m=1且n=1时，河心有一片荷叶（Y1）和一个石墩（S1），此时至多有4只青蛙能够过河（由小到大称为1、2、3、4），过河的一种方法为：</p><p><img src="https://uploadfiles.nowcoder.com/images/20180701/305473_1530409345048_6028F142230141307F51778CA0C5A02F" alt="tupian2"></p><p>输入描述:<br>仅有两行，每一行仅包含一个整数和一个换行/回车符。第一行的数字为河心的石墩数n(0 ≤ N ≤ 25)，第二行为荷叶数m(0 ≤ M ≤ 25)。</p><p>输出描述:<br>仅包含一个数字和一个换行/回车符。该数字为在河心有n个石墩和m片荷叶时，最多能够过河的青蛙的只数。</p><p>输入</p><p>1</p><p>1</p><p>输出</p><p>4</p><p><strong>题意：</strong><br>中文题，不过多叙述题意。</p><p><strong>思路：</strong><br>这道题的话，看起来像汉诺塔，但是汉诺塔可以随意移动，虽然也有一定前提。但是对这个题目来说最要命的约束条件就是到了对面就不能动了。所以我们可以知道一定是重的青蛙先跳去对面。所以我们从几个极端来看。<br>如果给出莲叶数是m，石头数目是n。</p><p>如果n是0，那么最多可以允许m+1个青蛙，m个青蛙填满莲叶，最后一个青蛙跳过去。<br>如果n是1，那么最多允许m+1个青蛙先填满莲叶，在去石头上面过渡，另外的m+1个青蛙根据m=0的情况跳。所以一共 （m + 1）*2。所以我们得出结论：</p><script type="math/tex; mode=display">ans=2^{n}*(m+1)</script><p><strong>AC代码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 100010;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    cout &lt;&lt; (1 &lt;&lt; n) * (m + 1) &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B题"><a href="#B题" class="headerlink" title="B题"></a>B题</h3><p><strong>题意：</strong><br>月月给华华出了一道题，先给你一个式子：$F_{1}=A,F_{2}=B,F_{i}=F_{i-1}+F_{i-2}(i&gt;2)$，然后求$gcd(F_{N},F_{N+1})$。</p><p><strong>思路：</strong><br>这道题的话，考察裴蜀定理,裴蜀定理具体如下：裴蜀定理（或贝祖定理）得名于法国数学家艾蒂安·裴蜀，说明了对任何整数a、b和它们的最大公约数d，关于未知数x和y的线性不定方程（称为裴蜀等式）：若a,b是整数,且$gcd(a,b)=d$，那么对于任意的整数x,y,ax+by都一定是d的倍数，特别地，一定存在整数x,y，使$ax+by=d$成立。由裴蜀定理可知，要求$gcd(F_{N},F_{N+1})$,只要求出$gcd(A,B)$就可以了，这两者是相等的。并且C++函数库中已经封装了_$gcd(a,b)$用来求a与b之间的最大公约数，我们只需要套用就可以了。</p><p><strong>AC代码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 100010;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    ll a, b, n;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; n;</span><br><span class="line">    cout &lt;&lt; __gcd(a, b) &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C题"><a href="#C题" class="headerlink" title="C题"></a>C题</h3><p><strong>题意：</strong><br>Nancy喜欢博弈！<br>Johnson和Nancy得到了一个神奇的多重集合，仅包含一个正整数n，两个人轮流进行操作。<br>一次操作可以将集合中一个数字分解为它的任意两个非1的因数，并加入集合中。<br>他们想知道，在Johnson和Nancy绝顶聪明的情况下，如果Nancy先手进行操作，最后谁没有办法继续操作了呢？</p><p><strong>思路：</strong><br>这道题的话，每次操作可以将集合中的一个数字分解为它的任意两个非1的因数, 集合中的数字个数+1。因为质因数是无法再被分解的,所以最后集合中的数全为 n 的质因数。因此只需要看题目给定的n有多少个质因数。假设n有p个质因数，那么这场游戏将进行p-1次操作（每次操作后集合中的数字个数+1），如果p-1为奇数那么后手便无法再进行操作，如果p-1为偶数则先手再无法进行操作。所以我们只要筛一下素数就行了。最后$n==1$的情况要判断一下。</p><p><strong>AC代码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 100010;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    if (n &#x3D;&#x3D; 1)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;Nancy&quot; &lt;&lt; endl;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    int ans &#x3D; 0;</span><br><span class="line">    for (int i &#x3D; 2; i &lt;&#x3D; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        while (n % i &#x3D;&#x3D; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            n &#x2F;&#x3D; i;</span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (ans % 2 !&#x3D; 0)</span><br><span class="line">        cout &lt;&lt; &quot;Nancy&quot; &lt;&lt; endl;</span><br><span class="line">    else</span><br><span class="line">        cout &lt;&lt; &quot;Johnson&quot; &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="D题"><a href="#D题" class="headerlink" title="D题"></a>D题</h3><p><strong>题意：</strong><br>胡队长带领HA实验的战士们玩真人CS，真人CS的地图由一些据点组成，现在胡队长已经占领了n个据点，为了方便，将他们编号为1~n，为了隐蔽，胡队长命令战士们在每个据点出挖一个坑，让战士们躲在坑里。由于需要在任意两个点之间传递信息，两个坑之间必须挖出至少一条通路，而挖沟是一件很麻烦的差事，所以胡队长希望挖出数量尽可能少的沟，使得任意两个据点之间有至少一条通路，顺便，尽可能的$\sum d[i][j]$使最小（其中$d[i][j]$为据点i到j的距离）。</p><p><strong>思路：</strong><br>这道题的话，就是一道裸的最小生成树，直接做就可以了。</p><p><strong>AC代码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 100010;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">using namespace std;</span><br><span class="line">struct node</span><br><span class="line">&#123;</span><br><span class="line">    int s;</span><br><span class="line">    int e;</span><br><span class="line">    int v;</span><br><span class="line">&#125; edge[maxx*5];</span><br><span class="line">bool cmp(node a, node b)</span><br><span class="line">&#123;</span><br><span class="line">    return a.v &lt; b.v;</span><br><span class="line">&#125;</span><br><span class="line">int pre[maxx];</span><br><span class="line">int n, m;</span><br><span class="line">void init()</span><br><span class="line">&#123;</span><br><span class="line">    for (int i &#x3D; 0; i &lt;&#x3D; n; i++)</span><br><span class="line">        pre[i] &#x3D; i;</span><br><span class="line">&#125;</span><br><span class="line">int getf(int a)</span><br><span class="line">&#123;</span><br><span class="line">    if (pre[a] &#x3D;&#x3D; a)</span><br><span class="line">        return a;</span><br><span class="line">    int tmp &#x3D; getf(pre[a]);</span><br><span class="line">    return pre[a] &#x3D; tmp;</span><br><span class="line">&#125;</span><br><span class="line">int Kruskal(int a, int b)</span><br><span class="line">&#123;</span><br><span class="line">    int fa &#x3D; getf(a);</span><br><span class="line">    int fb &#x3D; getf(b);</span><br><span class="line">    if (fa !&#x3D; fb)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[fa] &#x3D; fb;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">        return 0;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    while (cin &gt;&gt; n &gt;&gt; m)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; m; i++)</span><br><span class="line">            cin &gt;&gt; edge[i].s &gt;&gt; edge[i].e &gt;&gt; edge[i].v;</span><br><span class="line">        sort(edge + 1, edge + m + 1, cmp);</span><br><span class="line">        int ans &#x3D; 0;</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (Kruskal(edge[i].s, edge[i].e))</span><br><span class="line">                ans +&#x3D; edge[i].v;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E题"><a href="#E题" class="headerlink" title="E题"></a>E题</h3><p><strong>题意：</strong><br>这道题给你了一些代码，让你补全。</p><p><strong>思路：</strong><br>这道题的话，看完代码后不难看出是求的线段树，所以我们按要求补全即可。</p><p><strong>AC代码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;climits&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;cstdlib&gt;</span><br><span class="line">#include &lt;ctime&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">#define fi first</span><br><span class="line">#define lc (x &lt;&lt; 1)</span><br><span class="line">#define se second</span><br><span class="line">#define U unsigned</span><br><span class="line">#define rc (x &lt;&lt; 1 | 1)</span><br><span class="line">#define Re register</span><br><span class="line">#define LL long long</span><br><span class="line">#define MP std::make_pair</span><br><span class="line">#define CLR(i, a) memset(i, a, sizeof(i))</span><br><span class="line">#define FOR(i, a, b) for (Re int i &#x3D; a; i &lt;&#x3D; b; ++i)</span><br><span class="line">#define ROF(i, a, b) for (Re int i &#x3D; a; i &gt;&#x3D; b; --i)</span><br><span class="line">#define SFOR(i, a, b, c) for (Re int i &#x3D; a; i &lt;&#x3D; b; i +&#x3D; c)</span><br><span class="line">#define SROF(i, a, b, c) for (Re int i &#x3D; a; i &gt;&#x3D; b; i -&#x3D; c)</span><br><span class="line">#define DEBUG(x) std::cerr &lt;&lt; #x &lt;&lt; &#39;&#x3D;&#39; &lt;&lt; x &lt;&lt; std::endl</span><br><span class="line">const int MAXN &#x3D; 1000000 + 5;</span><br><span class="line">int N, maxL;</span><br><span class="line">std::set&lt;std::pair&lt;int, int&gt;&gt; L;</span><br><span class="line">int a[MAXN];</span><br><span class="line">inline int calc()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 返回 set 中所有线段的并长度。(每个 pair 表示一个线段[first,second]</span><br><span class="line">    int ans &#x3D; 0;</span><br><span class="line">    for (int i &#x3D; 1; i &lt;&#x3D; maxL; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if (a[i])</span><br><span class="line">            ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    scanf(&quot;%d%d&quot;, &amp;N, &amp;maxL);</span><br><span class="line">    while (N--)</span><br><span class="line">    &#123;</span><br><span class="line">        int opt, x, y;</span><br><span class="line">        scanf(&quot;%d%d%d&quot;, &amp;opt, &amp;x, &amp;y);</span><br><span class="line">        if (opt &#x3D;&#x3D; 1)</span><br><span class="line">        &#123;</span><br><span class="line">            if (L.find(MP(x, y)) !&#x3D; L.end())</span><br><span class="line">                continue;</span><br><span class="line">            L.insert(MP(x, y));</span><br><span class="line">            for (int i &#x3D; x; i &lt;&#x3D; y; i++)</span><br><span class="line">                a[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">        if (opt &#x3D;&#x3D; 2)</span><br><span class="line">        &#123;</span><br><span class="line">            if (L.find(MP(x, y)) &#x3D;&#x3D; L.end())</span><br><span class="line">                continue;</span><br><span class="line">            L.erase(MP(x, y));</span><br><span class="line">            for (int i &#x3D; x; i &lt;&#x3D; y; i++)</span><br><span class="line">                a[i]--;</span><br><span class="line">        &#125;</span><br><span class="line">        if (opt &#x3D;&#x3D; 3)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;%d\n&quot;, calc());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;A题&quot;&gt;&lt;a href=&quot;#A题&quot; class=&quot;headerlink&quot; title=&quot;A题&quot;&gt;&lt;/a&gt;A题&lt;/h3&gt;&lt;p&gt;大小各不相同的一队青蛙站在河左岸的石墩（记为A）上，要过到对岸的石墩(记为D)上去。河心有几片菏叶(分别记为Y1…Ym)和几个石墩(分别记为S1…Sn)。图示如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="牛客题解" scheme="https://stephencurry6666.github.io/categories/%E7%89%9B%E5%AE%A2%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="牛客题解" scheme="https://stephencurry6666.github.io/tags/%E7%89%9B%E5%AE%A2%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE-Day(3)学习笔记</title>
    <link href="https://stephencurry6666.github.io/2020/05/12/JavaSE-Day(3)%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://stephencurry6666.github.io/2020/05/12/JavaSE-Day(3)%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-05-12T09:38:34.083Z</published>
    <updated>2020-05-12T12:39:14.882Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据类型中补充的几个小问题"><a href="#数据类型中补充的几个小问题" class="headerlink" title="数据类型中补充的几个小问题"></a>数据类型中补充的几个小问题</h2><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">1:在定义Long或者Float类型变量的时候，要加L或者f。</span><br><span class="line">  整数默认是int类型，浮点数默认是double。</span><br><span class="line">  </span><br><span class="line">  byte，short在定义的时候，他们接收的其实是一个int类型的值。</span><br><span class="line">  这个是自己做了一个数据检测的，如果不再它们的范围内，就报错。</span><br><span class="line">  </span><br><span class="line">2:byte值的问题</span><br><span class="line">byte b1 &#x3D; 127;</span><br><span class="line">byte b2 &#x3D; (byte)128; &#x2F;&#x2F;-128</span><br><span class="line">byte b3 &#x3D; (byte)129; &#x2F;&#x2F;-127</span><br><span class="line">byte b4 &#x3D; (byte)130; &#x2F;&#x2F;-126</span><br><span class="line"></span><br><span class="line">byte的范围：-128 ~ 127</span><br><span class="line"></span><br><span class="line">128：10000000</span><br><span class="line">-128：10000000 (这里的1即是符号位，也是数值位)</span><br><span class="line"></span><br><span class="line">3:数据类型转换之默认转换</span><br><span class="line">byte,short,char -- int -- long -- float -- double</span><br><span class="line"></span><br><span class="line">long: 8个字节</span><br><span class="line">float：4个字节</span><br><span class="line"></span><br><span class="line">A:它们底层的存储结构不同。</span><br><span class="line">B:float表示的数据范围比long的范围要大</span><br><span class="line">long：2^63-1</span><br><span class="line">float：3.4*10^38 &gt; 2*10^38 &gt; 2*8^38 &#x3D; 2*2^3^38 &#x3D; 2*2^114 &gt; 2^63-1</span><br><span class="line"></span><br><span class="line">4:Java语言中的字符char可以存储一个中文汉字吗?为什么呢?</span><br><span class="line">可以。因为java语言中的字符占用两个字节。</span><br><span class="line"></span><br><span class="line">Java语言采用的是Unicode编码。</span><br></pre></td></tr></table></figure><h2 id="算术运算符的基本用法"><a href="#算术运算符的基本用法" class="headerlink" title="算术运算符的基本用法"></a>算术运算符的基本用法</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">算术运算符：</span><br><span class="line">+,-,*,&#x2F;,%,++,--</span><br><span class="line"></span><br><span class="line">注意事项：</span><br><span class="line">A:整数相除只能得到整数。如果想得到小数，必须把数据变化为浮点数类型</span><br><span class="line">B:&#x2F;获取的是除法操作的商，%获取的是除法操作的余数</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">class OperatorDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;定义变量</span><br><span class="line">int x &#x3D; 3;  &#x2F;&#x2F;把3赋值给int类型的变量x</span><br><span class="line">int y &#x3D; 4;</span><br><span class="line"></span><br><span class="line">System.out.println(x+y);</span><br><span class="line">System.out.println(x-y);</span><br><span class="line">System.out.println(x*y);</span><br><span class="line">System.out.println(x&#x2F;y); &#x2F;&#x2F;整数相除只能得到整数</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;我就想得到小数，该肿么办呢?</span><br><span class="line">&#x2F;&#x2F;只需要把操作的数据中任意的一个数据变为浮点数</span><br><span class="line">System.out.println(x*1.0&#x2F;y);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;%的应用</span><br><span class="line">System.out.println(x%y); &#x2F;&#x2F;得到的是余数</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算术运算符-和—的使用"><a href="#算术运算符-和—的使用" class="headerlink" title="算术运算符++和—的使用"></a>算术运算符++和—的使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">++,--运算符的使用：</span><br><span class="line">单独使用：</span><br><span class="line">放在操作数的前面和后面效果一样。(这种用法是我们比较常见的)</span><br><span class="line">参与运算使用：</span><br><span class="line">放在操作数的前面，先自增或者自减，然后再参与运算。</span><br><span class="line">放在操作数的后面，先参与运算，再自增或者自减。</span><br><span class="line"></span><br><span class="line">作用：就是对变量进行自增1或者自减1。</span><br><span class="line">*&#x2F;</span><br><span class="line">class OperatorDemo2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;定义两个变量</span><br><span class="line">int x &#x3D; 3;</span><br><span class="line">int y &#x3D; 4;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;字符串的拼接</span><br><span class="line">&#x2F;&#x2F;System.out.println(&quot;x:&quot;+x);</span><br><span class="line">&#x2F;&#x2F;System.out.println(&quot;y:&quot;+y);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;x:&quot;+x+&quot;,y:&quot;+y);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;单独使用</span><br><span class="line">&#x2F;&#x2F;x++;</span><br><span class="line">&#x2F;&#x2F;y--;</span><br><span class="line">++x;</span><br><span class="line">--y;</span><br><span class="line">&#x2F;&#x2F;System.out.println(x);</span><br><span class="line">System.out.println(&quot;x:&quot;+x+&quot;,y:&quot;+y);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;意外的类型,常量是不可以这样做的</span><br><span class="line">&#x2F;&#x2F;System.out.println(10++);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;-------------------&quot;);</span><br><span class="line">&#x2F;&#x2F;参与运算使用</span><br><span class="line">int a &#x3D; 3;</span><br><span class="line">int b &#x3D; 4;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;int c &#x3D; a++;</span><br><span class="line">&#x2F;&#x2F;int d &#x3D; b--;</span><br><span class="line"></span><br><span class="line">int c &#x3D; ++a;</span><br><span class="line">int d &#x3D; --b;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;a:&quot;+a); &#x2F;&#x2F;4, 4</span><br><span class="line">System.out.println(&quot;b:&quot;+b); &#x2F;&#x2F;3, 3</span><br><span class="line">System.out.println(&quot;c:&quot;+c); &#x2F;&#x2F;3, 4</span><br><span class="line">System.out.println(&quot;d:&quot;+d); &#x2F;&#x2F;4, 3</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算术运算符-的多种用法"><a href="#算术运算符-的多种用法" class="headerlink" title="算术运算符+的多种用法"></a>算术运算符+的多种用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">+的用法：</span><br><span class="line">A:加法</span><br><span class="line">B:正号</span><br><span class="line">C:字符串连接符</span><br><span class="line">*&#x2F;</span><br><span class="line">class OperatorDemo3 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;加法</span><br><span class="line">System.out.println(3+4);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;正号</span><br><span class="line">System.out.println(+4);</span><br><span class="line"></span><br><span class="line">System.out.println(&#39;a&#39;);</span><br><span class="line">System.out.println(&#39;a&#39;+1); &#x2F;&#x2F;这里是加法</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;字符串连接符</span><br><span class="line">System.out.println(&quot;hello&quot;+&#39;a&#39;+1);</span><br><span class="line">System.out.println(&#39;a&#39;+1+&quot;hello&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算术运算符-和—的练习"><a href="#算术运算符-和—的练习" class="headerlink" title="算术运算符++和—的练习"></a>算术运算符++和—的练习</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">++,--的练习题</span><br><span class="line"></span><br><span class="line">第一题：</span><br><span class="line">int a &#x3D; 10;</span><br><span class="line">int b &#x3D; 10;</span><br><span class="line">int c &#x3D; 10;</span><br><span class="line"></span><br><span class="line">a &#x3D; b++;</span><br><span class="line">c &#x3D; --a;</span><br><span class="line">b &#x3D; ++a;</span><br><span class="line">a &#x3D; c--;</span><br><span class="line">请分别计算出a,b,c的值</span><br><span class="line"></span><br><span class="line">第二题：</span><br><span class="line">int x &#x3D; 4;</span><br><span class="line">int y &#x3D; (x++)+(++x)+(x*10);</span><br><span class="line">请分别计算出x,y的值</span><br><span class="line">*&#x2F;</span><br><span class="line">class OperatorTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int a &#x3D; 10;</span><br><span class="line">int b &#x3D; 10;</span><br><span class="line">int c &#x3D; 10;</span><br><span class="line"></span><br><span class="line">a &#x3D; b++; &#x2F;&#x2F;a&#x3D;10,b&#x3D;11,c&#x3D;10</span><br><span class="line">c &#x3D; --a; &#x2F;&#x2F;a&#x3D;9,b&#x3D;11,c&#x3D;9</span><br><span class="line">b &#x3D; ++a; &#x2F;&#x2F;a&#x3D;10,b&#x3D;10,c&#x3D;9</span><br><span class="line">a &#x3D; c--; &#x2F;&#x2F;a&#x3D;9,b&#x3D;10,c&#x3D;8</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;a:&quot;+a);</span><br><span class="line">System.out.println(&quot;b:&quot;+b);</span><br><span class="line">System.out.println(&quot;c:&quot;+c);</span><br><span class="line">System.out.println(&quot;--------------&quot;);</span><br><span class="line"></span><br><span class="line">int x &#x3D; 4;</span><br><span class="line">int y &#x3D; (x++)+(++x)+(x*10);</span><br><span class="line">&#x2F;&#x2F;4+6+60</span><br><span class="line">&#x2F;&#x2F;x&#x3D;5,6</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;x:&quot;+x);</span><br><span class="line">System.out.println(&quot;y:&quot;+y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="赋值运算符的基本用法"><a href="#赋值运算符的基本用法" class="headerlink" title="赋值运算符的基本用法"></a>赋值运算符的基本用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">赋值运算符：</span><br><span class="line">基本的赋值运算符：&#x3D;</span><br><span class="line">把&#x3D;右边的数据赋值给左边。</span><br><span class="line"></span><br><span class="line">扩展的赋值运算符：+&#x3D;,-&#x3D;,*&#x3D;,&#x2F;&#x3D;,%&#x3D;</span><br><span class="line">+&#x3D; 把左边和右边做加法，然后赋值给左边。</span><br><span class="line">*&#x2F;</span><br><span class="line">class OperatorDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;定义一个变量</span><br><span class="line">int x &#x3D; 10;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;其他用法</span><br><span class="line">int a,b; </span><br><span class="line">a &#x3D; b &#x3D; 10;</span><br><span class="line">System.out.println(a); </span><br><span class="line">System.out.println(b);</span><br><span class="line">System.out.println(&quot;-----------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义一个变量</span><br><span class="line">int y &#x3D; 10;</span><br><span class="line"></span><br><span class="line">y +&#x3D; 20;</span><br><span class="line"></span><br><span class="line">System.out.println(y);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="赋值运算符的面试题"><a href="#赋值运算符的面试题" class="headerlink" title="赋值运算符的面试题"></a>赋值运算符的面试题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">面试题：</span><br><span class="line">short s&#x3D;1;s &#x3D; s+1; </span><br><span class="line"></span><br><span class="line">short s&#x3D;1;s+&#x3D;1;</span><br><span class="line">上面两个代码有没有问题，如果有，那里有问题。</span><br><span class="line"></span><br><span class="line">为什么第二个木有问题呢?</span><br><span class="line">扩展的赋值运算符其实隐含了一个强制类型转换。</span><br><span class="line"></span><br><span class="line">s +&#x3D; 1;</span><br><span class="line">不是等价于 s &#x3D; s + 1;</span><br><span class="line">而是等价于 s &#x3D; (s的数据类型)(s + 1);</span><br><span class="line">*&#x2F;</span><br><span class="line">class OperatorTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;short s &#x3D; 1;</span><br><span class="line">&#x2F;&#x2F;s &#x3D; s + 1;</span><br><span class="line">&#x2F;&#x2F;System.out.println(s);</span><br><span class="line"></span><br><span class="line">short s &#x3D; 1;</span><br><span class="line">s +&#x3D; 1; &#x2F;&#x2F;好像是 s &#x3D; s + 1;</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="比较运算符的基本用法及其注意事项"><a href="#比较运算符的基本用法及其注意事项" class="headerlink" title="比较运算符的基本用法及其注意事项"></a>比较运算符的基本用法及其注意事项</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">比较运算符：</span><br><span class="line">&#x3D;&#x3D;,!&#x3D;,&gt;,&gt;&#x3D;,&lt;,&lt;&#x3D;</span><br><span class="line"></span><br><span class="line">特点：</span><br><span class="line">无论你的操作是简单还是复杂，结果是boolean类型。</span><br><span class="line"></span><br><span class="line">注意事项：</span><br><span class="line">&quot;&#x3D;&#x3D;&quot;不能写成&quot;&#x3D;&quot;。</span><br><span class="line">*&#x2F;</span><br><span class="line">class OperatorDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int x &#x3D; 3;</span><br><span class="line">int y &#x3D; 4;</span><br><span class="line">int z &#x3D; 3;</span><br><span class="line"></span><br><span class="line">System.out.println(x &#x3D;&#x3D; y);</span><br><span class="line">System.out.println(x &#x3D;&#x3D; z);</span><br><span class="line">System.out.println((x+y) &#x3D;&#x3D; (x+z));</span><br><span class="line">System.out.println(&quot;------------&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(x !&#x3D; y);</span><br><span class="line">System.out.println(x &gt; y);</span><br><span class="line">System.out.println(x &gt;&#x3D; y);</span><br><span class="line">System.out.println(x &lt; y);</span><br><span class="line">System.out.println(x &lt;&#x3D; y);</span><br><span class="line">System.out.println(&quot;------------&quot;);</span><br><span class="line"></span><br><span class="line">int a &#x3D; 10;</span><br><span class="line">int b &#x3D; 20;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;boolean flag &#x3D; (a &#x3D;&#x3D; b);</span><br><span class="line">&#x2F;&#x2F;boolean flag &#x3D; (a &#x3D; b); &#x2F;&#x2F;这个是有问题的，不兼容的类型</span><br><span class="line">&#x2F;&#x2F;System.out.println(flag);</span><br><span class="line"></span><br><span class="line">int c &#x3D; (a &#x3D; b); &#x2F;&#x2F;把b赋值给a，然后把a留下来</span><br><span class="line">System.out.println(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逻辑运算符的基本用法"><a href="#逻辑运算符的基本用法" class="headerlink" title="逻辑运算符的基本用法"></a>逻辑运算符的基本用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">逻辑运算符：</span><br><span class="line">&amp;,|,^,!</span><br><span class="line">&amp;&amp;,||</span><br><span class="line"></span><br><span class="line">特点：</span><br><span class="line">逻辑运算符一般用于连接boolean类型的表达式或者值。</span><br><span class="line"></span><br><span class="line">表达式：就是用运算符把常量或者变量连接起来的符合java语法的式子。</span><br><span class="line">算术表达式：a + b</span><br><span class="line">比较表达式：a &#x3D;&#x3D; b</span><br><span class="line"></span><br><span class="line">结论：</span><br><span class="line">&amp;逻辑与:有false则false。</span><br><span class="line">|逻辑或:有true则true。</span><br><span class="line">^逻辑异或:相同为false，不同为true。</span><br><span class="line">举例：情侣关系。男男,男女,女男,女女</span><br><span class="line">!逻辑非:非false则true，非true则false。</span><br><span class="line">特点：偶数个不改变本身。</span><br><span class="line">*&#x2F;</span><br><span class="line">class OperatorDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int a &#x3D; 3;</span><br><span class="line">int b &#x3D; 4;</span><br><span class="line">int c &#x3D; 5;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&amp;逻辑与</span><br><span class="line">System.out.println((a &gt; b) &amp; (a &gt; c)); &#x2F;&#x2F;false &amp; false &#x3D; false</span><br><span class="line">System.out.println((a &gt; b) &amp; (a &lt; c)); &#x2F;&#x2F;false &amp; true &#x3D; false</span><br><span class="line">System.out.println((a &lt; b) &amp; (a &gt; c)); &#x2F;&#x2F;true &amp; false &#x3D; false</span><br><span class="line">System.out.println((a &lt; b) &amp; (a &lt; c)); &#x2F;&#x2F;true &amp; true &#x3D; true</span><br><span class="line">System.out.println(&quot;---------------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;|逻辑或</span><br><span class="line">System.out.println((a &gt; b) | (a &gt; c)); &#x2F;&#x2F;false | false &#x3D; false</span><br><span class="line">System.out.println((a &gt; b) | (a &lt; c)); &#x2F;&#x2F;false | true &#x3D; true</span><br><span class="line">System.out.println((a &lt; b) | (a &gt; c)); &#x2F;&#x2F;true | false &#x3D; true</span><br><span class="line">System.out.println((a &lt; b) | (a &lt; c)); &#x2F;&#x2F;true | true &#x3D; true</span><br><span class="line">System.out.println(&quot;---------------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;^逻辑异或</span><br><span class="line">System.out.println((a &gt; b) ^ (a &gt; c)); &#x2F;&#x2F;false ^ false &#x3D; false</span><br><span class="line">System.out.println((a &gt; b) ^ (a &lt; c)); &#x2F;&#x2F;false ^ true &#x3D; true</span><br><span class="line">System.out.println((a &lt; b) ^ (a &gt; c)); &#x2F;&#x2F;true ^ false &#x3D; true</span><br><span class="line">System.out.println((a &lt; b) ^ (a &lt; c)); &#x2F;&#x2F;true ^ true &#x3D; false</span><br><span class="line">System.out.println(&quot;---------------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;!逻辑非</span><br><span class="line">System.out.println(!(a &gt; b)); &#x2F;&#x2F;!false &#x3D; true</span><br><span class="line">System.out.println(!(a &lt; b)); &#x2F;&#x2F;!true &#x3D; false</span><br><span class="line">System.out.println(!!(a &gt; b)); &#x2F;&#x2F;!!false &#x3D; false</span><br><span class="line">System.out.println(!!!(a &gt; b)); &#x2F;&#x2F;!!false &#x3D; true</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逻辑运算符-amp-amp-和-amp-的区别"><a href="#逻辑运算符-amp-amp-和-amp-的区别" class="headerlink" title="逻辑运算符&amp;&amp;和&amp;的区别"></a>逻辑运算符&amp;&amp;和&amp;的区别</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">&amp;&amp;和&amp;的区别? 同理||和|的区别?</span><br><span class="line">A:最终结果一样。</span><br><span class="line">B:&amp;&amp;具有短路效果。左边是false，右边不执行。</span><br><span class="line">C:||具有短路效果，左边是true，右边不执行。</span><br><span class="line"></span><br><span class="line">开发中常用的逻辑运算符：</span><br><span class="line">&amp;&amp;,||,!</span><br><span class="line">*&#x2F;</span><br><span class="line">class OperatorDemo2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int a &#x3D; 3;</span><br><span class="line">int b &#x3D; 4;</span><br><span class="line">int c &#x3D; 5;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&amp;&amp;双与</span><br><span class="line">System.out.println((a &gt; b) &amp;&amp; (a &gt; c)); &#x2F;&#x2F;false &amp;&amp; false &#x3D; false</span><br><span class="line">System.out.println((a &gt; b) &amp;&amp; (a &lt; c)); &#x2F;&#x2F;false &amp;&amp; true &#x3D; false</span><br><span class="line">System.out.println((a &lt; b) &amp;&amp; (a &gt; c)); &#x2F;&#x2F;true &amp;&amp; false &#x3D; false</span><br><span class="line">System.out.println((a &lt; b) &amp;&amp; (a &lt; c)); &#x2F;&#x2F;true &amp;&amp; true &#x3D; true</span><br><span class="line">System.out.println(&quot;----------------&quot;);</span><br><span class="line"></span><br><span class="line">int x &#x3D; 3;</span><br><span class="line">int y &#x3D; 4;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;boolean b1 &#x3D; ((x++ &#x3D;&#x3D; 3) &amp; (y++ &#x3D;&#x3D; 4));</span><br><span class="line">&#x2F;&#x2F;boolean b1 &#x3D; ((x++ &#x3D;&#x3D; 3) &amp;&amp; (y++ &#x3D;&#x3D; 4));</span><br><span class="line">&#x2F;&#x2F;boolean b1 &#x3D; ((++x &#x3D;&#x3D; 3) &amp; (y++ &#x3D;&#x3D; 4));</span><br><span class="line">boolean b1 &#x3D; ((++x &#x3D;&#x3D; 3) &amp;&amp; (y++ &#x3D;&#x3D; 4));</span><br><span class="line">System.out.println(&quot;x:&quot;+x);</span><br><span class="line">System.out.println(&quot;y:&quot;+y);</span><br><span class="line">System.out.println(b1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="位运算的基本用法1"><a href="#位运算的基本用法1" class="headerlink" title="位运算的基本用法1"></a>位运算的基本用法1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">位运算符：</span><br><span class="line">&amp;,|,^,~</span><br><span class="line">&lt;&lt;,&gt;&gt;,&gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">要做位运算，首先要把数据转换为二进制。</span><br><span class="line">*&#x2F;</span><br><span class="line">class OperatorDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;&amp;,|,^,~</span><br><span class="line"></span><br><span class="line">int a &#x3D; 3;</span><br><span class="line">int b &#x3D; 4;</span><br><span class="line"></span><br><span class="line">System.out.println(3 &amp; 4);</span><br><span class="line">System.out.println(3 | 4);</span><br><span class="line">System.out.println(3 ^ 4);</span><br><span class="line">System.out.println(~3);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">分析：因为是位运算，所以我们必须先把数据换算成二进制。</span><br><span class="line"></span><br><span class="line">3的二进制：11</span><br><span class="line">00000000 00000000 00000000 00000011</span><br><span class="line">4的二进制：100</span><br><span class="line">00000000 00000000 00000000 00000100</span><br><span class="line"></span><br><span class="line">&amp;位与运算：有0则0。</span><br><span class="line">00000000 00000000 00000000 00000011</span><br><span class="line">   &amp;00000000 00000000 00000000 00000100</span><br><span class="line">-----------------------------------</span><br><span class="line">00000000 00000000 00000000 00000000</span><br><span class="line">结果是：0</span><br><span class="line"></span><br><span class="line">|位或运算：有1则1。</span><br><span class="line">00000000 00000000 00000000 00000011</span><br><span class="line">   |00000000 00000000 00000000 00000100</span><br><span class="line">-----------------------------------</span><br><span class="line">00000000 00000000 00000000 00000111</span><br><span class="line">结果是：7</span><br><span class="line"></span><br><span class="line">^位异或运算：相同则0，不同则1。</span><br><span class="line">00000000 00000000 00000000 00000011</span><br><span class="line">   &amp;00000000 00000000 00000000 00000100</span><br><span class="line">-----------------------------------</span><br><span class="line">00000000 00000000 00000000 00000111</span><br><span class="line">结果是：7</span><br><span class="line"></span><br><span class="line">~按位取反运算符：0变1，1变0</span><br><span class="line">00000000 00000000 00000000 00000011</span><br><span class="line">   ~11111111 11111111 11111111 11111100 (补码)</span><br><span class="line">   </span><br><span class="line">   补码：11111111 11111111 11111111 11111100</span><br><span class="line">   反码：11111111 11111111 11111111 11111011</span><br><span class="line">   原码：10000000 00000000 00000000 00000100</span><br><span class="line">结果是：-4</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="位异或运算符的特点"><a href="#位异或运算符的特点" class="headerlink" title="位异或运算符的特点"></a>位异或运算符的特点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">^的特点：一个数据对另一个数据位异或两次，该数本身不变。</span><br><span class="line">*&#x2F;</span><br><span class="line">class OperatorDemo2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int a &#x3D; 10;</span><br><span class="line">int b &#x3D; 20;</span><br><span class="line"></span><br><span class="line">System.out.println(a ^ b ^ b); &#x2F;&#x2F;10</span><br><span class="line">System.out.println(a ^ b ^ a); &#x2F;&#x2F;20</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="位运算的面试题"><a href="#位运算的面试题" class="headerlink" title="位运算的面试题"></a>位运算的面试题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">面试题：</span><br><span class="line">请自己实现两个整数变量的交换</span><br><span class="line">注意：以后讲课的过程中，我没有明确指定数据的类型，默认int类型。</span><br><span class="line">*&#x2F;</span><br><span class="line">class OperatorTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int a &#x3D; 10;</span><br><span class="line">int b &#x3D; 20;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;a:&quot;+a+&quot;,b:&quot;+b);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;方式1：使用第三方变量(开发中用的)</span><br><span class="line">&#x2F;*</span><br><span class="line">int c &#x3D; a;</span><br><span class="line">a &#x3D; b;</span><br><span class="line">b &#x3D; c;</span><br><span class="line">System.out.println(&quot;a:&quot;+a+&quot;,b:&quot;+b);</span><br><span class="line">System.out.println(&quot;------------&quot;);</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;方式2：用位异或实现(面试用)</span><br><span class="line">&#x2F;&#x2F;左边：a,b,a</span><br><span class="line">&#x2F;&#x2F;右边：a ^ b</span><br><span class="line">&#x2F;*</span><br><span class="line">a &#x3D; a ^ b;</span><br><span class="line">b &#x3D; a ^ b; &#x2F;&#x2F;a ^ b ^ b &#x3D; a</span><br><span class="line">a &#x3D; a ^ b; &#x2F;&#x2F;a ^ b ^ a &#x3D; b</span><br><span class="line">System.out.println(&quot;a:&quot;+a+&quot;,b:&quot;+b);</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;方式3：用变量相加的做法</span><br><span class="line">&#x2F;*</span><br><span class="line">a &#x3D; a + b; &#x2F;&#x2F;a&#x3D;30</span><br><span class="line">b &#x3D; a - b; &#x2F;&#x2F;b&#x3D;10</span><br><span class="line">a &#x3D; a - b; &#x2F;&#x2F;a&#x3D;20</span><br><span class="line">System.out.println(&quot;a:&quot;+a+&quot;,b:&quot;+b);</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;方式4：一句话搞定</span><br><span class="line">b &#x3D; (a+b) - (a&#x3D;b); &#x2F;&#x2F;b&#x3D;30-20&#x3D;10,a&#x3D;20</span><br><span class="line">System.out.println(&quot;a:&quot;+a+&quot;,b:&quot;+b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="位运算的基本用法2及面试题"><a href="#位运算的基本用法2及面试题" class="headerlink" title="位运算的基本用法2及面试题"></a>位运算的基本用法2及面试题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">&lt;&lt;:左移左边最高位丢弃，右边补齐0</span><br><span class="line">&gt;&gt;:右移最高位是0，左边补齐0；最高为是1，左边补齐1</span><br><span class="line">&gt;&gt;&gt;:无符号右移 无论最高位是0还是1，左边补齐0</span><br><span class="line"></span><br><span class="line">面试题：</span><br><span class="line">请用最有效率的方式写出计算2乘以8的结果?</span><br><span class="line">2 * 8</span><br><span class="line"></span><br><span class="line">2 &lt;&lt; 3</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line">class OperatorDemo3 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;&lt;&lt; 把&lt;&lt;左边的数据乘以2的移动次幂</span><br><span class="line">System.out.println(3 &lt;&lt; 2); &#x2F;&#x2F;3*2^2 &#x3D; 3*4 &#x3D; 12;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&gt;&gt; 把&gt;&gt;左边的数据除以2的移动次幂</span><br><span class="line">System.out.println(24 &gt;&gt; 2); &#x2F;&#x2F;24 &#x2F; 2^2 &#x3D; 24 &#x2F; 4 &#x3D; 6</span><br><span class="line">System.out.println(24 &gt;&gt;&gt; 2);</span><br><span class="line"></span><br><span class="line">System.out.println(-24 &gt;&gt; 2); </span><br><span class="line">System.out.println(-24 &gt;&gt;&gt; 2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">计算出3的二进制：11</span><br><span class="line">00000000 00000000 00000000 00000011</span><br><span class="line">(00)000000 00000000 00000000 0000001100</span><br><span class="line"></span><br><span class="line">&gt;&gt;的移动：</span><br><span class="line">计算出24的二进制：11000</span><br><span class="line">原码：10000000 00000000 00000000 00011000</span><br><span class="line">反码：11111111 11111111 11111111 11100111</span><br><span class="line">补码：11111111 11111111 11111111 11101000</span><br><span class="line"></span><br><span class="line">11111111 11111111 11111111 11101000</span><br><span class="line">1111111111 11111111 11111111 111010(00) 补码</span><br><span class="line"></span><br><span class="line">补码：1111111111 11111111 11111111 111010</span><br><span class="line">反码：1111111111 11111111 11111111 111001</span><br><span class="line">原码：1000000000 00000000 00000000 000110</span><br><span class="line"></span><br><span class="line">结果：-6</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;的移动：</span><br><span class="line">计算出24的二进制：11000</span><br><span class="line">原码：10000000 00000000 00000000 00011000</span><br><span class="line">反码：11111111 11111111 11111111 11100111</span><br><span class="line">补码：11111111 11111111 11111111 11101000</span><br><span class="line"></span><br><span class="line">11111111 11111111 11111111 11101000</span><br><span class="line">0011111111 11111111 11111111 111010(00)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="三元运算符的基本用法"><a href="#三元运算符的基本用法" class="headerlink" title="三元运算符的基本用法"></a>三元运算符的基本用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">单目运算符：~3</span><br><span class="line">双目运算符：3 + 4</span><br><span class="line"></span><br><span class="line">三目运算符：</span><br><span class="line">格式：比较表达式?表达式1:表达式2;</span><br><span class="line"></span><br><span class="line">比较表达式:结果是一个boolean类型。</span><br><span class="line"></span><br><span class="line">执行流程：</span><br><span class="line">根据比较表达式的计算返回一个true或者false。</span><br><span class="line">如果是true，就把表达式1作为结果。</span><br><span class="line">如果是false，就把表达式2作为结果。</span><br><span class="line">*&#x2F;</span><br><span class="line">class OperatorDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int x &#x3D; 100;</span><br><span class="line">int y &#x3D; 200;</span><br><span class="line"></span><br><span class="line">int z &#x3D; ((x &gt; y)? x: y);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;int z &#x3D; ((x &lt; y)? x: y);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;int z &#x3D; ((x &#x3D;&#x3D; y)? x: y);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;报错</span><br><span class="line">&#x2F;&#x2F;int z &#x3D; ((x &#x3D; y)? x : y);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;z:&quot;+z);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三元运算符的练习"><a href="#三元运算符的练习" class="headerlink" title="三元运算符的练习"></a>三元运算符的练习</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">练习：</span><br><span class="line">获取两个整数中的最大值</span><br><span class="line">获取三个整数中的最大值</span><br><span class="line">比较两个整数是否相同</span><br><span class="line">*&#x2F;</span><br><span class="line">class OperatorTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;获取两个整数中的最大值</span><br><span class="line">int x &#x3D; 100;</span><br><span class="line">int y &#x3D; 200;</span><br><span class="line"></span><br><span class="line">int max &#x3D; (x &gt; y? x: y);</span><br><span class="line">System.out.println(&quot;max:&quot;+max);</span><br><span class="line">System.out.println(&quot;--------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;获取三个整数中的最大值</span><br><span class="line">int a &#x3D; 10;</span><br><span class="line">int b &#x3D; 30;</span><br><span class="line">int c &#x3D; 20;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;分两步：</span><br><span class="line">&#x2F;&#x2F;A:先比较a,b的最大值</span><br><span class="line">&#x2F;&#x2F;B:拿a,b的最大值在和c进行比较</span><br><span class="line">int temp &#x3D; ((a &gt; b)? a: b);</span><br><span class="line">&#x2F;&#x2F;System.out.println(temp);</span><br><span class="line">int max1 &#x3D; (temp &gt; c? temp: c);</span><br><span class="line">System.out.println(&quot;max1:&quot;+max1);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;一步搞定</span><br><span class="line">&#x2F;&#x2F;int max2 &#x3D; (a &gt; b)?((a &gt; c)? a: c):((b &gt; c)? b: c);</span><br><span class="line">&#x2F;&#x2F;这种做法不推荐。</span><br><span class="line">&#x2F;&#x2F;int max2 &#x3D; a &gt; b?a &gt; c? a: c:b &gt; c? b: c;</span><br><span class="line">&#x2F;&#x2F;System.out.println(&quot;max2:&quot;+max2);</span><br><span class="line">System.out.println(&quot;--------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;比较两个整数是否相同</span><br><span class="line">int m &#x3D; 100;</span><br><span class="line">int n &#x3D; 200;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;boolean flag &#x3D; (m &#x3D;&#x3D; n)? true: false;</span><br><span class="line">boolean flag &#x3D; (m &#x3D;&#x3D; n);</span><br><span class="line">System.out.println(flag);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="键盘录入的基本格式讲解"><a href="#键盘录入的基本格式讲解" class="headerlink" title="键盘录入的基本格式讲解"></a>键盘录入的基本格式讲解</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">为了让程序的数据更符合开发的数据，我们就加入了键盘录入。</span><br><span class="line">让程序更灵活一下。</span><br><span class="line"></span><br><span class="line">那么，我们如何实现键盘数据的录入呢?</span><br><span class="line">A:导包</span><br><span class="line">格式：</span><br><span class="line">import java.util.Scanner; </span><br><span class="line">位置：</span><br><span class="line">在class上面。</span><br><span class="line">B:创建键盘录入对象</span><br><span class="line">格式：</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line">C:通过对象获取数据</span><br><span class="line">格式：</span><br><span class="line">int x &#x3D; sc.nextInt();</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">class ScannerDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;创建键盘录入数据对象</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请你输入一个数据：&quot;);</span><br><span class="line">int x &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;你输入的数据是：&quot;+x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="键盘录入的练习1"><a href="#键盘录入的练习1" class="headerlink" title="键盘录入的练习1"></a>键盘录入的练习1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">键盘录入练习：</span><br><span class="line">键盘录入两个数据，并对这两个数据求和，输出其结果</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">class ScannerTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;键盘录入两个数据，并对这两个数据求和，输出其结果</span><br><span class="line">&#x2F;&#x2F;创建键盘录入对象</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入第一个数据：&quot;);</span><br><span class="line">int x &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入第二个数据：&quot;);</span><br><span class="line">int y &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;把键盘录入的数据进行相加即可</span><br><span class="line">int sum &#x3D; (x + y);</span><br><span class="line">System.out.println(&quot;sum:&quot;+sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">键盘录入练习：键盘录入两个数据，获取这两个数据中的最大值</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">class ScannerTest2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;创建键盘录入对象</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入第一个数据：&quot;);</span><br><span class="line">int a &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入第二个数据：&quot;);</span><br><span class="line">int b &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;获取这两个数据中的最大值</span><br><span class="line">int max &#x3D; (a &gt; b? a: b);</span><br><span class="line">System.out.println(&quot;max:&quot;+max);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="键盘录入的练习2"><a href="#键盘录入的练习2" class="headerlink" title="键盘录入的练习2"></a>键盘录入的练习2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">练习：</span><br><span class="line">键盘录入三个数据，获取这三个数据中的最大值</span><br><span class="line">键盘录入两个数据，比较这两个数据是否相等</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">class ScannerTest3 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;键盘录入三个数据，获取这三个数据中的最大值</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;创建键盘录入对象</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入第一个数据：&quot;);</span><br><span class="line">int a &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入第二个数据：&quot;);</span><br><span class="line">int b &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入第三个数据：&quot;);</span><br><span class="line">int c &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;获取这三个数据中的最大值</span><br><span class="line">int temp &#x3D; ((a &gt; b)? a: b);</span><br><span class="line">int max &#x3D; (temp &gt; c? temp : c);</span><br><span class="line">System.out.println(&quot;max:&quot;+max);</span><br><span class="line">System.out.println(&quot;------------------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;键盘录入两个数据</span><br><span class="line">System.out.println(&quot;请输入第一个数据：&quot;);</span><br><span class="line">int x &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入第二个数据：&quot;);</span><br><span class="line">int y &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;比较这两个数据是否相等</span><br><span class="line">boolean flag &#x3D; (x &#x3D;&#x3D; y);</span><br><span class="line">System.out.println(&quot;flag:&quot;+flag);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="顺序结构语句"><a href="#顺序结构语句" class="headerlink" title="顺序结构语句"></a>顺序结构语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">流程控制语句：可以控制程序的执行流程。</span><br><span class="line"></span><br><span class="line">分类：</span><br><span class="line">顺序结构</span><br><span class="line">选择结构</span><br><span class="line">循环结构</span><br><span class="line"></span><br><span class="line">顺序结构：</span><br><span class="line">从上往下，依次执行。</span><br><span class="line">*&#x2F;</span><br><span class="line">class ShunXuJieGouDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">System.out.println(&quot;程序开始了&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;我爱Java&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;程序结束了&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择结构if语句格式1"><a href="#选择结构if语句格式1" class="headerlink" title="选择结构if语句格式1"></a>选择结构if语句格式1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">选择结构：</span><br><span class="line">if语句</span><br><span class="line">switch语句</span><br><span class="line"></span><br><span class="line">if语句：</span><br><span class="line">格式1</span><br><span class="line">格式2</span><br><span class="line">格式3</span><br><span class="line"></span><br><span class="line">if语句的格式：</span><br><span class="line">if(比较表达式) &#123;</span><br><span class="line">语句体;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行流程：</span><br><span class="line">先计算比较表达式的值，看其返回值是true还是false。</span><br><span class="line">如果是true，就执行语句体；</span><br><span class="line">如果是false，就不执行语句体；</span><br><span class="line">*&#x2F;</span><br><span class="line">class IfDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int x &#x3D; 10;</span><br><span class="line"></span><br><span class="line">if(x &#x3D;&#x3D; 10) &#123;</span><br><span class="line">System.out.println(&quot;x等于10&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(x &#x3D;&#x3D; 20) &#123;</span><br><span class="line">System.out.println(&quot;x等于20&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;over&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择结构if语句注意事项"><a href="#选择结构if语句注意事项" class="headerlink" title="选择结构if语句注意事项"></a>选择结构if语句注意事项</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">if语句的注意事项：</span><br><span class="line">A:比较表达式无论简单还是复杂，结果必须是boolean类型</span><br><span class="line">B:if语句控制的语句体如果是一条语句，大括号可以省略；</span><br><span class="line">  如果是多条语句，就不能省略。建议永远不要省略。</span><br><span class="line">C:一般来说：有左大括号就没有分号，有分号就没有左大括号</span><br><span class="line">*&#x2F;</span><br><span class="line">class IfDemo2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int x &#x3D; 10;</span><br><span class="line"></span><br><span class="line">if(x &#x3D;&#x3D; 10) &#123;</span><br><span class="line">System.out.println(&quot;x等于10&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if((x &gt; 5) || (x &#x3D;&#x3D; 10)) &#123;</span><br><span class="line">System.out.println(&quot;x大于或者等于10&quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;-------------------&quot;);</span><br><span class="line"></span><br><span class="line">int a &#x3D; 100;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">if(a &#x3D;&#x3D; 100) &#123;</span><br><span class="line">System.out.println(&quot;a的值是100&quot;);</span><br><span class="line">&#125;</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">if(a !&#x3D; 100) &#123;</span><br><span class="line">System.out.println(&quot;a的值是100&quot;);</span><br><span class="line">System.out.println(&quot;over&quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;-------------------&quot;);</span><br><span class="line"></span><br><span class="line">int b &#x3D; 100;</span><br><span class="line">if(b !&#x3D; 100);  &#x2F;&#x2F;这里其实是有语句体的，只不过是空语句体。</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;代码块</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(&quot;b的值是100&quot;);</span><br><span class="line">System.out.println(&quot;over&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择结构if语句格式2"><a href="#选择结构if语句格式2" class="headerlink" title="选择结构if语句格式2"></a>选择结构if语句格式2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">if语句格式2：</span><br><span class="line">if(比较表达式) &#123;</span><br><span class="line">语句体1;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">语句体2;</span><br><span class="line">&#125;</span><br><span class="line">执行流程：</span><br><span class="line">首先计算比较表达式的值，看其返回值是true还是false。</span><br><span class="line">如果是true，就执行语句体1；</span><br><span class="line">如果是false，就执行语句体2；</span><br><span class="line"></span><br><span class="line">注意：else后面是没有比较表达式的，只有if后面有。</span><br><span class="line">*&#x2F;</span><br><span class="line">class IfDemo3 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;判断两个数据是否相等</span><br><span class="line"></span><br><span class="line">int a &#x3D; 10;</span><br><span class="line">int b &#x3D; 20;</span><br><span class="line"></span><br><span class="line">if(a &#x3D;&#x3D; b) &#123;</span><br><span class="line">System.out.println(&quot;a等于b&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(&quot;a不等于b&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择结构if语句格式2的练习"><a href="#选择结构if语句格式2的练习" class="headerlink" title="选择结构if语句格式2的练习"></a>选择结构if语句格式2的练习</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">if语句格式2的练习：</span><br><span class="line">A:获取两个数据中较大的值</span><br><span class="line">B:判断一个数据是奇数还是偶数,并输出是奇数还是偶数</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">class IfTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;创建键盘录入对象</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;获取两个数据中较大的值</span><br><span class="line">System.out.println(&quot;请输入第一个数据：&quot;);</span><br><span class="line">int a &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入第二个数据：&quot;);</span><br><span class="line">int b &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义一个变量接收最大值</span><br><span class="line">int max;</span><br><span class="line"></span><br><span class="line">if(a &gt; b) &#123;</span><br><span class="line">max &#x3D; a;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">max &#x3D; b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;max:&quot;+max);</span><br><span class="line">System.out.println(&quot;----------------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;判断一个数据是奇数还是偶数</span><br><span class="line">System.out.println(&quot;请输入你要判断的数据：&quot;);</span><br><span class="line">int x &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">if(x%2 &#x3D;&#x3D; 0) &#123;</span><br><span class="line">System.out.println(x+&quot;这个数据是偶数&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(x+&quot;这个数据是奇数&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="if语句的格式2和三元的相互转换问题"><a href="#if语句的格式2和三元的相互转换问题" class="headerlink" title="if语句的格式2和三元的相互转换问题"></a>if语句的格式2和三元的相互转换问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">由于if语句的第二种格式刚才也完成了三元运算符可以完成的效果。</span><br><span class="line">所以，我们就认为他们可以完成一样的操作。</span><br><span class="line">但是，他们就一点区别没有吗?肯定不是。</span><br><span class="line"></span><br><span class="line">区别：</span><br><span class="line">三元运算符实现的，都可以采用if语句实现。反之不成立。</span><br><span class="line"></span><br><span class="line">什么时候if语句实现不能用三元改进呢?</span><br><span class="line">当if语句控制的操作是一个输出语句的时候就不能。</span><br><span class="line">为什么呢?因为三元运算符是一个运算符，运算符操作完毕就应该有一个结果，而不是一个输出。</span><br><span class="line">*&#x2F;</span><br><span class="line">class IfDemo4 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;获取两个数据的最大值</span><br><span class="line">int a &#x3D; 10;</span><br><span class="line">int b &#x3D; 20;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;用if语句实现</span><br><span class="line">int max1;</span><br><span class="line">if(a &gt; b) &#123;</span><br><span class="line">max1 &#x3D; a;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">max1 &#x3D; b;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;max1:&quot;+max1);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;用三元改进</span><br><span class="line">int max2 &#x3D; (a &gt; b)? a: b;</span><br><span class="line">System.out.println(&quot;max2:&quot;+max2);</span><br><span class="line">System.out.println(&quot;----------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;判断一个数据是奇数还是偶数,并输出是奇数还是偶数</span><br><span class="line">int x &#x3D; 100;</span><br><span class="line"></span><br><span class="line">if(x%2 &#x3D;&#x3D; 0) &#123;</span><br><span class="line">System.out.println(&quot;100是一个偶数&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(&quot;100是一个奇数&quot;);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;用三元改进</span><br><span class="line">&#x2F;&#x2F;这种改进是错误的。</span><br><span class="line">&#x2F;&#x2F;String s &#x3D; (x%2 &#x3D;&#x3D; 0)?System.out.println(&quot;100是一个偶数&quot;);:System.out.println(&quot;100是一个奇数&quot;);;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择结构if语句格式3"><a href="#选择结构if语句格式3" class="headerlink" title="选择结构if语句格式3"></a>选择结构if语句格式3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">if语句的格式3：</span><br><span class="line">if(比较表达式1) &#123;</span><br><span class="line">语句体1;</span><br><span class="line">&#125;else if(比较表达式2) &#123;</span><br><span class="line">语句体2;</span><br><span class="line">&#125;else if(比较表达式3) &#123;</span><br><span class="line">语句体3;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">else &#123;</span><br><span class="line">语句体n+1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行流程：</span><br><span class="line">首先计算比较表达式1看其返回值是true还是false，</span><br><span class="line">如果是true，就执行语句体1，if语句结束。</span><br><span class="line">如果是false，接着计算比较表达式2看其返回值是true还是false，</span><br><span class="line"></span><br><span class="line">如果是true，就执行语句体2，if语句结束。</span><br><span class="line">如果是false，接着计算比较表达式3看其返回值是true还是false，</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">如果都是false，就执行语句体n+1。</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">class IfDemo5 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;需求：键盘录入一个成绩，判断并输出成绩的等级。</span><br><span class="line">&#x2F;*</span><br><span class="line">90-100 优秀</span><br><span class="line">80-90  好</span><br><span class="line">70-80  良</span><br><span class="line">60-70  及格</span><br><span class="line">0-60   不及格</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;创建键盘录入对象</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;录入数据</span><br><span class="line">System.out.println(&quot;请输入你的考试成绩：&quot;);</span><br><span class="line">int score &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">if(score&gt;&#x3D;90 &amp;&amp; score&lt;&#x3D;100) &#123;</span><br><span class="line">System.out.println(&quot;优秀&quot;);</span><br><span class="line">&#125;else if(score&gt;&#x3D;80 &amp;&amp; score&lt;90) &#123;</span><br><span class="line">System.out.println(&quot;好&quot;);</span><br><span class="line">&#125;else if(score&gt;&#x3D;70 &amp;&amp; score&lt;80) &#123;</span><br><span class="line">System.out.println(&quot;良&quot;);</span><br><span class="line">&#125;else if(score&gt;&#x3D;60 &amp;&amp; score&lt;70) &#123;</span><br><span class="line">System.out.println(&quot;及格&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(&quot;不及格&quot;);</span><br><span class="line">&#125;</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F;这样写已经满足我的基本要求，但是可能别人在使用的时候，不会按照你要求的数据给出了。</span><br><span class="line">&#x2F;&#x2F;在做一个程序的基本测试的时候，一定要考虑这样的几个问题：</span><br><span class="line">&#x2F;&#x2F;正确数据，错误数据，边界数据。</span><br><span class="line">&#x2F;&#x2F;而我们刚才写的程序并没有处理错误数据，所以这个程序不是很好，要改进</span><br><span class="line">&#x2F;*</span><br><span class="line">if(score&gt;&#x3D;90 &amp;&amp; score&lt;&#x3D;100) &#123;</span><br><span class="line">System.out.println(&quot;优秀&quot;);</span><br><span class="line">&#125;else if(score&gt;&#x3D;80 &amp;&amp; score&lt;90) &#123;</span><br><span class="line">System.out.println(&quot;好&quot;);</span><br><span class="line">&#125;else if(score&gt;&#x3D;70 &amp;&amp; score&lt;80) &#123;</span><br><span class="line">System.out.println(&quot;良&quot;);</span><br><span class="line">&#125;else if(score&gt;&#x3D;60 &amp;&amp; score&lt;70) &#123;</span><br><span class="line">System.out.println(&quot;及格&quot;);</span><br><span class="line">&#125;else if(score&gt;&#x3D;0 &amp;&amp; score&lt;60)&#123;</span><br><span class="line">System.out.println(&quot;不及格&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(&quot;你输入的成绩有误&quot;);</span><br><span class="line">&#125;</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;另一种判断改进</span><br><span class="line">if(score&lt;0 || score&gt;100) &#123;</span><br><span class="line">System.out.println(&quot;你输入的成绩有误&quot;);</span><br><span class="line">&#125;else if(score&gt;&#x3D;90 &amp;&amp; score&lt;&#x3D;100) &#123;</span><br><span class="line">System.out.println(&quot;优秀&quot;);</span><br><span class="line">&#125;else if(score&gt;&#x3D;80 &amp;&amp; score&lt;90) &#123;</span><br><span class="line">System.out.println(&quot;好&quot;);</span><br><span class="line">&#125;else if(score&gt;&#x3D;70 &amp;&amp; score&lt;80) &#123;</span><br><span class="line">System.out.println(&quot;良&quot;);</span><br><span class="line">&#125;else if(score&gt;&#x3D;60 &amp;&amp; score&lt;70) &#123;</span><br><span class="line">System.out.println(&quot;及格&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(&quot;不及格&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择结构if语句格式3的练习"><a href="#选择结构if语句格式3的练习" class="headerlink" title="选择结构if语句格式3的练习"></a>选择结构if语句格式3的练习</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">键盘录入月份的值，输出对应的季节。</span><br><span class="line"></span><br><span class="line">春3,4,5</span><br><span class="line">夏6,7,8</span><br><span class="line">秋9,10,11</span><br><span class="line">冬12,1,2</span><br><span class="line"></span><br><span class="line">分析：</span><br><span class="line">A:键盘录入月份的值，所以我们要使用Scanner。</span><br><span class="line">B:我们应该判断这个月份在那个季节，而这个判断情况较多，所以，用if语句格式3。</span><br><span class="line"></span><br><span class="line">if语句的使用场景：</span><br><span class="line">A:针对表达式是一个boolean类型的判断</span><br><span class="line">B:针对一个范围的判断</span><br><span class="line">*&#x2F;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">class IfTest3 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;创建键盘录入对象</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;录入数据</span><br><span class="line">System.out.println(&quot;请你输入一个月份:&quot;);</span><br><span class="line">int month &#x3D; sc.nextInt();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第三种格式实现即可</span><br><span class="line">if(month&lt;1 || month&gt;12) &#123;</span><br><span class="line">System.out.println(&quot;你输入的月份有误&quot;);</span><br><span class="line">&#125;else if(month &#x3D;&#x3D; 1) &#123;</span><br><span class="line">System.out.println(&quot;冬季&quot;);</span><br><span class="line">&#125;else if(month &#x3D;&#x3D; 2) &#123;</span><br><span class="line">System.out.println(&quot;冬季&quot;);</span><br><span class="line">&#125;else if(month &#x3D;&#x3D; 3) &#123;</span><br><span class="line">System.out.println(&quot;春季&quot;);</span><br><span class="line">&#125;else if(month &#x3D;&#x3D; 4) &#123;</span><br><span class="line">System.out.println(&quot;春季&quot;);</span><br><span class="line">&#125;else if(month &#x3D;&#x3D; 5) &#123;</span><br><span class="line">System.out.println(&quot;春季&quot;);</span><br><span class="line">&#125;else if(month &#x3D;&#x3D; 6) &#123;</span><br><span class="line">System.out.println(&quot;夏季&quot;);</span><br><span class="line">&#125;else if(month &#x3D;&#x3D; 7) &#123;</span><br><span class="line">System.out.println(&quot;夏季&quot;);</span><br><span class="line">&#125;else if(month &#x3D;&#x3D; 8) &#123;</span><br><span class="line">System.out.println(&quot;夏季&quot;);</span><br><span class="line">&#125;else if(month &#x3D;&#x3D; 9) &#123;</span><br><span class="line">System.out.println(&quot;秋季&quot;);</span><br><span class="line">&#125;else if(month &#x3D;&#x3D; 10) &#123;</span><br><span class="line">System.out.println(&quot;秋季&quot;);</span><br><span class="line">&#125;else if(month &#x3D;&#x3D; 11) &#123;</span><br><span class="line">System.out.println(&quot;秋季&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(&quot;冬季&quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;--------------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;这个程序确实是符合了我们的需求，但是就是看起来比较麻烦</span><br><span class="line">&#x2F;&#x2F;那么，我们能不能改进一下呢?</span><br><span class="line">&#x2F;&#x2F;month &#x3D;&#x3D; 3</span><br><span class="line">&#x2F;&#x2F;month &#x3D;&#x3D; 4</span><br><span class="line">&#x2F;&#x2F;month &#x3D;&#x3D; 5</span><br><span class="line">&#x2F;&#x2F;我们发现，上面三个都是春季。</span><br><span class="line">&#x2F;&#x2F;而他们本身每一个都是一个boolean表达式</span><br><span class="line">&#x2F;&#x2F;所以，我们就可以考虑使用逻辑运算符给他们连接起来改进</span><br><span class="line">if(month&lt;1 || month&gt;12) &#123;</span><br><span class="line">System.out.println(&quot;你输入的月份有误&quot;);</span><br><span class="line">&#125;else if(month&#x3D;&#x3D;3 || month&#x3D;&#x3D;4 || month&#x3D;&#x3D;5) &#123;</span><br><span class="line">System.out.println(&quot;春季&quot;);</span><br><span class="line">&#125;else if(month&#x3D;&#x3D;6 || month&#x3D;&#x3D;7 || month&#x3D;&#x3D;8) &#123;</span><br><span class="line">System.out.println(&quot;夏季&quot;);</span><br><span class="line">&#125;else if(month&#x3D;&#x3D;9 || month&#x3D;&#x3D;10 || month&#x3D;&#x3D;11) &#123;</span><br><span class="line">System.out.println(&quot;秋季&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(&quot;冬季&quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;--------------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;这个时候，程序代码以及可以了。</span><br><span class="line">&#x2F;&#x2F;但是呢，假如我要求你输入一个月份，判断是上半年还是下半年。</span><br><span class="line">&#x2F;&#x2F;这个时候，我们的判断条件连接就是6个boolean表达式</span><br><span class="line">&#x2F;&#x2F;我们可能还有更多的连接</span><br><span class="line">&#x2F;&#x2F;这个时候，其实我们还有另外的一种改进方案：</span><br><span class="line">&#x2F;&#x2F;month &#x3D;&#x3D; 3</span><br><span class="line">&#x2F;&#x2F;month &#x3D;&#x3D; 4</span><br><span class="line">&#x2F;&#x2F;month &#x3D;&#x3D; 5</span><br><span class="line">&#x2F;&#x2F;month&gt;&#x3D;3 &amp;&amp; month&lt;&#x3D;5</span><br><span class="line">&#x2F;&#x2F;用范围也是可以改进的。</span><br><span class="line">if(month&lt;1 || month&gt;12) &#123;</span><br><span class="line">System.out.println(&quot;你输入的月份有误&quot;);</span><br><span class="line">&#125;else if(month&gt;&#x3D;3 &amp;&amp; month&lt;&#x3D;5) &#123;</span><br><span class="line">System.out.println(&quot;春季&quot;);</span><br><span class="line">&#125;else if(month&gt;&#x3D;6 &amp;&amp; month&lt;&#x3D;8) &#123;</span><br><span class="line">System.out.println(&quot;夏季&quot;);</span><br><span class="line">&#125;else if(month&gt;&#x3D;9 &amp;&amp; month&lt;&#x3D;11) &#123;</span><br><span class="line">System.out.println(&quot;秋季&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(&quot;冬季&quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;--------------&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择结构if语句的嵌套使用"><a href="#选择结构if语句的嵌套使用" class="headerlink" title="选择结构if语句的嵌套使用"></a>选择结构if语句的嵌套使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">获取三个数据中的最大值</span><br><span class="line"></span><br><span class="line">由此案例主要是为了讲解if语句是可以嵌套使用的。而且是可以任意的嵌套。</span><br><span class="line">*&#x2F;</span><br><span class="line">class IfTest4 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int a &#x3D; 10;</span><br><span class="line">int b &#x3D; 30;</span><br><span class="line">int c &#x3D; 20;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;三元实现</span><br><span class="line">&#x2F;&#x2F;int temp &#x3D; (a&gt;b)? a: b;</span><br><span class="line">&#x2F;&#x2F;int max &#x3D; (temp&gt;c)? temp: c;</span><br><span class="line">&#x2F;&#x2F;System.out.println(&quot;max:&quot;+max);</span><br><span class="line">&#x2F;&#x2F;System.out.println(&quot;--------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;用if语句实现</span><br><span class="line">int max;</span><br><span class="line">if(a &gt; b) &#123;</span><br><span class="line">if(a &gt; c) &#123;</span><br><span class="line">max &#x3D; a;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">max &#x3D; c;</span><br><span class="line">&#125;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">if(b &gt; c) &#123;</span><br><span class="line">max &#x3D; b;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">max &#x3D; c;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;max:&quot;+max);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数据类型中补充的几个小问题&quot;&gt;&lt;a href=&quot;#数据类型中补充的几个小问题&quot; class=&quot;headerlink&quot; title=&quot;数据类型中补充的几个小问题&quot;&gt;&lt;/a&gt;数据类型中补充的几个小问题&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Java系统学习-JavaSE篇" scheme="https://stephencurry6666.github.io/categories/Java%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0-JavaSE%E7%AF%87/"/>
    
    
      <category term="Java系统学习" scheme="https://stephencurry6666.github.io/tags/Java%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Constructing Roads（POJ-2421）（最小生成树）</title>
    <link href="https://stephencurry6666.github.io/2020/05/12/Constructing%20Roads%EF%BC%88POJ-2421%EF%BC%89%EF%BC%88%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%EF%BC%89/"/>
    <id>https://stephencurry6666.github.io/2020/05/12/Constructing%20Roads%EF%BC%88POJ-2421%EF%BC%89%EF%BC%88%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%EF%BC%89/</id>
    <published>2020-05-12T09:21:22.967Z</published>
    <updated>2020-05-13T03:40:09.945Z</updated>
    
    <content type="html"><![CDATA[<p>There are N villages, which are numbered from 1 to N, and you should build some roads such that every two villages can connect to each other. We say two village A and B are connected, if and only if there is a road between A and B, or there exists a village C such that there is a road between A and C, and C and B are connected.</p><a id="more"></a><p>We know that there are already some roads between some villages and your job is the build some roads such that all the villages are connect and the length of all the roads built is minimum.<br>Input<br>The first line is an integer N (3 &lt;= N &lt;= 100), which is the number of villages. Then come N lines, the i-th of which contains N integers, and the j-th of these N integers is the distance (the distance should be an integer within [1, 1000]) between village i and village j.</p><p>Then there is an integer Q (0 &lt;= Q &lt;= N * (N + 1) / 2). Then come Q lines, each line contains two integers a and b (1 &lt;= a &lt; b &lt;= N), which means the road between village a and village b has been built.<br>Output<br>You should output a line contains an integer, which is the length of all the roads to be built such that all the villages are connected, and this value is minimum.<br>Sample Input<br>3<br>0 990 692</p><p>990 0 179</p><p>692 179 0</p><p>1</p><p>1 2</p><p>Sample Output<br>179</p><p><strong>题意：</strong><br><strong>要修公路，输入一个n，表示n个村庄。接着输入n*n的矩阵，该图的邻接矩阵，然后输入一个q 接下来的q行，每行包含两个数a，b，表示a、b这条边联通，就是已经有公路不用修了，要让所有村庄联通在一起问：修路最小代价是多少。</strong></p><p><strong>思路：</strong><br><strong>这道题的话，根据题目输入构造邻接矩阵，然后把已经联通的村庄的距离设置为0，表示不用在修这条公路。然后用Prim算法即可。</strong></p><p><strong>AC代码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 10010;</span><br><span class="line">const int mod &#x3D; 10007;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">const double eps &#x3D; 1e-8;</span><br><span class="line">using namespace std;</span><br><span class="line">int mapp[maxx][maxx];</span><br><span class="line">int dis[maxx];</span><br><span class="line">bool vis[maxx];</span><br><span class="line">int n;</span><br><span class="line">void Prim()</span><br><span class="line">&#123;</span><br><span class="line">    int sum &#x3D; 0;</span><br><span class="line">    int now;</span><br><span class="line">    for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dis[i] &#x3D; i;</span><br><span class="line">        vis[i] &#x3D; false;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">        dis[i] &#x3D; mapp[1][i];</span><br><span class="line">    dis[1] &#x3D; 0;</span><br><span class="line">    vis[1] &#x3D; true;</span><br><span class="line">    for (int i &#x3D; 1; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        now &#x3D; inf;</span><br><span class="line">        int minn &#x3D; inf;</span><br><span class="line">        for (int j &#x3D; 1; j &lt;&#x3D; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (!vis[j] &amp;&amp; dis[j] &lt; minn)</span><br><span class="line">            &#123;</span><br><span class="line">                now &#x3D; j;</span><br><span class="line">                minn &#x3D; dis[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(now &#x3D;&#x3D; inf)</span><br><span class="line">        break;</span><br><span class="line">        vis[now] &#x3D; true;</span><br><span class="line">        sum +&#x3D; minn;</span><br><span class="line">        for (int j &#x3D; 1; j &lt;&#x3D; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (!vis[j] &amp;&amp; dis[j] &gt; mapp[now][j])</span><br><span class="line">                dis[j] &#x3D; mapp[now][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d\n&quot;, sum);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    while (~scanf(&quot;%d&quot;, &amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">            for (int j &#x3D; 1; j &lt;&#x3D; n; j++)</span><br><span class="line">                scanf(&quot;%d&quot;, &amp;mapp[i][j]);</span><br><span class="line">        int q, a, b;</span><br><span class="line">        scanf(&quot;%d&quot;, &amp;q);</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; q; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%d%d&quot;, &amp;a, &amp;b);</span><br><span class="line">            mapp[a][b] &#x3D; mapp[b][a] &#x3D; 0;</span><br><span class="line">        &#125;</span><br><span class="line">        Prim();</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;There are N villages, which are numbered from 1 to N, and you should build some roads such that every two villages can connect to each other. We say two village A and B are connected, if and only if there is a road between A and B, or there exists a village C such that there is a road between A and C, and C and B are connected.&lt;/p&gt;
    
    </summary>
    
    
      <category term="最小生成树" scheme="https://stephencurry6666.github.io/categories/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
    
      <category term="最小生成树" scheme="https://stephencurry6666.github.io/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>QS Network（ZOJ-1586）（最小生成树）</title>
    <link href="https://stephencurry6666.github.io/2020/05/12/QS%20Network%EF%BC%88ZOJ-1586%EF%BC%89%EF%BC%88%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%EF%BC%89/"/>
    <id>https://stephencurry6666.github.io/2020/05/12/QS%20Network%EF%BC%88ZOJ-1586%EF%BC%89%EF%BC%88%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%EF%BC%89/</id>
    <published>2020-05-12T08:30:24.464Z</published>
    <updated>2020-05-12T09:24:50.592Z</updated>
    
    <content type="html"><![CDATA[<p>Sunny Cup 2003 - Preliminary Round<br>April 20th, 12:00 - 17:00</p><p>Problem E: QS Network</p><a id="more"></a><p>In the planet w-503 of galaxy cgb, there is a kind of intelligent creature named QS. QScommunicate with each other via networks. If two QS want to get connected, they need to buy two network adapters (one for each QS) and a segment of network cable. Please be advised that ONE NETWORK ADAPTER CAN ONLY BE USED IN A SINGLE CONNECTION.(ie. if a QS want to setup four connections, it needs to buy four adapters). In the procedure of communication, a QS broadcasts its message to all the QS it is connected with, the group of QS who receive the message broadcast the message to all the QS they connected with, the procedure repeats until all the QS’s have received the message.</p><p>A sample is shown below:</p><p><img src="https://vj.z180.cn/1120637f03c5c4bc9402775a6100caa8?v=1589071552" alt="tupian"></p><p>A sample QS network, and QS A want to send a message.</p><p>Step 1. QS A sends message to QS B and QS C;</p><p>Step 2. QS B sends message to QS A ; QS C sends message to QS A and QS D;</p><p>Step 3. the procedure terminates because all the QS received the message.</p><p>Each QS has its favorate brand of network adapters and always buys the brand in all of its connections. Also the distance between QS vary. Given the price of each QS’s favorate brand of network adapters and the price of cable between each pair of QS, your task is to write a program to determine the minimum cost to setup a QS network.</p><p>Input</p><p>The 1st line of the input contains an integer t which indicates the number of data sets.</p><p>From the second line there are t data sets.</p><p>In a single data set,the 1st line contains an interger n which indicates the number of QS.</p><p>The 2nd line contains n integers, indicating the price of each QS’s favorate network adapter.</p><p>In the 3rd line to the n+2th line contain a matrix indicating the price of cable between ecah pair of QS.</p><p>Constrains:</p><p>all the integers in the input are non-negative and not more than 1000.</p><p>Output</p><p>for each data set,output the minimum cost in a line. NO extra empty lines needed.</p><p>Sample Input</p><p>1</p><p>3</p><p>10 20 30</p><p>0 100 200</p><p>100 0 300</p><p>200 300 0</p><p>Sample Output</p><p>370</p><p><strong>题意：</strong><br><strong>第一行给出T，代表有T组数据。每组数据第一行给出N，代表图有N个结点。接着一行给出N个数，代表每个结点的权值（就是接收器的费用），接着N行每行N个数，矩阵的形式给出各点之间边的权值（也就是连接接收器网线的费用）。最后实际权值就是边的权值加上两个点的权值，输出最小生成树的权值总和即可。</strong></p><p><strong>思路：</strong><br><strong>这道题的话，因为输入的是矩阵，我们用Prim算法更好一些，套下模板即可。</strong></p><p><strong>AC代码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 10010;</span><br><span class="line">const int mod &#x3D; 10007;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">const double eps &#x3D; 1e-8;</span><br><span class="line">using namespace std;</span><br><span class="line">int mapp[maxx][maxx];</span><br><span class="line">int dis[maxx];</span><br><span class="line">int val[maxx];</span><br><span class="line">bool vis[maxx];</span><br><span class="line">int n;</span><br><span class="line">void Prim()</span><br><span class="line">&#123;</span><br><span class="line">    int sum &#x3D; 0;</span><br><span class="line">    int now;</span><br><span class="line">    for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dis[i] &#x3D; i;</span><br><span class="line">        vis[i] &#x3D; false;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">        dis[i] &#x3D; mapp[1][i];</span><br><span class="line">    dis[1] &#x3D; 0;</span><br><span class="line">    vis[1] &#x3D; true;</span><br><span class="line">    for (int i &#x3D; 1; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        now &#x3D; inf;</span><br><span class="line">        int minn &#x3D; inf;</span><br><span class="line">        for (int j &#x3D; 1; j &lt;&#x3D; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (!vis[j] &amp;&amp; dis[j] &lt; minn)</span><br><span class="line">            &#123;</span><br><span class="line">                now &#x3D; j;</span><br><span class="line">                minn &#x3D; dis[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (now &#x3D;&#x3D; inf)</span><br><span class="line">            break;</span><br><span class="line">        vis[now] &#x3D; true;</span><br><span class="line">        sum +&#x3D; minn;</span><br><span class="line">        for (int j &#x3D; 1; j &lt;&#x3D; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (!vis[j] &amp;&amp; dis[j] &gt; mapp[now][j])</span><br><span class="line">                dis[j] &#x3D; mapp[now][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d\n&quot;, sum);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int t;</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;t);</span><br><span class="line">    while (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf(&quot;%d&quot;, &amp;n);</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">            scanf(&quot;%d&quot;, &amp;val[i]);</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">            for (int j &#x3D; 1; j &lt;&#x3D; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                scanf(&quot;%d&quot;, &amp;mapp[i][j]);</span><br><span class="line">                mapp[i][j] +&#x3D; val[i] + val[j];</span><br><span class="line">            &#125;</span><br><span class="line">        Prim();</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Sunny Cup 2003 - Preliminary Round&lt;br&gt;April 20th, 12:00 - 17:00&lt;/p&gt;
&lt;p&gt;Problem E: QS Network&lt;/p&gt;
    
    </summary>
    
    
      <category term="最小生成树" scheme="https://stephencurry6666.github.io/categories/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
    
      <category term="最小生成树" scheme="https://stephencurry6666.github.io/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>再次温习最小生成树的一些思路</title>
    <link href="https://stephencurry6666.github.io/2020/05/12/%E5%86%8D%E6%AC%A1%E6%B8%A9%E4%B9%A0%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%B7%AF/"/>
    <id>https://stephencurry6666.github.io/2020/05/12/%E5%86%8D%E6%AC%A1%E6%B8%A9%E4%B9%A0%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%B7%AF/</id>
    <published>2020-05-12T08:30:24.464Z</published>
    <updated>2020-05-12T09:20:59.153Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>因为之前4月份打了将近一个月的个人赛，有些以前学习过的算法已经忘了，所以重新再温习一遍。</p><a id="more"></a><h2 id="关于最小生成树"><a href="#关于最小生成树" class="headerlink" title="关于最小生成树"></a>关于最小生成树</h2><p><strong>最小生成树（minimum spanning tree）是由n个顶点，n-1条边，将一个连通图连接起来，且使权值最小的结构。<br>最小生成树可以用Prim（普里姆）算法或kruskal（克鲁斯卡尔）算法求出。</strong></p><h2 id="Kruskal算法详解及模板与例题"><a href="#Kruskal算法详解及模板与例题" class="headerlink" title="Kruskal算法详解及模板与例题"></a>Kruskal算法详解及模板与例题</h2><h3 id="Kruskal算法简介"><a href="#Kruskal算法简介" class="headerlink" title="Kruskal算法简介"></a>Kruskal算法简介</h3><p><strong>Kruskal算法是基于并查集算法而进行的，很简单的思路就是，对一张图，将所有的边都拆出来，然后对每条边的边权进行排序（从大到小，从小到大看题目需要），然后再将边连回去，连边的时候判断两个点是否被连通了，如果是连通的，那么就将该边扔了再看下一条边，如果没有被连通，那么就将该条边连上，然后用并查集合并即可。</strong></p><p><strong>时间复杂度：O（NlogN）（N为边数）<br>kruskal算法又称“加边法”，用于边数较少的稀疏图<br>方法：每次找图中权值最小的边，将边连接的两个顶点加入最小生成树集合中<br>注意：相同权值任选其中一个即可，但是不允许出现闭合回路的情况。</strong></p><h3 id="Kruskal算法图解"><a href="#Kruskal算法图解" class="headerlink" title="Kruskal算法图解"></a>Kruskal算法图解</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODIwMTE1NjM2MTE3?x-oss-process=image/format,png" alt="tupian1"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODIwMTE1NjQ2MzA4?x-oss-process=image/format,png" alt="tupian2"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODIwMTE1NjU4MzI0?x-oss-process=image/format,png" alt="tupian3"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODIwMTE1NzExODQ1?x-oss-process=image/format,png" alt="tupian4"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODIwMTE1NzIzMTg5?x-oss-process=image/format,png" alt="tupian5"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODIwMTE1NzMyNjMy?x-oss-process=image/format,png" alt="tupian6"></p><h3 id="Kruskal算法代码详解及模板"><a href="#Kruskal算法代码详解及模板" class="headerlink" title="Kruskal算法代码详解及模板"></a>Kruskal算法代码详解及模板</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 200010;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">using namespace std;</span><br><span class="line">int pre[maxx];</span><br><span class="line">int n;</span><br><span class="line">struct node&#x2F;&#x2F;存边权值</span><br><span class="line">&#123;</span><br><span class="line">    int s;</span><br><span class="line">    int e;</span><br><span class="line">    int v;</span><br><span class="line">&#125; edge[maxx];</span><br><span class="line">bool cmp(node a, node b)&#x2F;&#x2F;看情况修改 优先级给小边权还是大边权</span><br><span class="line">&#123;</span><br><span class="line">    return a.v &lt; b.v;</span><br><span class="line">&#125;</span><br><span class="line">void init()&#x2F;&#x2F;初始化</span><br><span class="line">&#123;</span><br><span class="line">    for (int i &#x3D; 0; i &lt;&#x3D; n; i++)</span><br><span class="line">        pre[i] &#x3D; i;</span><br><span class="line">&#125;</span><br><span class="line">int getf(int a)&#x2F;&#x2F;并查集 看两点是否在同一个图内</span><br><span class="line">&#123;</span><br><span class="line">    if (pre[a] &#x3D;&#x3D; a)</span><br><span class="line">        return a;</span><br><span class="line">    int tmp &#x3D; getf(pre[a]);</span><br><span class="line">    return pre[a] &#x3D; tmp;</span><br><span class="line">&#125;</span><br><span class="line">int Kruskal(int a, int b) &#x2F;&#x2F;并查集合并操作，看是否在同一个图内 如果在就跳过 不在就合并</span><br><span class="line">&#123;</span><br><span class="line">    int fa &#x3D; getf(a);</span><br><span class="line">    int fb &#x3D; getf(b);</span><br><span class="line">    if (fa !&#x3D; fb)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[fa] &#x3D; fb;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">        return 0;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    while (~scanf(&quot;%d&quot;, &amp;n), n)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        int m &#x3D; (n * (n - 1)) &#x2F; 2;</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; m; i++)</span><br><span class="line">            scanf(&quot;%d%d%d&quot;, &amp;edge[i].s, &amp;edge[i].e, &amp;edge[i].v);</span><br><span class="line">        sort(edge + 1, edge + m + 1, cmp);</span><br><span class="line">        int ans &#x3D; 0;</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (Kruskal(edge[i].s, edge[i].e))</span><br><span class="line">                ans +&#x3D; edge[i].v;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%d\n&quot;, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kruskal算法例题"><a href="#Kruskal算法例题" class="headerlink" title="Kruskal算法例题"></a>Kruskal算法例题</h3><p><strong>例题一：POJ-1287</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 10010;</span><br><span class="line">const int mod &#x3D; 10007;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">const double eps &#x3D; 1e-8;</span><br><span class="line">using namespace std;</span><br><span class="line">struct node</span><br><span class="line">&#123;</span><br><span class="line">    int s;</span><br><span class="line">    int e;</span><br><span class="line">    int v;</span><br><span class="line">&#125; edge[maxx];</span><br><span class="line">bool cmp(node a, node b)</span><br><span class="line">&#123;</span><br><span class="line">    return a.v &lt; b.v;</span><br><span class="line">&#125;</span><br><span class="line">int pre[maxx];</span><br><span class="line">int n, r;</span><br><span class="line">void init()</span><br><span class="line">&#123;</span><br><span class="line">    for (int i &#x3D; 0; i &lt;&#x3D; n; i++)</span><br><span class="line">        pre[i] &#x3D; i;</span><br><span class="line">&#125;</span><br><span class="line">int getf(int a)</span><br><span class="line">&#123;</span><br><span class="line">    if (pre[a] &#x3D;&#x3D; a)</span><br><span class="line">        return a;</span><br><span class="line">    int tmp &#x3D; getf(pre[a]);</span><br><span class="line">    return pre[a] &#x3D; tmp;</span><br><span class="line">&#125;</span><br><span class="line">int Kruskal(int a, int b)</span><br><span class="line">&#123;</span><br><span class="line">    int fa &#x3D; getf(a);</span><br><span class="line">    int fb &#x3D; getf(b);</span><br><span class="line">    if (fa !&#x3D; fb)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[fa] &#x3D; fb;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">        return 0;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    while (~scanf(&quot;%d%d&quot;, &amp;n, &amp;r), n)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; r; i++)</span><br><span class="line">            scanf(&quot;%d%d%d&quot;, &amp;edge[i].s, &amp;edge[i].e, &amp;edge[i].v);</span><br><span class="line">        sort(edge + 1, edge + r + 1, cmp);</span><br><span class="line">        int ans &#x3D; 0;</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; r; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (Kruskal(edge[i].s, edge[i].e))</span><br><span class="line">                ans +&#x3D; edge[i].v;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%d\n&quot;, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prim算法详解及模板与例题"><a href="#Prim算法详解及模板与例题" class="headerlink" title="Prim算法详解及模板与例题"></a>Prim算法详解及模板与例题</h2><h3 id="Prim算法简介"><a href="#Prim算法简介" class="headerlink" title="Prim算法简介"></a>Prim算法简介</h3><p><strong>时间复杂度：O（N^2）（N为顶点数）<br>prim算法又称“加点法”，用于边数较多的带权无向连通图<br>方法：每次找与之连线权值最小的顶点，将该点加入最小生成树集合中<br>注意：相同权值任选其中一个即可，但是不允许出现闭合回路的情况。</strong></p><h3 id="Prim算法图解"><a href="#Prim算法图解" class="headerlink" title="Prim算法图解"></a>Prim算法图解</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODIwMTEzODU0ODA3?x-oss-process=image/format,png" alt="tupian1"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODIwMTEzOTA1MTQ0?x-oss-process=image/format,png" alt="tupian2"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODIwMTEzOTEzODk1?x-oss-process=image/format,png" alt="tupian3"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODIwMTEzOTIxMDQ3?x-oss-process=image/format,png" alt="tupian4"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODIwMTEzOTI5Mjcz?x-oss-process=image/format,png" alt="tupian5"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODIwMTEzOTM4NDI0?x-oss-process=image/format,png" alt="tupian6"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwODIwMTEzOTQ2MTQx?x-oss-process=image/format,png" alt="tupian7"></p><h3 id="Prim算法代码详解及模板"><a href="#Prim算法代码详解及模板" class="headerlink" title="Prim算法代码详解及模板"></a>Prim算法代码详解及模板</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 210;</span><br><span class="line">const int mod &#x3D; 10007;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">const double eps &#x3D; 1e-8;</span><br><span class="line">using namespace std;</span><br><span class="line">int mapp[maxx][maxx]; &#x2F;&#x2F;存图</span><br><span class="line">int dis[maxx];        &#x2F;&#x2F;记录任意一点到这个点的最近距离</span><br><span class="line">bool vis[maxx];       &#x2F;&#x2F;用来标记0和1  表示这个点是否被选择过</span><br><span class="line">int n;</span><br><span class="line">void Prim()</span><br><span class="line">&#123;</span><br><span class="line">    int sum &#x3D; 0;</span><br><span class="line">    int now;</span><br><span class="line">    for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#x2F;&#x2F;初始化</span><br><span class="line">    &#123;</span><br><span class="line">        dis[i] &#x3D; inf;</span><br><span class="line">        vis[i] &#x3D; false;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#x2F;&#x2F;选择1为起始点，初始化</span><br><span class="line">        dis[i] &#x3D; mapp[1][i];</span><br><span class="line">    dis[1] &#x3D; 0;                 &#x2F;&#x2F;起点的上一个节点没有节点，所以为0</span><br><span class="line">    vis[1] &#x3D; true;              &#x2F;&#x2F;定义起点已经加入了最小生成树</span><br><span class="line">    for (int i &#x3D; 1; i &lt; n; i++) &#x2F;&#x2F;循环找最小边，循环n-1次</span><br><span class="line">    &#123;</span><br><span class="line">        now &#x3D; inf;</span><br><span class="line">        int minn &#x3D; inf;</span><br><span class="line">        for (int j &#x3D; 1; j &lt;&#x3D; n; j++) &#x2F;&#x2F;找dis最小的节点并加入最小生成树</span><br><span class="line">        &#123;</span><br><span class="line">            if (!vis[j] &amp;&amp; dis[j] &lt; minn)</span><br><span class="line">            &#123;</span><br><span class="line">                now &#x3D; j;&#x2F;&#x2F;找出最小的顶点</span><br><span class="line">                minn &#x3D; dis[j];&#x2F;&#x2F;找出权值最短的路径长度</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (now &#x3D;&#x3D; inf)</span><br><span class="line">            break; &#x2F;&#x2F;防止不成图</span><br><span class="line">        vis[now] &#x3D; true;</span><br><span class="line">        sum +&#x3D; minn;&#x2F;&#x2F;求和</span><br><span class="line">        for (int j &#x3D; 1; j &lt;&#x3D; n; j++) &#x2F;&#x2F;添入新点后更新最小距离</span><br><span class="line">        &#123;</span><br><span class="line">            if (!vis[j] &amp;&amp; dis[j] &gt; mapp[now][j])</span><br><span class="line">                dis[j] &#x3D; mapp[now][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d\n&quot;, sum);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    while (~scanf(&quot;%d&quot;, &amp;n), n)</span><br><span class="line">    &#123;</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#x2F;&#x2F;初始化邻接矩阵</span><br><span class="line">            for (int j &#x3D; 1; j &lt;&#x3D; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                if (i &#x3D;&#x3D; j)</span><br><span class="line">                    mapp[i][j] &#x3D; 0;</span><br><span class="line">                else</span><br><span class="line">                    mapp[i][j] &#x3D; inf;</span><br><span class="line">            &#125;</span><br><span class="line">        int a,b,c;</span><br><span class="line">        for (int i &#x3D; 1; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%d%d%d&quot;,&amp;a,&amp;b,&amp;c);</span><br><span class="line">            mapp[a][b] &#x3D; mapp[b][a] &#x3D; c;</span><br><span class="line">        &#125;</span><br><span class="line">        Prim();</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Prim算法例题"><a href="#Prim算法例题" class="headerlink" title="Prim算法例题"></a>Prim算法例题</h3><p><strong>例题一：POJ-1251</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 210;</span><br><span class="line">const int mod &#x3D; 10007;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">const double eps &#x3D; 1e-8;</span><br><span class="line">using namespace std;</span><br><span class="line">int mapp[maxx][maxx];</span><br><span class="line">int dis[maxx];</span><br><span class="line">bool vis[maxx];</span><br><span class="line">int n;</span><br><span class="line">void Prim()</span><br><span class="line">&#123;</span><br><span class="line">    int sum &#x3D; 0;</span><br><span class="line">    int now;</span><br><span class="line">    for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dis[i] &#x3D; inf;</span><br><span class="line">        vis[i] &#x3D; false;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">        dis[i] &#x3D; mapp[1][i];</span><br><span class="line">    dis[1] &#x3D; 0;</span><br><span class="line">    vis[1] &#x3D; true;</span><br><span class="line">    for (int i &#x3D; 1; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        now &#x3D; inf;</span><br><span class="line">        int minn &#x3D; inf;</span><br><span class="line">        for (int j &#x3D; 1; j &lt;&#x3D; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (!vis[j] &amp;&amp; dis[j] &lt; minn)</span><br><span class="line">            &#123;</span><br><span class="line">                now &#x3D; j;</span><br><span class="line">                minn &#x3D; dis[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (now &#x3D;&#x3D; inf)</span><br><span class="line">            break;</span><br><span class="line">        vis[now] &#x3D; true;</span><br><span class="line">        sum +&#x3D; minn;</span><br><span class="line">        for (int j &#x3D; 1; j &lt;&#x3D; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (!vis[j] &amp;&amp; dis[j] &gt; mapp[now][j])</span><br><span class="line">                dis[j] &#x3D; mapp[now][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d\n&quot;, sum);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char a, b;</span><br><span class="line">    int num1, num2;</span><br><span class="line">    int x, y;</span><br><span class="line">    while (~scanf(&quot;%d&quot;, &amp;n), n)</span><br><span class="line">    &#123;</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">            for (int j &#x3D; 1; j &lt;&#x3D; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                if (i &#x3D;&#x3D; j)</span><br><span class="line">                    mapp[i][j] &#x3D; 0;</span><br><span class="line">                else</span><br><span class="line">                    mapp[i][j] &#x3D; inf;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        for (int i &#x3D; 1; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; a &gt;&gt; num1;</span><br><span class="line">            for (int j &#x3D; 1; j &lt;&#x3D; num1; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                cin &gt;&gt; b &gt;&gt; num2;</span><br><span class="line">                x &#x3D; a - 64;</span><br><span class="line">                y &#x3D; b - 64;</span><br><span class="line">                mapp[x][y] &#x3D; mapp[y][x] &#x3D; num2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Prim();</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>例题二：Hihocoder-1097</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 10010;</span><br><span class="line">const int mod &#x3D; 10007;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">const double eps &#x3D; 1e-8;</span><br><span class="line">using namespace std;</span><br><span class="line">int mapp[maxx][maxx];</span><br><span class="line">int dis[maxx];</span><br><span class="line">bool vis[maxx];</span><br><span class="line">int n;</span><br><span class="line">void Prim()</span><br><span class="line">&#123;</span><br><span class="line">    int sum &#x3D; 0;</span><br><span class="line">    int now;</span><br><span class="line">    for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dis[i] &#x3D; inf;</span><br><span class="line">        vis[i] &#x3D; false;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">        dis[i] &#x3D; mapp[1][i];</span><br><span class="line">    dis[1] &#x3D; 0;</span><br><span class="line">    vis[1] &#x3D; true;</span><br><span class="line">    for (int i &#x3D; 1; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        now &#x3D; inf;</span><br><span class="line">        int minn &#x3D; inf;</span><br><span class="line">        for (int j &#x3D; 1; j &lt;&#x3D; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (!vis[j] &amp;&amp; dis[j] &lt; minn)</span><br><span class="line">            &#123;</span><br><span class="line">                now &#x3D; j;</span><br><span class="line">                minn &#x3D; dis[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (now &#x3D;&#x3D; inf)</span><br><span class="line">            break;</span><br><span class="line">        vis[now] &#x3D; true;</span><br><span class="line">        sum +&#x3D; minn;</span><br><span class="line">        for (int j &#x3D; 1; j &lt;&#x3D; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (!vis[j] &amp;&amp; dis[j] &gt; mapp[now][j])</span><br><span class="line">                dis[j] &#x3D; mapp[now][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d\n&quot;, sum);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    while (~scanf(&quot;%d&quot;, &amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">            for (int j &#x3D; 1; j &lt;&#x3D; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                if (i &#x3D;&#x3D; j)</span><br><span class="line">                    mapp[i][j] &#x3D; 0;</span><br><span class="line">                else</span><br><span class="line">                    mapp[i][j] &#x3D; inf;</span><br><span class="line">            &#125;</span><br><span class="line">        int a;</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">            for (int j &#x3D; 1; j &lt;&#x3D; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                scanf(&quot;%d&quot;, &amp;a);</span><br><span class="line">                if (a &lt; mapp[i][j])</span><br><span class="line">                    mapp[i][j] &#x3D; mapp[j][i] &#x3D; a;</span><br><span class="line">            &#125;</span><br><span class="line">        Prim();</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;因为之前4月份打了将近一个月的个人赛，有些以前学习过的算法已经忘了，所以重新再温习一遍。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法重温" scheme="https://stephencurry6666.github.io/categories/%E7%AE%97%E6%B3%95%E9%87%8D%E6%B8%A9/"/>
    
    
      <category term="最小生成树再温" scheme="https://stephencurry6666.github.io/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E5%86%8D%E6%B8%A9/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 625(Div.2)</title>
    <link href="https://stephencurry6666.github.io/2020/05/11/Codeforces%20625(Div.2)/"/>
    <id>https://stephencurry6666.github.io/2020/05/11/Codeforces%20625(Div.2)/</id>
    <published>2020-05-11T12:28:49.376Z</published>
    <updated>2020-05-11T12:59:49.089Z</updated>
    
    <content type="html"><![CDATA[<p><strong>A题</strong></p><p>题意：输入两组数，为1表示有该任务，0表示没有，现在由你定义每个任务的分数，使得最高分最小的情况下，第一个人的总分大于第二个人，如果无法满足，输出-1。</p><a id="more"></a><p>思路：这道题的话，先处理两个人的特有任务，如果第一个人特有的任务第二个人都有，那么一定无法满足，因为两个人任务的分数是相同的，第二个人特有的任务按照题目要求，应当为1分，第一个人的特有任务，按照第二个人特有任务的数量，平均分配即可。</p><p>AC代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 100010;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">using namespace std;</span><br><span class="line">int a[maxx];</span><br><span class="line">int b[maxx];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n;</span><br><span class="line">    while (cin &gt;&gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">            cin &gt;&gt; b[i];</span><br><span class="line">        int ans1 &#x3D; 0, ans2 &#x3D; 0;</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (a[i] + b[i] &#x3D;&#x3D; 1)</span><br><span class="line">            &#123;</span><br><span class="line">                ans1 +&#x3D; a[i];</span><br><span class="line">                ans2 +&#x3D; b[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (ans1 &#x3D;&#x3D; 0)</span><br><span class="line">            cout &lt;&lt; &quot;-1&quot; &lt;&lt; endl;</span><br><span class="line">        else</span><br><span class="line">            cout &lt;&lt; (ans1 + ans2) &#x2F; ans1 &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>B题</strong></p><p>题意 ：有n个数，对于Ai和Aj这两个数，如果满足Ai-Aj=i-j，那么两个数就可以求和，输出整个数组能够求和的最大值。</p><p>思路：这道题的话，因为每个城市有beauty值b，可以相互连通的城市i和j之间 i-j==b[i]-b[j]，所以i-b[i]==j-b[j]，所以可以连通的所有城市i-b[i]都是相等的，所以我们记录可以给到每一个差值的beauty值之和再取max就可以了。</p><p>AC代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 200010;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">using namespace std;</span><br><span class="line">unordered_map&lt;ll, ll&gt; mp;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    ll a;</span><br><span class="line">    ll ans &#x3D; -1;</span><br><span class="line">    for (ll i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a;</span><br><span class="line">        mp[a - i] +&#x3D; a;</span><br><span class="line">        ans &#x3D; max(ans, mp[a - i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>C题</strong></p><p>题意：一个字符串，如果与某个位置相邻的字母，至少有一个比该位置的字母小1，那么该位置的字母就可以删掉，剩下的字母接上来，输出对于整个字符串，最多可以删多少个字母。</p><p>思路：这道题的话，直接暴力，不难想到先删字母大的，然后再删小的可以保证删的最多，所以就从 ‘z’ 遍历到 ‘a’， 一个一个删，当前字母不能删就往前循环。</p><p>AC代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 200010;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">using namespace std;</span><br><span class="line">string s;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n;</span><br><span class="line">    while (cin &gt;&gt; n &gt;&gt; s)</span><br><span class="line">    &#123;</span><br><span class="line">        for (char i &#x3D; &#39;z&#39;; i &gt;&#x3D; &#39;b&#39;; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            if (s.size() &#x3D;&#x3D; 1)</span><br><span class="line">                break;</span><br><span class="line">            while (1)</span><br><span class="line">            &#123;</span><br><span class="line">                if (s.size() &#x3D;&#x3D; 1)</span><br><span class="line">                    break;</span><br><span class="line">                int flag &#x3D; 1;</span><br><span class="line">                for (int j &#x3D; 0; j &lt; s.size(); j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    if (s[j] !&#x3D; i)</span><br><span class="line">                        continue;</span><br><span class="line">                    if (j &#x3D;&#x3D; 0)</span><br><span class="line">                    &#123;</span><br><span class="line">                        if (s[j + 1] &#x3D;&#x3D; i - 1)</span><br><span class="line">                        &#123;</span><br><span class="line">                            flag &#x3D; 0;</span><br><span class="line">                            s.erase(s.begin() + j, s.begin() + j + 1);</span><br><span class="line">                            break;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    else if (j &#x3D;&#x3D; s.size() - 1)</span><br><span class="line">                    &#123;</span><br><span class="line">                        if (s[j - 1] &#x3D;&#x3D; i - 1)</span><br><span class="line">                        &#123;</span><br><span class="line">                            flag &#x3D; 0;</span><br><span class="line">                            s.erase(s.begin() + j, s.begin() + j + 1);</span><br><span class="line">                            break;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    else</span><br><span class="line">                    &#123;</span><br><span class="line">                        if (s[j - 1] &#x3D;&#x3D; i - 1 || s[j + 1] &#x3D;&#x3D; i - 1)</span><br><span class="line">                        &#123;</span><br><span class="line">                            flag &#x3D; 0;</span><br><span class="line">                            s.erase(s.begin() + j, s.begin() + j + 1);</span><br><span class="line">                            break;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                if (flag)</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; n - s.size() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;A题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;题意：输入两组数，为1表示有该任务，0表示没有，现在由你定义每个任务的分数，使得最高分最小的情况下，第一个人的总分大于第二个人，如果无法满足，输出-1。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CF" scheme="https://stephencurry6666.github.io/categories/CF/"/>
    
    
      <category term="CF" scheme="https://stephencurry6666.github.io/tags/CF/"/>
    
  </entry>
  
  <entry>
    <title>再次温习并查集的一些思路</title>
    <link href="https://stephencurry6666.github.io/2020/05/08/%E5%86%8D%E6%AC%A1%E6%B8%A9%E4%B9%A0%E5%B9%B6%E6%9F%A5%E9%9B%86%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%B7%AF/"/>
    <id>https://stephencurry6666.github.io/2020/05/08/%E5%86%8D%E6%AC%A1%E6%B8%A9%E4%B9%A0%E5%B9%B6%E6%9F%A5%E9%9B%86%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%B7%AF/</id>
    <published>2020-05-08T07:20:46.538Z</published>
    <updated>2020-05-11T12:48:04.355Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>因为之前4月份打了将近一个月的个人赛，有些以前学习过的算法已经忘了，所以重新再温习一遍。</p><a id="more"></a><h2 id="普通并查集"><a href="#普通并查集" class="headerlink" title="普通并查集"></a>普通并查集</h2><p><strong>并查集（Union Find）是一种树型的数据结构，用于处理一些不相交集合（Disjoint Sets）的合并及查询问题。在一些有N个元素的集合应用问题中，我们通常是在开始时让每个元素构成一个单元素的集合，然后按一定顺序将属于同一组的元素所在的集合合并，其间要反复查找一个元素在哪个集合中。</strong></p><p><strong>对于并查集的理解</strong></p><p>首先并查集是一种树型结构，树型结构，顾名思义就是存在着子节点和父节点。</p><p>所以我们先设一个数组pre[]，这个数组里面存放每个元素的父节点。然后这里借鉴大佬的例子来解释并查集的作用。</p><p>例：话说江湖上散落着各式各样的大侠，有上千个之多。他们没有什么正当职业，整天背着剑在外面走来走去，碰到和自己不是一路人的，就免不了要打一架。但大侠们有一个优点就是讲义气，绝对不打自己的朋友。而且他们信奉“朋友的朋友就是我的朋友”，只要是能通过朋友关系串联起来的，不管拐了多少个弯，都认为是自己人。这样一来，江湖上就形成了一个一个的帮派，通过两两之间的朋友关系串联起来。而不在同一个帮派的人，无论如何都无法通过朋友关系连起来，于是就可以放心往死了打。但是两个原本互不相识的人，如何判断是否属于一个朋友圈呢？</p><p>我们可以在每个朋友圈内推举出一个比较有名望的人，作为该圈子的代表人物。这样，每个圈子就可以这样命名“中国同胞队”美国同胞队”……两人只要互相对一下自己的队长是不是同一个人，就可以确定敌友关系了。</p><p>但是还有问题啊，大侠们只知道自己直接的朋友是谁，很多人压根就不认识队长要判断自己的队长是谁，只能漫无目的的通过朋友的朋友关系问下去：“你是不是队长？你是不是队长？”这样，想打一架得先问个几十年，饿都饿死了，受不了。这样一来，队长面子上也挂不住了，不仅效率太低，还有可能陷入无限循环中。于是队长下令，重新组队。队内所有人实行分等级制度，形成树状结构，我队长就是根节点，下面分别是二级队员、三级队员。每个人只要记住自己的上级是谁就行了。遇到判断敌友的时候，只要一层层向上问，直到最高层，就可以在短时间内确定队长是谁了。由于我们关心的只是两个人之间是否是一个帮派的，至于他们是如何通过朋友关系相关联的，以及每个圈子内部的结构是怎样的，甚至队长是谁，都不重要了。所以我们可以放任队长随意重新组队，只要不搞错敌友关系就好了。于是，门派产生了。</p><p><img src="https://img-blog.csdnimg.cn/20190301210948491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg0NjEzOQ==,size_16,color_FFFFFF,t_70" alt="bcj"></p><p>下面我们来看并查集的实现。 int pre[1000]; 这个数组，记录了每个大侠的上级是谁。大侠们从1或者0开始编号（依据题意而定），pre[15]=3就表示15号大侠的上级是3号大侠。如果一个人的上级就是他自己，那说明他就是掌门人了，查找到此为止。也有孤家寡人自成一派的，比如欧阳锋，那么他的上级就是他自己。每个人都只认自己的上级。比如胡青牛同学只知道自己的上级是杨左使。张无忌是谁？不认识！要想知道自己的掌门是谁，只能一级级查上去。<br>getf这个函数就是找掌门用的，意义再清楚不过了（路径压缩算法先不论，后面再说）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int getf(int a)&#x2F;&#x2F;查找根节点</span><br><span class="line">&#123;</span><br><span class="line">    if (pre[a] &#x3D;&#x3D; a)&#x2F;&#x2F;我的上级不是掌门</span><br><span class="line">        return a;</span><br><span class="line">    int tmp &#x3D; getf(pre[a]);&#x2F;&#x2F;我就找他的上级，直到掌门出现</span><br><span class="line">    return pre[a] &#x3D; tmp;&#x2F;&#x2F;掌门出现</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来看看mer函数，就是在两个点之间连一条线，这样一来，原先它们所在的两个板块的所有点就都可以互通了。这在图上很好办，画条线就行了。但我们现在是用并查集来描述武林中的状况的，一共只有一个pre[]数组，该如何实现呢？ 还是举江湖的例子，假设现在武林中的形势如图所示。虚竹帅锅与周芷若MM是我非常喜欢的两个人物，他们的终极boss分别是玄慈方丈和灭绝师太，那明显就是两个阵营了。我不希望他们互相打架，就对他俩说：“你们两位拉拉勾，做好朋友吧。”他们看在我的面子上，同意了。这一同意可非同小可，整个少林和峨眉派的人就不能打架了。这么重大的变化，可如何实现呀，要改动多少地方？其实非常简单，我对玄慈方丈说：“大师，麻烦你把你的上级改为灭绝师太吧。这样一来，两派原先的所有人员的终极boss都是师太，那还打个球啊！反正我们关心的只是连通性，门派内部的结构不要紧的。”玄慈一听肯定火大了：“我靠，凭什么是我变成她手下呀，怎么不反过来？我抗议！”于是，两人相约一战，杀的是天昏地暗，风云为之变色啊，但是啊，这场战争终究会有胜负，胜者为王。弱者就被吞并了。反正谁加入谁效果是一样的，门派就由两个变成一个了。这段函数的意思明白了吧？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void mer(int a, int b)&#x2F;&#x2F;虚竹和周芷若做朋友</span><br><span class="line">&#123;</span><br><span class="line">    int fa &#x3D; getf(a);&#x2F;&#x2F;我老大是玄慈</span><br><span class="line">    int fb &#x3D; getf(b);&#x2F;&#x2F;我老大是灭绝</span><br><span class="line">    if (fa !&#x3D; fb)</span><br><span class="line">        pre[fa] &#x3D; fb;&#x2F;&#x2F;打一仗，谁赢就当对方老大</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来看看路径压缩算法。建立门派的过程是用mer函数两个人两个人地连接起来的，谁当谁的手下完全随机。最后的树状结构会变成什么样，我也无法预知，一字长蛇阵也有可能。这样查找的效率就会比较低下。最理想的情况就是所有人的直接上级都是掌门，一共就两级结构，只要找一次就找到掌门了。哪怕不能完全做到，也最好尽量接近。这样就产生了路径压缩算法。<br>设想这样一个场景：两个互不相识的大侠碰面了，想知道能不能干一场。 于是赶紧打电话问自己的上级：“你是不是掌门？” 上级说：“我不是呀，我的上级是谁谁谁，你问问他看看。” 一路问下去，原来两人的最终boss都是东厂曹公公。 “哎呀呀，原来是自己人，有礼有礼，在下三营六组白面葫芦娃!” “幸会幸会，在下九营十八组仙子狗尾巴花！” 两人高高兴兴地手拉手喝酒去了。 “等等等等，两位大侠请留步，还有事情没完成呢！”我叫住他俩。 “哦，对了，还要做路径压缩。”两人醒悟。 白面葫芦娃打电话给他的上级六组长：“组长啊，我查过了，其实偶们的掌门是曹公公。不如偶们一起结拜在曹公公手下吧，省得级别太低，以后查找掌门麻烦。” “唔，有道理。” 白面葫芦娃接着打电话给刚才拜访过的三营长……仙子狗尾巴花也做了同样的事情。 这样，查询中所有涉及到的人物都聚集在曹公公的直接领导下。每次查询都做了优化处理，所以整个门派树的层数都会维持在比较低的水平上。路径压缩的代码，看得懂很好，看不懂可以自己模拟一下，很简单的一个递归而已。总之它所实现的功能就是这么个意思。</p><p><img src="https://img-blog.csdnimg.cn/20190301211224963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg0NjEzOQ==,size_16,color_FFFFFF,t_70" alt="aa"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int tmp &#x3D; getf(pre[a]);&#x2F;&#x2F;路径压缩</span><br><span class="line">    return pre[a] &#x3D; tmp;</span><br></pre></td></tr></table></figure><p><strong>要实现这个例子的代码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 10010;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">using namespace std;</span><br><span class="line">int pre[maxx];</span><br><span class="line">int n, m, ans;</span><br><span class="line">void init()</span><br><span class="line">&#123;</span><br><span class="line">    for (int i &#x3D; 0; i &lt;&#x3D; n; i++)</span><br><span class="line">        pre[i] &#x3D; i;</span><br><span class="line">&#125;</span><br><span class="line">int getf(int a)</span><br><span class="line">&#123;</span><br><span class="line">    if (a &#x3D;&#x3D; pre[a])</span><br><span class="line">        return a;</span><br><span class="line">    return pre[a] &#x3D; getf(pre[a]);</span><br><span class="line">&#125;</span><br><span class="line">int mer(int a, int b)</span><br><span class="line">&#123;</span><br><span class="line">    int fa &#x3D; getf(a);</span><br><span class="line">    int fb &#x3D; getf(b);</span><br><span class="line">    if (fa !&#x3D; fb)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[fa] &#x3D; fb;</span><br><span class="line">        ans--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    while (~scanf(&quot;%d%d&quot;, &amp;n, &amp;m), n)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        int a, b;</span><br><span class="line">        ans &#x3D; n - 1;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%d%d&quot;, &amp;a, &amp;b);</span><br><span class="line">            mer(a, b);</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%d\n&quot;, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="带权并查集"><a href="#带权并查集" class="headerlink" title="带权并查集"></a>带权并查集</h2><p><strong>就像名字一样，带权并查集就是要多维护一个权值数组;和普通的并查集大同小异,用pre[]数组存父节点，v存当前结点到父亲结点的权值。</strong></p><p>首先是初始化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">void init()</span><br><span class="line">&#123;</span><br><span class="line">    for (int i &#x3D; 0; i &lt;&#x3D; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[i] &#x3D; i;</span><br><span class="line">        v[i] &#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191012205623707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDc3NDU1,size_16,color_FFFFFF,t_70" alt="tu"></p><p>没有进行状态压缩的时候可以知道，pre[3]=2,pre[2]=1,pre[1]=1;v[3]=4;v[2]=3;v[1]=0;</p><p><img src="https://img-blog.csdnimg.cn/20191012205953664.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDc3NDU1,size_16,color_FFFFFF,t_70" alt="tu"></p><p>状态压缩后，pre[3]=1;v[3]=7;其他不变;所以可以得出代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int getf(int a)</span><br><span class="line">&#123;</span><br><span class="line">    if(pre[a]&#x3D;&#x3D;a)</span><br><span class="line">        return a;</span><br><span class="line">    int tmp&#x3D;getf(pre[a]);  &#x2F;&#x2F;这里不能够没有，因为在递归的过程中pre[a]的值会被改变，会影响v[a]的更新</span><br><span class="line">    v[a]&#x3D;v[a]+v[pre[a]];</span><br><span class="line">    return pre[a]&#x3D;tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而对于合并两个集合，是将元素间关系看成向量<br>我们可以列出向量图:</p><p><img src="https://img-blog.csdnimg.cn/20191012211424881.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDc3NDU1,size_16,color_FFFFFF,t_70" alt="tu"></p><p>我们假设上图中2-&gt;1表示1比2大3，同理得其他的，一开始1，2处于一个集合,3,处于另一个集合，现在要将这两个集合合并,那么1-&gt;4得权值就可以得出，根据平行四边形法则,v[1]=(-v[2]+v+v[3])=8(其中v表示3比2大多少有，也就是2-&gt;3)，就是说4比1大8，由此我们便得到了如何将两个带权集合合并。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void mer(int a, int b, int s)</span><br><span class="line">&#123;</span><br><span class="line">    int fa &#x3D; getf(a);</span><br><span class="line">    int fb &#x3D; getf(b);</span><br><span class="line">    if (fa !&#x3D; fb)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[fa] &#x3D; fb;</span><br><span class="line">        v[fa] &#x3D; -v[a] + s + v[b];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>例题一：HihoCoder-1515</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 100010;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">using namespace std;</span><br><span class="line">int pre[maxx], v[maxx];</span><br><span class="line">int n, m, q;</span><br><span class="line">int x, y, s;</span><br><span class="line">int ans;</span><br><span class="line">void init()</span><br><span class="line">&#123;</span><br><span class="line">    for (int i &#x3D; 0; i &lt;&#x3D; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[i] &#x3D; i;</span><br><span class="line">        v[i] &#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int getf(int a)</span><br><span class="line">&#123;</span><br><span class="line">    if (pre[a] &#x3D;&#x3D; a)</span><br><span class="line">        return a;</span><br><span class="line">    int tmp &#x3D; getf(pre[a]);</span><br><span class="line">    v[a] &#x3D; v[a] + v[pre[a]];</span><br><span class="line">    return pre[a] &#x3D; tmp;</span><br><span class="line">&#125;</span><br><span class="line">void mer(int a, int b, int s)</span><br><span class="line">&#123;</span><br><span class="line">    int fa &#x3D; getf(a);</span><br><span class="line">    int fb &#x3D; getf(b);</span><br><span class="line">    if (fa !&#x3D; fb)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[fa] &#x3D; fb;</span><br><span class="line">        v[fa] &#x3D; -v[a] + s + v[b];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">inline void read(T &amp;res) &#x2F;&#x2F;快速读入模板</span><br><span class="line">&#123;</span><br><span class="line">    char c;</span><br><span class="line">    T flag &#x3D; 1;</span><br><span class="line">    while ((c &#x3D; getchar()) &lt; &#39;0&#39; || c &gt; &#39;9&#39;)</span><br><span class="line">        if (c &#x3D;&#x3D; &#39;-&#39;)</span><br><span class="line">            flag &#x3D; -1;</span><br><span class="line">    res &#x3D; c - &#39;0&#39;;</span><br><span class="line">    while ((c &#x3D; getchar()) &gt;&#x3D; &#39;0&#39; &amp;&amp; c &lt;&#x3D; &#39;9&#39;)</span><br><span class="line">        res &#x3D; res * 10 + c - &#39;0&#39;;</span><br><span class="line">    res *&#x3D; flag;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    read(n), read(m), read(q);</span><br><span class="line">    init();</span><br><span class="line">    while (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        read(x), read(y), read(s);</span><br><span class="line">        mer(x, y, s);</span><br><span class="line">    &#125;</span><br><span class="line">    while (q--)</span><br><span class="line">    &#123;</span><br><span class="line">        read(x), read(y);</span><br><span class="line">        if (getf(x) &#x3D;&#x3D; getf(y))</span><br><span class="line">            printf(&quot;%d\n&quot;, v[x] - v[y]);</span><br><span class="line">        else</span><br><span class="line">            printf(&quot;-1\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>例题二：HDU-3038</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 200010;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">using namespace std;</span><br><span class="line">int pre[maxx], v[maxx];</span><br><span class="line">int n, m;</span><br><span class="line">int x, y, s;</span><br><span class="line">void init()</span><br><span class="line">&#123;</span><br><span class="line">    for (int i &#x3D; 0; i &lt;&#x3D; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[i] &#x3D; i;</span><br><span class="line">        v[i] &#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int getf(int a)</span><br><span class="line">&#123;</span><br><span class="line">    if (pre[a] &#x3D;&#x3D; a)</span><br><span class="line">        return a;</span><br><span class="line">    int tmp &#x3D; getf(pre[a]);</span><br><span class="line">    v[a] &#x3D; v[a] + v[pre[a]];</span><br><span class="line">    return pre[a] &#x3D; tmp;</span><br><span class="line">&#125;</span><br><span class="line">int mer(int a, int b, int s)</span><br><span class="line">&#123;</span><br><span class="line">    int fa &#x3D; getf(a);</span><br><span class="line">    int fb &#x3D; getf(b);</span><br><span class="line">    if (fa &#x3D;&#x3D; fb)</span><br><span class="line">        return v[a] !&#x3D; v[b] + s;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        pre[fa] &#x3D; fb;</span><br><span class="line">        v[fa] &#x3D; -v[a] + v[b] + s;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    while (~scanf(&quot;%d%d&quot;, &amp;n, &amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        int ans &#x3D; 0;</span><br><span class="line">        while (m--)</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%d%d%d&quot;, &amp;x, &amp;y, &amp;s);</span><br><span class="line">            y++;</span><br><span class="line">            if (mer(x, y, s))</span><br><span class="line">                ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%d\n&quot;, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="种类并查集"><a href="#种类并查集" class="headerlink" title="种类并查集"></a>种类并查集</h2><p><strong>种类并查集，顾名思义，在所给数据中或多或少会带有种类的区别。</strong></p><p>种类并查集延用了带权并查集的特性,还是相当于维护了一个权值，只不过这个权值带有一定的意义，拿例题“食物链”来说，我们指定x-&gt;y表示与y是x的父节点，即pre[x]=y;我们用rela[i]来表示节点i和它的父节点之间的关系，规定rela[x]=0表示x,y是同类，rela[x]=1表示y吃x，rela[x]=2表示x吃y，那么我们可以根据这些权值推断出两个结点之间实际的关系。</p><p><img src="https://img-blog.csdnimg.cn/20191022194850194.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDc3NDU1,size_16,color_FFFFFF,t_70" alt="tu"></p><p>比如现在告诉你3-&gt;1的值为1（1吃3），而2-&gt;1的值为2（2吃1），那么我们根据题意就可以得出3吃2，即2-&gt;3为1,也就得到了上图的关系。假设现在再来一句话说2吃3那么就是错的。问题是如何得到这样的关系。对于给定的x,y和它们之间的关系,我们分两种情况<br>1.假设pre[x]==pre[y]，就是说它们是一个集合的，现在的任务就是把它们推出它们之间的关系，也就是上图的情况，1为父节点，先开始的条件有3-&gt;1的为1,2-&gt;1=2，如何得到2-&gt;3=1呢？同样我们可以用向量的方法：2-&gt;3=2-&gt;1 - 1-&gt;3(添负号，箭头反向)=2-1=1；这样我们得到了2-&gt;3的值为1（这里在想一下，如果我们想得到假设之前我们已经建立了2-&gt;1的关系，现在又给出2-&gt;1的关系，如何得到到给出的关系对不对呢；我们只需要把上图的3换成1就可以了，同时3-&gt;1=1就变成了1-&gt;1=0同样的方法）<br>2.假设pre[x]!=pre[y]，x,y不在同一个集合也就是要联合x,y两个集合,已知y-&gt;x=1,x-&gt;fx=1,y-&gt;fy=0</p><p><img src="https://img-blog.csdnimg.cn/20191022200751469.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDc3NDU1,size_16,color_FFFFFF,t_70" alt="tu"></p><p>同样的用向量就可以了fy-&gt;fx=-(y-&gt;fy)+y-&gt;x+x-&gt;fx=1+1=2;(已知fx吃x，x吃y，y和fy是同类，所以由题意可知fy吃fx),这样我们就可以将两个集合联合在一起并且维护好关系。<br>值得注意的是，这些操作对向量方向的要求很高，不能弄错方向，比如联合两个集合的时候,我们求的是fy-&gt;fx，也就是fy是儿子，fx是父亲,那么我们就应该pre[fy]=fx；而不是pre[fx]=fy;同样我们求的关系是rela[fy]的值，而不是rela[fx]，如果箭头反向，这些操作都要变.</p><p><strong>给出食物链这题的代码(POJ-1182)：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 100010;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">using namespace std;</span><br><span class="line">int pre[maxx], rela[maxx];</span><br><span class="line">int n, k;</span><br><span class="line">void init()</span><br><span class="line">&#123;</span><br><span class="line">    for (int i &#x3D; 0; i &lt;&#x3D; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[i] &#x3D; i;</span><br><span class="line">        rela[i] &#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int getf(int a)</span><br><span class="line">&#123;</span><br><span class="line">    if (pre[a] &#x3D;&#x3D; a)</span><br><span class="line">        return a;</span><br><span class="line">    int tmp &#x3D; getf(pre[a]);</span><br><span class="line">    rela[a] &#x3D; (rela[a] + rela[pre[a]] + 3) % 3;</span><br><span class="line">    return pre[a] &#x3D; tmp;</span><br><span class="line">&#125;</span><br><span class="line">int mer(int c, int a, int b)</span><br><span class="line">&#123;</span><br><span class="line">    int fa &#x3D; getf(a);</span><br><span class="line">    int fb &#x3D; getf(b);</span><br><span class="line">    if (fa &#x3D;&#x3D; fb)</span><br><span class="line">    &#123;</span><br><span class="line">        if (c &#x3D;&#x3D; 1 &amp;&amp; rela[a] &#x3D;&#x3D; rela[b])</span><br><span class="line">            return 1;</span><br><span class="line">        else if (c &#x3D;&#x3D; 2 &amp;&amp; (rela[a] - rela[b] + 3) % 3 &#x3D;&#x3D; c - 1)</span><br><span class="line">            return 1;</span><br><span class="line">        else</span><br><span class="line">            return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        pre[fb] &#x3D; fa;</span><br><span class="line">        rela[fb] &#x3D; (-rela[b] + rela[a] - c + 1 + 3) % 3;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    scanf(&quot;%d%d&quot;, &amp;n, &amp;k);</span><br><span class="line">    init();</span><br><span class="line">    int d, x, y;</span><br><span class="line">    int sum &#x3D; 0;</span><br><span class="line">    while (k--)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf(&quot;%d%d%d&quot;, &amp;d, &amp;x, &amp;y);</span><br><span class="line">        if (x &gt; n || y &gt; n)</span><br><span class="line">            sum++;</span><br><span class="line">        else if (d &#x3D;&#x3D; 2 &amp;&amp; x &#x3D;&#x3D; y)</span><br><span class="line">            sum++;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            if (!mer(d, x, y))</span><br><span class="line">                sum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d\n&quot;, sum);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>例题二：POJ-1703</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxx &#x3D; 100010;</span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">using namespace std;</span><br><span class="line">int pre[maxx * 2];</span><br><span class="line">int n, m;</span><br><span class="line">void init()</span><br><span class="line">&#123;</span><br><span class="line">    for (int i &#x3D; 0; i &lt;&#x3D; 2 * n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[i] &#x3D; i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int getf(int a)</span><br><span class="line">&#123;</span><br><span class="line">    if (pre[a] &#x3D;&#x3D; a)</span><br><span class="line">        return a;</span><br><span class="line">    int tmp &#x3D; getf(pre[a]);</span><br><span class="line">    return pre[a] &#x3D; tmp;</span><br><span class="line">&#125;</span><br><span class="line">void mer(int a, int b)</span><br><span class="line">&#123;</span><br><span class="line">    int fa &#x3D; getf(a);</span><br><span class="line">    int fb &#x3D; getf(b);</span><br><span class="line">    if (fa !&#x3D; fb)</span><br><span class="line">        pre[fa] &#x3D; fb;</span><br><span class="line">&#125;</span><br><span class="line">int same(int a, int b)</span><br><span class="line">&#123;</span><br><span class="line">    return getf(a) &#x3D;&#x3D; getf(b);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int t;</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;t);</span><br><span class="line">    while (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf(&quot;%d%d&quot;, &amp;n, &amp;m);</span><br><span class="line">        init();</span><br><span class="line">        char s;</span><br><span class="line">        int a, b;</span><br><span class="line">        while (m--)</span><br><span class="line">        &#123;</span><br><span class="line">            getchar();</span><br><span class="line">            scanf(&quot;%c%d%d&quot;, &amp;s, &amp;a, &amp;b);</span><br><span class="line">            if (s &#x3D;&#x3D; &#39;D&#39;)</span><br><span class="line">            &#123;</span><br><span class="line">                mer(a, b + n);</span><br><span class="line">                mer(b, a + n);</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                if (same(a, b))</span><br><span class="line">                &#123;</span><br><span class="line">                    printf(&quot;In the same gang.\n&quot;);</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                else if (same(a, b + n))</span><br><span class="line">                &#123;</span><br><span class="line">                    printf(&quot;In different gangs.\n&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                else</span><br><span class="line">                &#123;</span><br><span class="line">                    printf(&quot;Not sure yet.\n&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;因为之前4月份打了将近一个月的个人赛，有些以前学习过的算法已经忘了，所以重新再温习一遍。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法重温" scheme="https://stephencurry6666.github.io/categories/%E7%AE%97%E6%B3%95%E9%87%8D%E6%B8%A9/"/>
    
    
      <category term="并查集再温" scheme="https://stephencurry6666.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%86%8D%E6%B8%A9/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE篇-Day2笔记</title>
    <link href="https://stephencurry6666.github.io/2020/05/05/JavaSE-Day(2)%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://stephencurry6666.github.io/2020/05/05/JavaSE-Day(2)%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-05-05T07:12:42.825Z</published>
    <updated>2020-05-06T08:20:56.884Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java语言基础"><a href="#Java语言基础" class="headerlink" title="Java语言基础"></a>Java语言基础</h1><h2 id="Java基础语法"><a href="#Java基础语法" class="headerlink" title="Java基础语法"></a>Java基础语法</h2><h3 id="1-关键字"><a href="#1-关键字" class="headerlink" title="1.关键字"></a>1.关键字</h3><a id="more"></a><p><strong>关键字概述：</strong><br>被Java语言赋予特定含义的单词。</p><p><strong>关键字特点：</strong><br>组成关键字的字母全部小写。</p><p><strong>注意事项：</strong><br>goto和const是保留字，在一般的高级Java编译器中，针对关键字都有特殊的颜色标记。</p><ul><li><strong>Java关键字</strong></li></ul><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1588673781789&amp;di=405fa28b84d8a8b0464f054e43655198&amp;imgtype=0&amp;src=http%3A%2F%2Fpic4.zhimg.com%2Fv2-b1d047a34f15efeabd5211fd54f73b0b_b.jpg" alt="Java关键字"></p><h3 id="2-标识符"><a href="#2-标识符" class="headerlink" title="2.标识符"></a>2.标识符</h3><p><strong>标识符概述：</strong><br>就是给类，接口，方法，变量等起名字时使用的字符序列</p><p><strong>组成规则：</strong></p><ul><li><strong>英文大小写字母</strong></li><li><strong>数字字符</strong></li><li><strong>$和_</strong></li></ul><p><strong>注意事项：</strong></p><ul><li><strong>不能以数字开头</strong></li><li><strong>不能是Java中的关键字</strong></li><li><strong>区分大小写</strong></li></ul><h3 id="3-标识符的常见命名规则"><a href="#3-标识符的常见命名规则" class="headerlink" title="3.标识符的常见命名规则"></a>3.标识符的常见命名规则</h3><p><strong>注意事项：</strong><br>见名知意</p><ul><li><strong>举例：我要定义一个学生类</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class Student &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>包：</strong><br>其实就是文件夹，用于把相同的类名进行区分，全部小写</p><ul><li><strong>单级：liuyi</strong></li><li><strong>多级：cn.itcast</strong></li></ul><p><strong>类或者接口：</strong></p><ul><li><strong>一个单词：单词的首字母必须大写,举例：Student，Dog</strong></li><li><strong>多个单词：每个单词的首字母必须大写，举例：HelloWorld，StudentName</strong></li></ul><p><strong>方法或者变量：</strong></p><ul><li><strong>一个单词：单词的首字母小写，举例：main，age</strong></li><li><strong>多个单词：从第二个单词开始，每个单词的首字母大写，举例：studentAge,showAllNames</strong></li></ul><p><strong>常量：</strong></p><ul><li><strong>一个单词组成：全部大写，举例：PI</strong></li><li><strong>多个单词组成：每个字母都大写，用_隔开，举例：STUDENT_MAX_AGE</strong></li></ul><h3 id="4-注释概述及其分类"><a href="#4-注释概述及其分类" class="headerlink" title="4.注释概述及其分类"></a>4.注释概述及其分类</h3><p><strong>注释概述：</strong><br>用于解释说明的文字</p><p><strong>Java中注释分类格式：</strong></p><ul><li><strong>单行注释：格式：//注释文字</strong></li><li><strong>多行注释：格式：/星 注释文字 星/，注意：多行不可以嵌套使用，而单行是可以的</strong></li><li><strong>文档注释：格式：/星星 注释文字 星/</strong></li></ul><h3 id="5-HelloWorld案例加入注释"><a href="#5-HelloWorld案例加入注释" class="headerlink" title="5.HelloWorld案例加入注释"></a>5.HelloWorld案例加入注释</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line"> 需求：我准备写一个java程序，把&quot;HelloWorld&quot;这句话输出在控制台</span><br><span class="line"></span><br><span class="line">分析：</span><br><span class="line">A:要写一个Java程序，必须定义类</span><br><span class="line">B:把数据能够输出，说明我们的程序是可以独立运行的，而程序要独立运行，必须定义main方法</span><br><span class="line">C:把数据输出在控制台，必须使用输出语句</span><br><span class="line">实现：</span><br><span class="line">A:java语言提供了一个关键字：class用来定义类，后面跟的是类名</span><br><span class="line">B:main方法的格式是固定的：</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">C:输出语句的格式是固定的：</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">&quot;HelloWorld&quot;这个内容是可以改变的</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;这是我的HelloWorld案例</span><br><span class="line">class HelloWorld &#123;</span><br><span class="line">&#x2F;*</span><br><span class="line">为了程序能够独立运行，定义main方法</span><br><span class="line">main方法是程序的入口</span><br><span class="line">被jvm自动调用</span><br><span class="line">*&#x2F;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">  &#x2F;&#x2F;为了把数据显示在控制台，我们就使用了输出语句</span><br><span class="line"> System.out.println(&quot;HelloWorld&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-注释的作用"><a href="#6-注释的作用" class="headerlink" title="6.注释的作用"></a>6.注释的作用</h3><p>略过，在Eclipse Jee 2018-12程序中编写Java代码时，有错误的话，编译器会提示。</p><h3 id="7-常量的概述和使用"><a href="#7-常量的概述和使用" class="headerlink" title="7.常量的概述和使用"></a>7.常量的概述和使用</h3><p><strong>常量概述：</strong><br>在程序执行的过程中其值不可以发生改变</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">    常量：</span><br><span class="line">        在程序执行过程中，其值不发生改变的量。</span><br><span class="line"></span><br><span class="line">    分类：</span><br><span class="line">        A:字面值常量</span><br><span class="line">        B:自定义常量(后面讲)</span><br><span class="line"></span><br><span class="line">    字面值常量</span><br><span class="line">        A:字符串常量  用双引号括起来的内容。</span><br><span class="line">            举例：&quot;hello&quot;,&quot;world&quot;,&quot;HelloWorld&quot;</span><br><span class="line">        B:整数常量   所有的整数</span><br><span class="line">            举例：100,200</span><br><span class="line">        C:小数常量   所有的小数</span><br><span class="line">            举例：10.23,110.11</span><br><span class="line">D:字符常量用单引号括起来的内容</span><br><span class="line">举例：&#39;a&#39;,&#39;A&#39;,&#39;0&#39;</span><br><span class="line">错误的：&#39;ab&#39;</span><br><span class="line">E:布尔常量比较特殊</span><br><span class="line">举例：true,false</span><br><span class="line">F:空常量后面讲</span><br><span class="line">举例：null</span><br><span class="line">*&#x2F;</span><br><span class="line">class ConstantDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;字符串常量的输出</span><br><span class="line">System.out.println(&quot;hello&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;整数常量的输出</span><br><span class="line">System.out.println(100);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;小数常量的输出</span><br><span class="line">System.out.println(100.10);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;字符常量的输出</span><br><span class="line">System.out.println(&#39;a&#39;);</span><br><span class="line">System.out.println(&#39;A&#39;);</span><br><span class="line">System.out.println(&#39;0&#39;);</span><br><span class="line">&#x2F;&#x2F;这个是有问题的</span><br><span class="line">&#x2F;&#x2F;System.out.println(&#39;ab&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;布尔常量的输出</span><br><span class="line">System.out.println(true);</span><br><span class="line">System.out.println(false);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-进制概述以及二进制、八进制、十六进制图解"><a href="#8-进制概述以及二进制、八进制、十六进制图解" class="headerlink" title="8.进制概述以及二进制、八进制、十六进制图解"></a>8.进制概述以及二进制、八进制、十六进制图解</h3><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1588680207620&amp;di=5dc7fbed0760175d40d1bbb10baa7b8d&amp;imgtype=0&amp;src=http%3A%2F%2Fgss0.baidu.com%2F9fo3dSag_xI4khGko9WTAnF6hhy%2Fzhidao%2Fpic%2Fitem%2Fd439b6003af33a87736ff400c45c10385343b5ae.jpg" alt="进制"></p><p><strong>二进制-&gt;八进制：</strong><br>把二进制的数据，从右开始，每三位一组合，最左边不够的时候，补0。然后，分别计算出对应的十进制数值，最后，再把每个十进制的数据组合起来，就是一个八进制数据。</p><p><strong>二进制-&gt;十六进制：</strong><br>把二进制的数据，从右开始，每四位一组合，最左边不够的时候，补0。然后，分别计算出对应的十进制数值，最后，再把每个十进制的数据组合起来，就是一个十六进制数据。</p><p><strong>规则：进制越大，表现形式越短</strong></p><h3 id="9-不同进制数据的表现形式"><a href="#9-不同进制数据的表现形式" class="headerlink" title="9.不同进制数据的表现形式"></a>9.不同进制数据的表现形式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">不同进制的数据表现：</span><br><span class="line">二进制：由0，1组成。以0b开头。</span><br><span class="line">八进制：由0,1,...7组成。以0开头。</span><br><span class="line">十进制：由0,1,...9组成。默认整数是十进制。</span><br><span class="line">十六进制：由0,1,...9,a,b,c,d,e,f(大小写均可)组成。以0x开头。</span><br><span class="line">*&#x2F;</span><br><span class="line">class JinZhiDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">System.out.println(100); &#x2F;&#x2F;十进制</span><br><span class="line"></span><br><span class="line">System.out.println(0b100); &#x2F;&#x2F;二进制</span><br><span class="line">System.out.println(0100); &#x2F;&#x2F;八进制</span><br><span class="line">System.out.println(0x100); &#x2F;&#x2F;十六进制</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-任意进制到十进制的转换"><a href="#10-任意进制到十进制的转换" class="headerlink" title="10.任意进制到十进制的转换"></a>10.任意进制到十进制的转换</h3><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1588680802524&amp;di=c3fd9ec5b2d6bae9fefda7479f3c2742&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.myexception.cn%2Fimg%2F2015%2F07%2F11%2F060509721.png" alt="转换"></p><p><strong>系数：每一个位上的数据值本身就是系数。</strong></p><p><strong>基数：x进制的基数就是x。</strong></p><p><strong>权：我们针对每一个位上的数据进行编号，从右边，并且是从0开始编号，这个编号就是该位上数据的权值。</strong></p><p><strong>PS：每一个位上的系数x基数^权次幂相加。</strong></p><h3 id="11-十进制到任意进制的转换"><a href="#11-十进制到任意进制的转换" class="headerlink" title="11.十进制到任意进制的转换"></a>11.十进制到任意进制的转换</h3><p><strong>方法：这个数对基数依次取余，将余数倒序输出，在倒序输出余数之前正序输出最后一次的商。（这个方法是很简单的一种方式，可以大大的节省时间）。</strong></p><p><strong>将十进制转成八进制：</strong><br>579 / 8 = 72　．．．3<br>72 / 8 =9　．．．0<br>9 / 8 =1　．．．1</p><p>先输出最后一次计算的商，然后倒序从下到上输出余数<br>八进制的 576 为　1103</p><h3 id="12-快速的进制转换法"><a href="#12-快速的进制转换法" class="headerlink" title="12.快速的进制转换法"></a>12.快速的进制转换法</h3><p><strong>8421码</strong></p><p><img src="https://img-blog.csdnimg.cn/20181213115022126.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjUxODA2Mg==,size_16,color_FFFFFF,t_70" alt="8421"></p><h3 id="13-原码、反码、补码的讲解"><a href="#13-原码、反码、补码的讲解" class="headerlink" title="13.原码、反码、补码的讲解"></a>13.原码、反码、补码的讲解</h3><p><strong>在探求为何机器要使用补码之前, 让我们先了解原码, 反码和补码的概念.对于一个数, 计算机要使用一定的编码方式进行存储. 原码, 反码, 补码是机器存储一个具体数字的编码方式。</strong></p><p><strong>原码：</strong><br>原码就是符号位加上真值的绝对值, 即用第一位表示符号, 其余位表示值. 比如如果是8位二进制:</p><p>[+1]原 = 0000 0001</p><p>[-1]原 = 1000 0001</p><p>第一位是符号位. 因为第一位是符号位, 所以8位二进制数的取值范围就是:[1111 1111 , 0111 1111]即[-127 , 127]，原码是人脑最容易理解和计算的表示方式。</p><p><strong>反码：</strong><br>反码的表示方法是:正数的反码是其本身；负数的反码是在其原码的基础上, 符号位不变，其余各个位取反。</p><p>[+1] = [00000001]原 = [00000001]反</p><p>[-1] = [10000001]原 = [11111110]反</p><p>可见如果一个反码表示的是负数, 人脑无法直观的看出来它的数值. 通常要将其转换成原码再计算。</p><p><strong>补码：</strong><br>补码的表示方法是:正数的补码就是其本身；负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后+1. (即在反码的基础上+1)。</p><p>[+1] = [00000001]原 = [00000001]反 = [00000001]补</p><p>[-1] = [10000001]原 = [11111110]反 = [11111111]补</p><p>对于负数, 补码表示方式也是人脑无法直观看出其数值的. 通常也需要转换成原码在计算其数值。</p><h3 id="14-变量的概述及格式"><a href="#14-变量的概述及格式" class="headerlink" title="14.变量的概述及格式"></a>14.变量的概述及格式</h3><p><strong>变量的概念：</strong></p><ul><li><p><strong>在程序执行的过程中，在某个范围内其值可以发生改变的量</strong></p></li><li><p><strong>从本质上讲，变量其实是内存中的一小块区域，使用变量名来访问这块区域，因此，每一个变量使用前必须要先申请（声明），然后必须进行赋值（填充内容），才能使用。</strong></p></li></ul><p><strong>变量定义格式：</strong></p><ul><li><strong>数据类型 变量名 = 初始化值;</strong></li></ul><p>注意：格式是固定的，记住格式，以不变应万变</p><h3 id="15-数据类型的概述和分类和定义不同数据类型的变量"><a href="#15-数据类型的概述和分类和定义不同数据类型的变量" class="headerlink" title="15.数据类型的概述和分类和定义不同数据类型的变量"></a>15.数据类型的概述和分类和定义不同数据类型的变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">数据类型：Java是一种强类型的语言，针对每一种数据都定义了明确的数据类型。</span><br><span class="line"></span><br><span class="line">数据类型分类：</span><br><span class="line">A:基本数据类型</span><br><span class="line">B:引用数据类型(类,接口,数值)</span><br><span class="line"></span><br><span class="line">基本数据类型:4类8种</span><br><span class="line">A:整数占用字节数</span><br><span class="line">byte1</span><br><span class="line">short2</span><br><span class="line">int4</span><br><span class="line">long8</span><br><span class="line"></span><br><span class="line">B:浮点数</span><br><span class="line">float 4</span><br><span class="line">double 8</span><br><span class="line"></span><br><span class="line">C:字符</span><br><span class="line">char2</span><br><span class="line">D:布尔</span><br><span class="line">boolean1</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">整数默认是int类型</span><br><span class="line">浮点数默认是double类型。</span><br><span class="line"></span><br><span class="line">长整型后缀用L或者l标记。建议使用L。</span><br><span class="line">单精度浮点数用F或者f标记。建议使用F。</span><br><span class="line">*&#x2F;</span><br><span class="line">class DataTypeDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;定义变量的格式：</span><br><span class="line">&#x2F;&#x2F;数据类型 变量名 &#x3D; 初始化值;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义一个字节变量</span><br><span class="line">byte b &#x3D; 10;</span><br><span class="line">System.out.println(10);</span><br><span class="line">System.out.println(b);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义一个短整型变量</span><br><span class="line">short s &#x3D; 100;</span><br><span class="line">System.out.println(s);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义一个整型变量</span><br><span class="line">int i &#x3D; 1000;</span><br><span class="line">System.out.println(i);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;超过了int的范围</span><br><span class="line">&#x2F;&#x2F;int j &#x3D; 1000000000000;</span><br><span class="line">long j &#x3D; 1000000000000L;</span><br><span class="line">&#x2F;&#x2F;long j &#x3D; 100L;</span><br><span class="line">System.out.println(j);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义浮点数据变量</span><br><span class="line">float f &#x3D; 12.345F;</span><br><span class="line">System.out.println(f);</span><br><span class="line"></span><br><span class="line">double d &#x3D; 12.345;</span><br><span class="line">System.out.println(d);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义字符变量</span><br><span class="line">char ch &#x3D; &#39;a&#39;;</span><br><span class="line">System.out.println(ch);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义布尔变量</span><br><span class="line">boolean flag &#x3D; true;</span><br><span class="line">System.out.println(flag);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="16-使用变量的注意事项"><a href="#16-使用变量的注意事项" class="headerlink" title="16.使用变量的注意事项"></a>16.使用变量的注意事项</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">使用变量的时候要注意的问题：</span><br><span class="line">A:作用域</span><br><span class="line">变量定义在哪个大括号内，它就在这个大括号内有效。</span><br><span class="line">并且，在同一个大括号内不能同时定义同名的变量。</span><br><span class="line"></span><br><span class="line">B:初始化值</span><br><span class="line">没有初始化值的变量不能直接使用。</span><br><span class="line">你只要在使用前给值就行，不一定非要在定义的时候立即给值。</span><br><span class="line">推荐在定义的时候给值。</span><br><span class="line"></span><br><span class="line">定义变量的格式：</span><br><span class="line">a:数据类型 变量名 &#x3D; 初始化值;</span><br><span class="line">b:数据类型 变量名;</span><br><span class="line">  变量名 &#x3D; 初始化值;</span><br><span class="line"></span><br><span class="line">C:在一行上建议只定义一个变量</span><br><span class="line">可以定义多个，但是不建议</span><br><span class="line">*&#x2F;</span><br><span class="line">class DataTypeDemo2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;定义变量</span><br><span class="line">int x &#x3D; 100;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;错误，不能有同名的</span><br><span class="line">&#x2F;&#x2F;int x &#x3D; 200;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义变量必须给值</span><br><span class="line">&#x2F;&#x2F;int y;</span><br><span class="line">&#x2F;&#x2F;System.out.println(y);</span><br><span class="line"></span><br><span class="line">int z;</span><br><span class="line">z &#x3D; 100;</span><br><span class="line">System.out.println(z);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;在一行上定义多个变量</span><br><span class="line">&#x2F;&#x2F;int a &#x3D; 10; int b &#x3D; 20; int c  &#x3D; 30;</span><br><span class="line">&#x2F;&#x2F;上面的写法可以，但是不建议。</span><br><span class="line">int a &#x3D; 10;</span><br><span class="line">int b &#x3D; 20;</span><br><span class="line">int c  &#x3D; 30;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;int d, e;</span><br><span class="line">&#x2F;&#x2F;d &#x3D; 40;</span><br><span class="line">&#x2F;&#x2F;e &#x3D; 50;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;int f,int g; &#x2F;&#x2F;错误</span><br><span class="line">&#x2F;&#x2F;int h; int i; &#x2F;&#x2F;正确</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="17-数据类型转换默认转换"><a href="#17-数据类型转换默认转换" class="headerlink" title="17.数据类型转换默认转换"></a>17.数据类型转换默认转换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">+是一个运算符(我们等会讲解)。做加法运算的。</span><br><span class="line"></span><br><span class="line">一般来说，我们在运算的时候，要求参与运算的数据类型必须一致。</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">boolean类型不能转换为其他的数据类型</span><br><span class="line"></span><br><span class="line">默认转换(从小到大的转换)</span><br><span class="line">A:byte,short,char—int—long—float—double</span><br><span class="line">B:byte,short,char相互之间不转换，他们参与运算首先转换为int类型</span><br><span class="line">*&#x2F;</span><br><span class="line">class DataTypeDemo3 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;直接输出的方式做加法</span><br><span class="line">&#x2F;&#x2F;System.out.println(3 + 4);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;两个int类型做加法</span><br><span class="line">int x &#x3D; 3;</span><br><span class="line">int y &#x3D; 4;</span><br><span class="line">int z &#x3D; x + y;</span><br><span class="line">System.out.println(z);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义一个byte类型，一个int类型，做加法</span><br><span class="line">byte a &#x3D; 3;</span><br><span class="line">int b &#x3D; 4;</span><br><span class="line">System.out.println(a + b);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;可能损失精度</span><br><span class="line">&#x2F;&#x2F;byte c &#x3D;  a + b;</span><br><span class="line">int c &#x3D; a + b;</span><br><span class="line">System.out.println(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="18-数据类型转换强制转换"><a href="#18-数据类型转换强制转换" class="headerlink" title="18.数据类型转换强制转换"></a>18.数据类型转换强制转换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">强制转换：</span><br><span class="line">从大的数据类型到小的数据类型。</span><br><span class="line"></span><br><span class="line">格式：</span><br><span class="line">目标数据类型 变量 &#x3D; (目标数据类型) (被转换的数据);</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">不要随意的去使用强制转换，因为它隐含了精度损失问题。</span><br><span class="line">*&#x2F;</span><br><span class="line">class DataTypeDemo4 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">byte a &#x3D; 3;</span><br><span class="line">int b &#x3D; 4;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;这个肯定没有问题</span><br><span class="line">&#x2F;&#x2F;int c &#x3D; a + b;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;byte c &#x3D; 7;</span><br><span class="line">&#x2F;&#x2F;这个是有问题的</span><br><span class="line">&#x2F;&#x2F;byte c &#x3D; a + b; </span><br><span class="line">&#x2F;&#x2F;用强制类型转换改进</span><br><span class="line">byte c &#x3D; (byte) (a + b);</span><br><span class="line">System.out.println(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="19-强制转换的思考题"><a href="#19-强制转换的思考题" class="headerlink" title="19.强制转换的思考题"></a>19.强制转换的思考题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">思考题1：请问下面这个有没有问题</span><br><span class="line">double d &#x3D; 12.345;</span><br><span class="line">float f &#x3D; d;</span><br><span class="line"></span><br><span class="line">思考题2：看看下面两个定义有没有区别呢?</span><br><span class="line">float f1 &#x3D; (float)12.345;</span><br><span class="line">float f2 &#x3D; 12.345f;</span><br><span class="line"></span><br><span class="line">f1其实是通过一个double类型转换过来的。</span><br><span class="line">而f2本身就是一个float类型。</span><br><span class="line">*&#x2F;</span><br><span class="line">class DataTypeDemo5 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;把double赋值给float，加了强制类型转换</span><br><span class="line">double d &#x3D; 12.345;</span><br><span class="line">float f &#x3D; (float)d;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;看看下面两个定义有没有区别呢?</span><br><span class="line">float f1 &#x3D; (float)12.345;</span><br><span class="line">float f2 &#x3D; 12.345F;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="20-变量相加和常量相加的面试题"><a href="#20-变量相加和常量相加的面试题" class="headerlink" title="20.变量相加和常量相加的面试题"></a>20.变量相加和常量相加的面试题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">面试题：</span><br><span class="line">byte b1&#x3D;3,b2&#x3D;4,b;</span><br><span class="line">b&#x3D;b1+b2;</span><br><span class="line">b&#x3D;3+4;</span><br><span class="line">哪句是编译失败的呢？为什么呢？</span><br><span class="line">b &#x3D; b1 + b2;是有问题的。</span><br><span class="line">因为变量相加，会首先看类型问题，最终把结果赋值的也会考虑类型问题。</span><br><span class="line">常量相加，首先做加法，然后看结果是否在赋值的数据类型范围内，如果不是，才报错。</span><br><span class="line">*&#x2F;</span><br><span class="line">class DataTypeDemo6 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;定义了三个byte类型的变量，b1，b2，b3</span><br><span class="line">&#x2F;&#x2F;b1的值是3，b2的值是4，b没有值</span><br><span class="line">byte b1 &#x3D; 3,b2 &#x3D; 4,b;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;b &#x3D; b1 + b2; &#x2F;&#x2F;这个是类型提升，所以有问题</span><br><span class="line"></span><br><span class="line">b &#x3D; 3 + 4; &#x2F;&#x2F;常量，先把结果计算出来，然后看是否在byte的范围内，如果在就不报错。</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="21-强制转换数据溢出后的结果怎么算"><a href="#21-强制转换数据溢出后的结果怎么算" class="headerlink" title="21.强制转换数据溢出后的结果怎么算"></a>21.强制转换数据溢出后的结果怎么算</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">byte b &#x3D; 130;有没有问题?如果我想让赋值正确，可以怎么做?结果是多少呢?</span><br><span class="line"></span><br><span class="line">练习：byte b &#x3D; (byte)300;</span><br><span class="line">*&#x2F;</span><br><span class="line">class DataTypeDemo7 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;因为byte的范围是：-128到127。</span><br><span class="line">&#x2F;&#x2F;而130不在此范围内，所以报错。</span><br><span class="line">&#x2F;&#x2F;byte b &#x3D; 130; </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;我们可以使用强制类型转换</span><br><span class="line">byte b &#x3D; (byte) 130;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;结果是多少呢?</span><br><span class="line">System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">分析过程：</span><br><span class="line">我们要想知道结果是什么，就应该知道是如何进行计算的。</span><br><span class="line">而我们又知道计算机中数据的运算都是补码进行的。</span><br><span class="line">而要得到补码，首先要计算出数据的二进制。</span><br><span class="line"></span><br><span class="line">A:获取130这个数据的二进制。</span><br><span class="line">00000000 00000000 00000000 10000010</span><br><span class="line">这是130的原码，也是反码，还是补码。</span><br><span class="line">B:做截取操作，截成byte类型的了。</span><br><span class="line">10000010 </span><br><span class="line">这个结果是补码。</span><br><span class="line">C:已知补码求原码。</span><br><span class="line">符号位数值位</span><br><span class="line">补码：10000010</span><br><span class="line"></span><br><span class="line">反码：10000001</span><br><span class="line"></span><br><span class="line">原码：11111110</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="22-字符数据参与运算"><a href="#22-字符数据参与运算" class="headerlink" title="22.字符数据参与运算"></a>22.字符数据参与运算</h3><p><strong>常用字符与ASCII代码对照表</strong></p><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1588762945712&amp;di=15da2d4da03c11464b6f7ef905bd8194&amp;imgtype=0&amp;src=http%3A%2F%2Faliyunzixunbucket.oss-cn-beijing.aliyuncs.com%2Fjpg%2F5802ba54ea55b831c41d5a4b5b13e641.jpg%3Fx-oss-process%3Dimage%2Fresize%2Cp_100%2Fauto-orient%2C1%2Fquality%2Cq_90%2Fformat%2Cjpg%2Fwatermark%2Cimage_eXVuY2VzaGk%3D%2Ct_100" alt="ACSII"></p><h3 id="23-字符串参与运算"><a href="#23-字符串参与运算" class="headerlink" title="23.字符串参与运算"></a>23.字符串参与运算</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">看程序写结果</span><br><span class="line">字符串数据和其他数据做+，结果是字符串类型。</span><br><span class="line">这里的+不是加法运算，而是字符串连接符。</span><br><span class="line">*&#x2F;</span><br><span class="line">class DataTypeDemo9 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">System.out.println(&quot;hello&quot;+&#39;a&#39;+1); &#x2F;&#x2F;helloa1，因为有优先级</span><br><span class="line">System.out.println(&#39;a&#39;+1+&quot;hello&quot;); &#x2F;&#x2F;98hello</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;5+5&#x3D;&quot;+5+5); &#x2F;&#x2F;5+5&#x3D;55</span><br><span class="line">System.out.println(5+5+&quot;&#x3D;5+5&quot;); &#x2F;&#x2F;10&#x3D;5+5</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运算符优先级</strong></p><p><img src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=807700448,2127105133&amp;fm=26&amp;gp=0.jpg" alt="运算符优先级"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java语言基础&quot;&gt;&lt;a href=&quot;#Java语言基础&quot; class=&quot;headerlink&quot; title=&quot;Java语言基础&quot;&gt;&lt;/a&gt;Java语言基础&lt;/h1&gt;&lt;h2 id=&quot;Java基础语法&quot;&gt;&lt;a href=&quot;#Java基础语法&quot; class=&quot;headerlink&quot; title=&quot;Java基础语法&quot;&gt;&lt;/a&gt;Java基础语法&lt;/h2&gt;&lt;h3 id=&quot;1-关键字&quot;&gt;&lt;a href=&quot;#1-关键字&quot; class=&quot;headerlink&quot; title=&quot;1.关键字&quot;&gt;&lt;/a&gt;1.关键字&lt;/h3&gt;
    
    </summary>
    
    
      <category term="Java系统学习-JavaSE篇" scheme="https://stephencurry6666.github.io/categories/Java%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0-JavaSE%E7%AF%87/"/>
    
    
      <category term="Java系统学习" scheme="https://stephencurry6666.github.io/tags/Java%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
